<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\cs99xx_zwp_output\obj\99_ZWP_M.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\cs99xx_zwp_output\obj\99_ZWP_M.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sun Oct 29 14:56:13 2017
<BR><P>
<H3>Maximum Stack Usage =       2452 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main_task &rArr; exe_cur_status &rArr; auto_calibration &rArr; draw_auto_calibration_gui &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7e8]">__user_initial_stackheap</a>
 <LI><a href="#[592]">OS_CPU_SR_Save</a>
 <LI><a href="#[594]">OS_CPU_SR_Restore</a>
 <LI><a href="#[5b4]">OSStartHighRdy</a>
 <LI><a href="#[599]">BBDtxSw</a>
 <LI><a href="#[5b1]">OSIntCtxSw</a>
 <LI><a href="#[47]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[78]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">ADC3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5b]">ADC1_2_IRQHandler</a> from stm32_adc.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[78]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">Communication</a> from cs99xx_interface.o(.text) referenced 2 times from cs99xx_interface.o(.data)
 <LI><a href="#[54]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[81]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[82]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[83]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[84]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[71]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[79]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[141]">GUIMONO_DispChar</a> from guicharm.o(.text) referenced 2 times from f6x8.o(.constdata)
 <LI><a href="#[142]">GUIMONO_GetCharDistX</a> from guicharm.o(.text) referenced 2 times from f6x8.o(.constdata)
 <LI><a href="#[143]">GUIMONO_GetFontInfo</a> from guicharm.o(.text) referenced 2 times from f6x8.o(.constdata)
 <LI><a href="#[144]">GUIMONO_IsInFont</a> from guicharm.o(.text) referenced 2 times from f6x8.o(.constdata)
 <LI><a href="#[134]">GUIPROP_DispChar</a> from guicharp.o(.text) referenced 12 times from simsun_12.o(.constdata)
 <LI><a href="#[135]">GUIPROP_GetCharDistX</a> from guicharp.o(.text) referenced 12 times from simsun_12.o(.constdata)
 <LI><a href="#[136]">GUIPROP_GetFontInfo</a> from guicharp.o(.text) referenced 12 times from simsun_12.o(.constdata)
 <LI><a href="#[137]">GUIPROP_IsInFont</a> from guicharp.o(.text) referenced 12 times from simsun_12.o(.constdata)
 <LI><a href="#[41]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[69]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[68]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6b]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6a]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b0]">IsKeyDown_key_0</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[a9]">IsKeyDown_key_01</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[a8]">IsKeyDown_key_02</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[a7]">IsKeyDown_key_03</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[a6]">IsKeyDown_key_04</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[a5]">IsKeyDown_key_05</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[a4]">IsKeyDown_key_06</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[b1]">IsKeyDown_key_1</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[b2]">IsKeyDown_key_2</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[b3]">IsKeyDown_key_3</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[b4]">IsKeyDown_key_4</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[b5]">IsKeyDown_key_5</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[b6]">IsKeyDown_key_6</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[b7]">IsKeyDown_key_7</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[b8]">IsKeyDown_key_8</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[b9]">IsKeyDown_key_9</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[a3]">IsKeyDown_key_EN0</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[a2]">IsKeyDown_key_EN1</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[aa]">IsKeyDown_key_F1</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[ab]">IsKeyDown_key_F2</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[ac]">IsKeyDown_key_F3</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[ad]">IsKeyDown_key_F4</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[9f]">IsKeyDown_key_F4_5</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[a1]">IsKeyDown_key_F4_8</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[a0]">IsKeyDown_key_F4_9</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[af]">IsKeyDown_key_enter</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[ae]">IsKeyDown_key_exit</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[9d]">IsKeyDown_key_start</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[9e]">IsKeyDown_key_stop</a> from keyboard.o(.text) referenced from keyboard.o(.text)
 <LI><a href="#[13c]">LCD_Index2Color_565</a> from lcdp565_index2color.o(.text) referenced from lcd_drawbitmap_565.o(.constdata)
 <LI><a href="#[42]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bb]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[ba]">OSTmr_Task</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[47]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a3]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[59f]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[14]">PLC_set</a> from cs99xx_interface.o(.text) referenced 2 times from cs99xx_interface.o(.data)
 <LI><a href="#[4a]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">RTC_IRQHandler</a> from rtc_config.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7a]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6c]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7c]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[85]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4b]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[63]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">TIM2_IRQHandler</a> from timer_config.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[66]">TIM3_IRQHandler</a> from dac_vref.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">TIM4_IRQHandler</a> from porttimer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7b]">TIM5_IRQHandler</a> from timer5_config.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7f]">TIM6_IRQHandler</a> from porttimer_m.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[80]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[74]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[77]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[76]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[75]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7d]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7e]">UART5_IRQHandler</a> from portserial_m.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6e]">USART1_IRQHandler</a> from portserial.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6f]">USART2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[70]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[73]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">USB_leading_in</a> from cs99xx_interface.o(.text) referenced 2 times from cs99xx_interface.o(.data)
 <LI><a href="#[16]">USB_leading_out</a> from cs99xx_interface.o(.text) referenced 2 times from cs99xx_interface.o(.data)
 <LI><a href="#[44]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13f]">_CalcSizeOfChar</a> from gui_uc_encodenone.o(.text) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[13a]">_DispLine_SJIS</a> from guiencjs.o(.text) referenced from guiencjs.o(.constdata)
 <LI><a href="#[13b]">_DrawBitmap_565</a> from lcd_drawbitmap_565.o(.text) referenced from lcd_drawbitmap_565.o(.constdata)
 <LI><a href="#[140]">_Encode</a> from gui_uc_encodenone.o(.text) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[13d]">_GetCharCode</a> from gui_uc_encodenone.o(.text) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[13e]">_GetCharSize</a> from gui_uc_encodenone.o(.text) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[138]">_GetLineDistX_SJIS</a> from guiencjs.o(.text) referenced from guiencjs.o(.constdata)
 <LI><a href="#[139]">_GetLineLen_SJIS</a> from guiencjs.o(.text) referenced from guiencjs.o(.constdata)
 <LI><a href="#[145]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[133]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[132]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[95]">auto_cal_cur_fun</a> from auto_calibration.o(.text) referenced from auto_calibration.o(.text)
 <LI><a href="#[99]">auto_cal_gr_fun</a> from auto_calibration.o(.text) referenced from auto_calibration.o(.text)
 <LI><a href="#[9b]">auto_cal_ir_fun</a> from auto_calibration.o(.text) referenced from auto_calibration.o(.text)
 <LI><a href="#[98]">auto_cal_save_dc_gr_ratio</a> from auto_calibration.o(.text) referenced from auto_calibration.o(.text)
 <LI><a href="#[94]">auto_cal_save_ratio</a> from auto_calibration.o(.text) referenced 4 times from auto_calibration.o(.text)
 <LI><a href="#[9a]">auto_cal_vol_fun</a> from auto_calibration.o(.text) referenced from auto_calibration.o(.text)
 <LI><a href="#[4]">cal_acw_out_vol_1</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[5]">cal_acw_out_vol_2</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[b]">cal_dcw_out_vol_1</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[c]">cal_dcw_out_vol_2</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[10]">cal_ir_out_vol_1</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[11]">cal_ir_out_vol_2</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[fb]">config_CS2676CH</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[fc]">config_CS2676CH_1</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[c2]">config_CS9906A</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[c3]">config_CS9906B</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[c4]">config_CS9906B_K</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[c5]">config_CS9912AX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[c6]">config_CS9912BX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[c7]">config_CS9912BX_L</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[c8]">config_CS9912BX_T</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[c9]">config_CS9912Y</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[ca]">config_CS9913AX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[cb]">config_CS9913BX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[cc]">config_CS9914AM</a> from cs99xx_type.o(.text) referenced 2 times from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[cd]">config_CS9914AM_H</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[ce]">config_CS9914AX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[cf]">config_CS9914AX_1</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[d0]">config_CS9914BM</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[d1]">config_CS9914BX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[d2]">config_CS9914CX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[d4]">config_CS9914CX_C</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[d3]">config_CS9914D</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[d5]">config_CS9914DX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[d6]">config_CS9914G</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[d7]">config_CS9914Y</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[d8]">config_CS9915AX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[d9]">config_CS9916AX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[da]">config_CS9916BX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[dd]">config_CS9917AX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[db]">config_CS9917A_8</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[de]">config_CS9917B</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[df]">config_CS9917BX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[e0]">config_CS9917CX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[e1]">config_CS9917CX_20</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[e2]">config_CS9917CX_C</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[e3]">config_CS9917DX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[e4]">config_CS9919A</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[e6]">config_CS9919AX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[e5]">config_CS9919A_8</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[e7]">config_CS9919B</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[e9]">config_CS9919BX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[e8]">config_CS9919B_4</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[dc]">config_CS9919D</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[ea]">config_CS9919G</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[eb]">config_CS9920A</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[ec]">config_CS9920B</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[ee]">config_CS9921BX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[ef]">config_CS9922BX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[f0]">config_CS9922BXJ</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[f1]">config_CS9922BX_1</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[f3]">config_CS9922CX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[f4]">config_CS9922DX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[f5]">config_CS9922EX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[f6]">config_CS9922EXJ</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[f7]">config_CS9922FX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[f8]">config_CS9922G</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[f9]">config_CS9922G_1</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[fa]">config_CS9922G_2</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[fe]">config_CS9922H_50</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[f2]">config_CS9922LB</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[ff]">config_CS9922M</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[100]">config_CS9923</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[101]">config_CS9923CG</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[107]">config_CS9923ECG</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[108]">config_CS9923ECG_1</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[106]">config_CS9923G</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[102]">config_CS9923G_1</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[103]">config_CS9923G_2</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[104]">config_CS9923G_3</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[105]">config_CS9923_5</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[109]">config_CS9924</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[10a]">config_CS9924_200</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[fd]">config_CS9927LB</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[10b]">config_CS9929A</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[10f]">config_CS9929AX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[10e]">config_CS9929AX_8</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[110]">config_CS9929AX_CC</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[111]">config_CS9929AX_T</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[10c]">config_CS9929A_4</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[10d]">config_CS9929A_8</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[112]">config_CS9929B</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[114]">config_CS9929BX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[113]">config_CS9929B_4</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[115]">config_CS9929CX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[116]">config_CS9929EX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[117]">config_CS9929EX_CC</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[ed]">config_CS9930A_T</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[118]">config_CS9933EG</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[119]">config_CS9933EG_1</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[11a]">config_CS9933EG_2</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[11b]">config_CS9933ET</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[11c]">config_CS9933ET_1</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[11d]">config_CS9933ET_2</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[11e]">config_CS9933ET_3</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[11f]">config_CS9933G</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[129]">config_CS9933G_</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[120]">config_CS9933G_4</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[121]">config_CS9933X</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[122]">config_CS9933X_100</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[123]">config_CS9939X</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[124]">config_CS9950CG</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[125]">config_CS9950CG_1</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[126]">config_CS9950CX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[127]">config_CS9950DX</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[128]">config_CS9950ED</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[12a]">config_CS9950X</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[c1]">config_debug_type</a> from cs99xx_type.o(.text) referenced from cs99xx_type.o(.ARM.__AT_0x0804EA48)
 <LI><a href="#[93]">count_cur_ratio</a> from auto_calibration.o(.text) referenced from auto_calibration.o(.text)
 <LI><a href="#[97]">count_gr_ratio</a> from auto_calibration.o(.text) referenced from auto_calibration.o(.text)
 <LI><a href="#[96]">count_vol_ratio</a> from auto_calibration.o(.text) referenced 2 times from auto_calibration.o(.text)
 <LI><a href="#[4bd]">cs99xx_big_cap_test</a> from serve_test.o(.text) referenced from serve_test.o(.text)
 <LI><a href="#[4b9]">cs99xx_g_test</a> from serve_test.o(.text) referenced from serve_test.o(.text)
 <LI><a href="#[4bb]">cs99xx_test</a> from serve_test.o(.text) referenced from serve_test.o(.text)
 <LI><a href="#[3b]">eMBFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[3a]">eMBFuncReportSlaveID</a> from mbfuncother.o(.text) referenced 4 times from mb.o(.data)
 <LI><a href="#[3d]">eMBMasterFuncReadFile</a> from mbfuncfile_m.o(.text) referenced 2 times from mb_m.o(.data)
 <LI><a href="#[3c]">eMBMasterFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding_m.o(.text) referenced 2 times from mb_m.o(.data)
 <LI><a href="#[3e]">eMBMasterFuncWriteFile</a> from mbfuncfile_m.o(.text) referenced 2 times from mb_m.o(.data)
 <LI><a href="#[12e]">eMBMasterRTUReceive</a> from mbrtu_m.o(.text) referenced from mb_m.o(.text)
 <LI><a href="#[12d]">eMBMasterRTUSend</a> from mbrtu_m.o(.text) referenced from mb_m.o(.text)
 <LI><a href="#[12b]">eMBMasterRTUStart</a> from mbrtu_m.o(.text) referenced from mb_m.o(.text)
 <LI><a href="#[12c]">eMBMasterRTUStop</a> from mbrtu_m.o(.text) referenced from mb_m.o(.text)
 <LI><a href="#[bf]">eMBRTUReceive</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[be]">eMBRTUSend</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[bc]">eMBRTUStart</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[bd]">eMBRTUStop</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[20d]">keyscan_task</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[211]">main_task</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[205]">modbus_master_polling_task</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[203]">modbus_master_send_task</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[207]">modbus_polling_task</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[91]">run_acw_test</a> from acw_test.o(.text) referenced from general_test.o(.text)
 <LI><a href="#[209]">sample_task</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[20b]">schedule_task</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[8]">serve_correct_acw_arc</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[7]">serve_correct_acw_cur_mA</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[6]">serve_correct_acw_cur_uA</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[a]">serve_correct_bbd_cur_mA</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[9]">serve_correct_bbd_cur_uA</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[f]">serve_correct_dcw_arc</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[e]">serve_correct_dcw_cur_mA</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[d]">serve_correct_dcw_cur_uA</a> from calibration.o(.text) referenced 2 times from calibration.o(.data)
 <LI><a href="#[13]">serve_correct_gr_out_cur</a> from calibration.o(.text) referenced 16 times from calibration.o(.data)
 <LI><a href="#[12]">serve_correct_ir_res</a> from calibration.o(.text) referenced 12 times from calibration.o(.data)
 <LI><a href="#[9c]">serve_test_poll_task</a> from serve_test.o(.text) referenced from bsp_config.o(.text)
 <LI><a href="#[8a]">server_new1</a> from cs99xx_memory.o(.text) referenced from cs99xx_memory.o(.text)
 <LI><a href="#[8e]">server_new2</a> from cs99xx_memory.o(.text) referenced from cs99xx_memory.o(.text)
 <LI><a href="#[8b]">server_new3</a> from cs99xx_memory.o(.text) referenced from cs99xx_memory.o(.text)
 <LI><a href="#[8c]">server_new4</a> from cs99xx_memory.o(.text) referenced from cs99xx_memory.o(.text)
 <LI><a href="#[8d]">server_new5</a> from cs99xx_memory.o(.text) referenced from cs99xx_memory.o(.text)
 <LI><a href="#[2a]">set_ac_cur_gear</a> from cs99xx_par_acw.o(.text) referenced 4 times from gui_draw.o(.data)
 <LI><a href="#[27]">set_all_ports</a> from cs99xx_par_com.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[27]">set_all_ports</a> from cs99xx_par_com.o(.text) referenced 4 times from cs99xx_set_par_path.o(.text)
 <LI><a href="#[39]">set_custom_options_par</a> from cs99xx_custom.o(.text) referenced 8 times from gui_draw.o(.data)
 <LI><a href="#[2b]">set_dcw_cur_gear</a> from cs99xx_par_dcw.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[25]">set_either_or_par</a> from cs99xx_par_com.o(.text) referenced 6 times from gui_draw.o(.data)
 <LI><a href="#[35]">set_either_or_sys_par</a> from cs99xx_sys.o(.text) referenced 36 times from gui_draw.o(.data)
 <LI><a href="#[28]">set_float_par</a> from cs99xx_par_com.o(.text) referenced 40 times from gui_draw.o(.data)
 <LI><a href="#[28]">set_float_par</a> from cs99xx_par_com.o(.text) referenced from cs99xx_set_par_path.o(.text)
 <LI><a href="#[38]">set_float_sys_par</a> from cs99xx_sys.o(.text) referenced 4 times from gui_draw.o(.data)
 <LI><a href="#[26]">set_frequency</a> from cs99xx_par_com.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[26]">set_frequency</a> from cs99xx_par_com.o(.text) referenced from cs99xx_set_par_path.o(.text)
 <LI><a href="#[2d]">set_gr_output_cur</a> from cs99xx_par_gr.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[2f]">set_gr_res_lower</a> from cs99xx_par_gr.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[2e]">set_gr_res_upper</a> from cs99xx_par_gr.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[32]">set_gr_test_method</a> from cs99xx_par_gr.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[2c]">set_gr_vol_gear</a> from cs99xx_par_gr.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[31]">set_gr_vol_lower</a> from cs99xx_par_gr.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[30]">set_gr_vol_upper</a> from cs99xx_par_gr.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[34]">set_int_sys_par</a> from cs99xx_sys.o(.text) referenced 8 times from gui_draw.o(.data)
 <LI><a href="#[23]">set_mode</a> from cs99xx_par_com.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[33]">set_option_par</a> from cs99xx_par_com.o(.text) referenced 4 times from gui_draw.o(.data)
 <LI><a href="#[36]">set_option_sys_par</a> from cs99xx_sys.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[37]">set_plc_option_sys_par</a> from cs99xx_sys.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[22]">set_step</a> from cs99xx_par_com.o(.text) referenced 2 times from gui_draw.o(.data)
 <LI><a href="#[24]">set_test_time</a> from cs99xx_par_com.o(.text) referenced 12 times from gui_draw.o(.data)
 <LI><a href="#[29]">set_voltage</a> from cs99xx_par_com.o(.text) referenced 10 times from gui_draw.o(.data)
 <LI><a href="#[87]">startup_task</a> from app.o(.text) referenced from main.o(.text)
 <LI><a href="#[1a]">sys_interface</a> from cs99xx_interface.o(.text) referenced 2 times from cs99xx_parameter.o(.data)
 <LI><a href="#[1e]">sys_lockkeyboard</a> from cs99xx_lock_key.o(.text) referenced 2 times from cs99xx_parameter.o(.data)
 <LI><a href="#[1e]">sys_lockkeyboard</a> from cs99xx_lock_key.o(.text) referenced from cs99xx_parameter.o(.text)
 <LI><a href="#[18]">sys_memory</a> from cs99xx_memory.o(.text) referenced 2 times from cs99xx_parameter.o(.data)
 <LI><a href="#[1c]">sys_offset</a> from cs99xx_offset.o(.text) referenced 2 times from cs99xx_parameter.o(.data)
 <LI><a href="#[1b]">sys_password</a> from cs99xx_pw.o(.text) referenced 2 times from cs99xx_parameter.o(.data)
 <LI><a href="#[1f]">sys_recover</a> from cs99xx_lock_key.o(.text) referenced 2 times from cs99xx_parameter.o(.data)
 <LI><a href="#[1d]">sys_result</a> from cs99xx_result.o(.text) referenced 2 times from cs99xx_parameter.o(.data)
 <LI><a href="#[20]">sys_settime</a> from cs99xx_time.o(.text) referenced 2 times from cs99xx_parameter.o(.data)
 <LI><a href="#[19]">sys_sys</a> from cs99xx_sys.o(.text) referenced 2 times from cs99xx_parameter.o(.data)
 <LI><a href="#[19]">sys_sys</a> from cs99xx_sys.o(.text) referenced from cs99xx_parameter.o(.text)
 <LI><a href="#[21]">sys_updata</a> from cs99xx_time.o(.text) referenced 2 times from cs99xx_parameter.o(.data)
 <LI><a href="#[92]">test_big_cap_irq</a> from irq.o(.text) referenced from serve_test.o(.text)
 <LI><a href="#[8f]">test_g_irq</a> from irq.o(.text) referenced 2 times from cs99xx_offset.o(.text)
 <LI><a href="#[90]">test_irq</a> from irq.o(.text) referenced 3 times from cs99xx_offset.o(.text)
 <LI><a href="#[12f]">xMBMasterRTUReceiveFSM</a> from mbrtu_m.o(.text) referenced from mb_m.o(.text)
 <LI><a href="#[131]">xMBMasterRTUTimerExpired</a> from mbrtu_m.o(.text) referenced from mb_m.o(.text)
 <LI><a href="#[130]">xMBMasterRTUTransmitFSM</a> from mbrtu_m.o(.text) referenced from mb_m.o(.text)
 <LI><a href="#[88]">xMBRTUReceiveFSM</a> from mbrtu.o(.text) referenced 2 times from app.o(.text)
 <LI><a href="#[c0]">xMBRTUTimerT35Expired</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[89]">xMBRTUTransmitFSM</a> from mbrtu.o(.text) referenced 2 times from app.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[145]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[146]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[148]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[81a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[81b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[81c]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[81d]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[81e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[149]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7db]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[14b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[81f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[150]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[820]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[821]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[822]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[823]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[824]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[825]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[826]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[827]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[828]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[829]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[82a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[82b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[82c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[82d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[82e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[82f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[830]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[831]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[832]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[833]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[155]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[834]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[835]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[836]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[837]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[838]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[839]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[147]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[83a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[14d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[83b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[151]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[83c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7e9]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[154]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[83d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[156]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7e8]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[85]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[83e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[510]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cs99xx_nvic_group
</UL>

<P><STRONG><a name="[33b]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exit
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config_For_ADC_Watchdog
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Conf
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_it_init
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_it_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[83f]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[840]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[841]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[56a]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[842]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[56b]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[843]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[568]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WatchdogOFF
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[56c]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[56d]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[56e]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[56f]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[571]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[844]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[845]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[846]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[570]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[847]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[573]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[848]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[849]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[84a]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[84b]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[84c]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[84d]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[84e]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[84f]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[850]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[851]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[852]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[567]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WatchdogConfig
</UL>

<P><STRONG><a name="[566]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WatchdogConfig
</UL>

<P><STRONG><a name="[565]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WatchdogConfig
</UL>

<P><STRONG><a name="[853]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[572]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[574]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[854]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[575]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[855]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[856]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[857]"></a>BKP_ITConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[858]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[859]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_updata
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_for_last_task
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_for_synchro
</UL>

<P><STRONG><a name="[530]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[85a]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[85b]"></a>BKP_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[85c]"></a>BKP_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[85d]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>CRC_ResetDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_flash
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_eep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio_to_eep
</UL>

<P><STRONG><a name="[85e]"></a>CRC_CalcCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_crc.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>CRC_CalcBlockCRC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_CalcBlockCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_flash
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_eep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio_to_eep
</UL>

<P><STRONG><a name="[85f]"></a>CRC_GetCRC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_crc.o(.text), UNUSED)

<P><STRONG><a name="[860]"></a>CRC_SetIDRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_crc.o(.text), UNUSED)

<P><STRONG><a name="[861]"></a>CRC_GetIDRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_crc.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>DAC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[560]"></a>DAC_Init</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac1_Init
</UL>

<P><STRONG><a name="[862]"></a>DAC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[561]"></a>DAC_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac1_Init
</UL>

<P><STRONG><a name="[863]"></a>DAC_DMACmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[864]"></a>DAC_SoftwareTriggerCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[865]"></a>DAC_DualSoftwareTriggerCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[866]"></a>DAC_WaveGenerationCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[562]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_scan_fun
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac1_Init
</UL>

<P><STRONG><a name="[867]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[868]"></a>DAC_SetDualChannelData</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[869]"></a>DAC_GetDataOutputValue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exit
</UL>

<P><STRONG><a name="[33e]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exit
</UL>

<P><STRONG><a name="[86a]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[86b]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[86c]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[86d]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[86e]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[86f]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[870]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[4a5]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_flash
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_pages_flash
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_one_page_bin
</UL>

<P><STRONG><a name="[871]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[4a8]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_flash
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_pages_flash
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_one_page_bin
</UL>

<P><STRONG><a name="[872]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[160]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[162]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_pages_flash
</UL>

<P><STRONG><a name="[163]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[164]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[165]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[167]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[166]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[168]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[169]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_flash
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_one_page_bin
</UL>

<P><STRONG><a name="[16a]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[16b]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 200 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[16c]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[16d]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[873]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[874]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[875]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[876]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[4a7]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_pages_flash
</UL>

<P><STRONG><a name="[4a6]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_pages_flash
</UL>

<P><STRONG><a name="[877]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[878]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[879]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[87a]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[522]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
</UL>

<P><STRONG><a name="[87b]"></a>FSMC_NANDInit</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[87c]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[87d]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[87e]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[87f]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[523]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
</UL>

<P><STRONG><a name="[880]"></a>FSMC_NANDCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[881]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[882]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[883]"></a>FSMC_GetECC</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[884]"></a>FSMC_ITConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[885]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[886]"></a>FSMC_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[887]"></a>FSMC_GetITStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[888]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[16f]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[33a]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exit
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_gpio_init
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPLD_GPIO
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_SPI_CPLD_GPIO
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac1_Init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD4051_Init
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_GPIO_Config
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_CAL_IN
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_SDA_OUT
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_SDA_IN
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_keyboard_init
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gpio_switch_hv
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[889]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[54e]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_read_byte
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromCPLD
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Idle
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cread_byte_from24C512
</UL>

<P><STRONG><a name="[53d]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>

<P><STRONG><a name="[88a]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[88b]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[50d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch_hv
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_write
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_flash
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_read_byte
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_unlock
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromCPLD
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac1_Init
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write_RA
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte_RA
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write_Port
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte_Port
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteProtect
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Idle
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cread_byte_from24C512
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cwrite_byte_to24C512
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_NOACK
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_ACK
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_ACK
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
</UL>

<P><STRONG><a name="[50e]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_switch_hv
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_write
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_flash
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_read_byte
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_lock
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromCPLD
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write_RA
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte_RA
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write_Port
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte_Port
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_GPIO_Config
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteProtect
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Idle
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cread_byte_from24C512
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cwrite_byte_to24C512
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_NOACK
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_ACK
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_ACK
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
</UL>

<P><STRONG><a name="[88c]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[88d]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[88e]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[88f]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[890]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[891]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exit
</UL>

<P><STRONG><a name="[892]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[52b]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[893]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[894]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[895]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[896]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[897]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[898]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[899]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[89a]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[89b]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[171]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[89c]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[89d]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[89e]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[89f]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8a0]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8a1]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8a2]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8a3]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8a4]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8a5]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8a6]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[569]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[52c]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[8a7]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[52d]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[52e]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[18b]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
</UL>

<P><STRONG><a name="[514]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Config
</UL>

<P><STRONG><a name="[339]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exit
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_gpio_init
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPLD_GPIO
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_SPI_CPLD_GPIO
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac1_Init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD4051_Init
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_GPIO_Config
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_keyboard_init
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gpio_switch_hv
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[52a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac1_Init
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_it_init
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_it_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[15b]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[15f]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
</UL>

<P><STRONG><a name="[15d]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[8a8]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8a9]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[531]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[8aa]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8ab]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[52f]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[174]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[175]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[533]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetTime
</UL>

<P><STRONG><a name="[173]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetTime
</UL>

<P><STRONG><a name="[176]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[177]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[8ac]"></a>RTC_GetDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[535]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetTime
</UL>

<P><STRONG><a name="[8ad]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[8ae]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[8af]"></a>RTC_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[537]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[538]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[539]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_it_init
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_it_init
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[8b0]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b1]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b2]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b3]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[17f]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[17d]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[17b]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[179]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[182]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[8b4]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b5]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b6]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b7]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b8]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[53b]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim2_open
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim2_close
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_it_init
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_it_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[8b9]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[53a]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim2_open
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim2_close
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_it_init
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_it_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[8ba]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8bb]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8bc]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8bd]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[183]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[185]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[187]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[186]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[188]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[8be]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8bf]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c0]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c1]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c2]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c3]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c4]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d4]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[8c5]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c6]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c7]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c8]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8c9]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ca]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8cb]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8cc]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8cd]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ce]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8cf]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d0]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d1]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d2]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d3]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d4]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d5]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d6]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d7]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d8]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8d9]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8da]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8db]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8dc]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8dd]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8de]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8df]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e0]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e1]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e2]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e3]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e4]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d5]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[8e5]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e6]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e7]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e8]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8e9]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ea]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8eb]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ec]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ed]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ee]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8ef]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8f0]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8f1]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[57b]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[53c]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[4c7]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_it_init
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_it_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[189]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[18a]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[8f2]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f3]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f4]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[6cf]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortClose
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortClose
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[6cd]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortClose
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortClose
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>

<P><STRONG><a name="[8f5]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f6]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f7]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f8]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f9]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8fa]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[6d0]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialPutByte
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
</UL>

<P><STRONG><a name="[6d1]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialGetByte
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
</UL>

<P><STRONG><a name="[8fb]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8fc]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8fd]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8fe]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8ff]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[900]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[901]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[902]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[903]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[904]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[725]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[905]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a1]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_4094
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[40]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>HardFault_Handler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[906]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; stop_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_irq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_delay_10us
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = EXTI15_10_IRQHandler &rArr; short_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_delay_us
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_delay_10us
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_irq
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfi_irq
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_irq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>USART2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a3]"></a>get_arc_h</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>

<P><STRONG><a name="[1a4]"></a>config_all_init</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_all_init &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type
</UL>

<P><STRONG><a name="[c1]"></a>config_debug_type</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_debug_type &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[e6]"></a>config_CS9919AX</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9919AX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[e9]"></a>config_CS9919BX</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9919BX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[e8]"></a>config_CS9919B_4</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9919B_4 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[113]"></a>config_CS9929B_4</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929B_4 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[120]"></a>config_CS9933G_4</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933G_4 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[106]"></a>config_CS9923G</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9923G &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[107]"></a>config_CS9923ECG</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9923ECG &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[108]"></a>config_CS9923ECG_1</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9923ECG_1 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[123]"></a>config_CS9939X</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9939X &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[119]"></a>config_CS9933EG_1</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933EG_1 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[11a]"></a>config_CS9933EG_2</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933EG_2 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[cc]"></a>config_CS9914AM</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914AM &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[d0]"></a>config_CS9914BM</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914BM &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[e0]"></a>config_CS9917CX</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9917CX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[e3]"></a>config_CS9917DX</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9917DX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[10f]"></a>config_CS9929AX</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929AX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[110]"></a>config_CS9929AX_CC</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929AX_CC &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[1a5]"></a>config_CS9929AX_F</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>

<P><STRONG><a name="[111]"></a>config_CS9929AX_T</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929AX_T &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[114]"></a>config_CS9929BX</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929BX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[ef]"></a>config_CS9922BX</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922BX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[f2]"></a>config_CS9922LB</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922LB &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[f0]"></a>config_CS9922BXJ</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922BXJ &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[f1]"></a>config_CS9922BX_1</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922BX_1 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[1a6]"></a>config_CS9922BX_DZ</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>

<P><STRONG><a name="[f3]"></a>config_CS9922CX</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922CX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[121]"></a>config_CS9933X</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933X &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[1a7]"></a>config_RH8400AS</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>

<P><STRONG><a name="[122]"></a>config_CS9933X_100</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933X_100 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[c5]"></a>config_CS9912AX</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9912AX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[c6]"></a>config_CS9912BX</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9912BX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[c7]"></a>config_CS9912BX_L</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9912BX_L &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[c8]"></a>config_CS9912BX_T</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9912BX_T &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[ca]"></a>config_CS9913AX</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9913AX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[cb]"></a>config_CS9913BX</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9913BX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[12a]"></a>config_CS9950X</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9950X &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[126]"></a>config_CS9950CX</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9950CX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[127]"></a>config_CS9950DX</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9950DX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[128]"></a>config_CS9950ED</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9950ED &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[129]"></a>config_CS9933G_</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933G_ &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[f4]"></a>config_CS9922DX</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922DX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[f5]"></a>config_CS9922EX</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922EX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[f6]"></a>config_CS9922EXJ</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922EXJ &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[ce]"></a>config_CS9914AX</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914AX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[d3]"></a>config_CS9914D</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914D &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[cf]"></a>config_CS9914AX_1</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914AX_1 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[d1]"></a>config_CS9914BX</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914BX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[d4]"></a>config_CS9914CX_C</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914CX_C &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[d5]"></a>config_CS9914DX</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914DX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[115]"></a>config_CS9929CX</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929CX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[f7]"></a>config_CS9922FX</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922FX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[ee]"></a>config_CS9921BX</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9921BX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[c9]"></a>config_CS9912Y</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9912Y &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[d7]"></a>config_CS9914Y</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914Y &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[1a8]"></a>config_CS9922CX_1</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>

<P><STRONG><a name="[116]"></a>config_CS9929EX</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929EX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[117]"></a>config_CS9929EX_CC</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929EX_CC &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[ea]"></a>config_CS9919G</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9919G &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[f8]"></a>config_CS9922G</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922G &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[f9]"></a>config_CS9922G_1</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922G_1 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[fa]"></a>config_CS9922G_2</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922G_2 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[fb]"></a>config_CS2676CH</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS2676CH &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[fc]"></a>config_CS2676CH_1</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS2676CH_1 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[fd]"></a>config_CS9927LB</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9927LB &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[11f]"></a>config_CS9933G</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933G &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[124]"></a>config_CS9950CG</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9950CG &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[125]"></a>config_CS9950CG_1</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9950CG_1 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[d6]"></a>config_CS9914G</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914G &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[e4]"></a>config_CS9919A</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9919A &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[e7]"></a>config_CS9919B</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9919B &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[10b]"></a>config_CS9929A</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929A &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[112]"></a>config_CS9929B</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929B &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[ff]"></a>config_CS9922M</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922M &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[d8]"></a>config_CS9915AX</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9915AX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[d9]"></a>config_CS9916AX</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9916AX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[da]"></a>config_CS9916BX</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9916BX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[dd]"></a>config_CS9917AX</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9917AX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[db]"></a>config_CS9917A_8</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9917A_8 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[dc]"></a>config_CS9919D</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9919D &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[df]"></a>config_CS9917BX</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9917BX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[eb]"></a>config_CS9920A</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9920A &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[ed]"></a>config_CS9930A_T</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9930A_T &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[ec]"></a>config_CS9920B</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9920B &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[100]"></a>config_CS9923</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9923 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[101]"></a>config_CS9923CG</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9923CG &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[102]"></a>config_CS9923G_1</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9923G_1 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[103]"></a>config_CS9923G_2</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9923G_2 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[104]"></a>config_CS9923G_3</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9923G_3 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[105]"></a>config_CS9923_5</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9923_5 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[1a9]"></a>config_CS9923A</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>

<P><STRONG><a name="[118]"></a>config_CS9933EG</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933EG &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[11b]"></a>config_CS9933ET</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933ET &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[11c]"></a>config_CS9933ET_1</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933ET_1 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[11d]"></a>config_CS9933ET_2</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933ET_2 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[11e]"></a>config_CS9933ET_3</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9933ET_3 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[fe]"></a>config_CS9922H_50</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9922H_50 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[d2]"></a>config_CS9914CX</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914CX &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[c3]"></a>config_CS9906B</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9906B &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[10d]"></a>config_CS9929A_8</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929A_8 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[10e]"></a>config_CS9929AX_8</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929AX_8 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[1aa]"></a>config_VTC9929</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>

<P><STRONG><a name="[1ab]"></a>config_TSK7630</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>

<P><STRONG><a name="[e5]"></a>config_CS9919A_8</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9919A_8 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[de]"></a>config_CS9917B</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9917B &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[c4]"></a>config_CS9906B_K</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9906B_K &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[c2]"></a>config_CS9906A</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9906A &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[10c]"></a>config_CS9929A_4</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9929A_4 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[e1]"></a>config_CS9917CX_20</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9917CX_20 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[e2]"></a>config_CS9917CX_C</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9917CX_C &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[10a]"></a>config_CS9924_200</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9924_200 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[109]"></a>config_CS9924</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9924 &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[cd]"></a>config_CS9914AM_H</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_CS9914AM_H &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_type.o(.ARM.__AT_0x0804EA48)
</UL>
<P><STRONG><a name="[1ac]"></a>config_default</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_default &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type
</UL>

<P><STRONG><a name="[1b8]"></a>get_version_number</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_type
</UL>

<P><STRONG><a name="[1ba]"></a>read_type_pin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_type
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type
</UL>

<P><STRONG><a name="[378]"></a>check_gr_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[907]"></a>get_first_mode</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, cs99xx_type.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>judge_support_g_mode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_other_speciality
</UL>

<P><STRONG><a name="[1ad]"></a>init_default_type</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speciality
</UL>

<P><STRONG><a name="[1b5]"></a>judge_single_gr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_other_speciality
</UL>

<P><STRONG><a name="[1b2]"></a>judge_amp_type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_other_speciality
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_par_info
</UL>

<P><STRONG><a name="[1b3]"></a>judge_u_leading_data_sw</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_other_speciality
</UL>

<P><STRONG><a name="[1ae]"></a>init_other_speciality</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_other_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ir_segment
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dcw_segment
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_acw_segment
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_u_leading_data_sw
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_amp_type
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_single_gr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_support_g_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type
</UL>

<P><STRONG><a name="[908]"></a>get_custom_type_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cs99xx_type.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>is_custom_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_type
</UL>

<P><STRONG><a name="[1b6]"></a>init_custom_type</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_custom_type
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_custom_type
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type
</UL>

<P><STRONG><a name="[1b9]"></a>check_type</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = check_type &rArr; config_default &rArr; init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_type
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_other_speciality
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_type_pin
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_all_init
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
</UL>

<P><STRONG><a name="[1bb]"></a>draw_page_type</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_type
</UL>

<P><STRONG><a name="[909]"></a>judge_valid_type</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cs99xx_type.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>prompt_recover_type</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>

<P><STRONG><a name="[1c7]"></a>select_type</STRONG> (Thumb, 820 bytes, Stack size 48 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_flash
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_pages_flash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_page_type
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_type_pin
</UL>

<P><STRONG><a name="[34b]"></a>define_vol_kinds</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = define_vol_kinds
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_step
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
</UL>

<P><STRONG><a name="[35d]"></a>define_fail_mode_kinds</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = define_fail_mode_kinds
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
</UL>

<P><STRONG><a name="[267]"></a>define_cur_kinds</STRONG> (Thumb, 554 bytes, Stack size 20 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = define_cur_kinds
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_step
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_step
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_step
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_acw_par
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dcw_par
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cc_par
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gear_for_comm
</UL>

<P><STRONG><a name="[90a]"></a>get_max_cur_gear</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, cs99xx_type.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>define_hz_kinds</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = define_hz_kinds
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_acw_par
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cc_par
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hz_for_comm
</UL>

<P><STRONG><a name="[1cc]"></a>check_mode</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, cs99xx_type.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[711]"></a>check_this_mode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_res_data
</UL>

<P><STRONG><a name="[1cf]"></a>check_test_mode</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = check_test_mode &rArr; define_modes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_save_step_data
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[333]"></a>define_interface_config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = define_interface_config
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_interface
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_interface
</UL>

<P><STRONG><a name="[47b]"></a>get_acw_max_gear</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
</UL>

<P><STRONG><a name="[90b]"></a>get_cc_max_gear</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, cs99xx_type.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>get_dcw_max_gear</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_10kv_short_vref
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_5kv_short_vref
</UL>

<P><STRONG><a name="[1d0]"></a>save_custom_type_info</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = save_custom_type_info &rArr; write_u16_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_flash
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_pages_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_custom_par
</UL>

<P><STRONG><a name="[1d1]"></a>read_custom_par</STRONG> (Thumb, 46 bytes, Stack size 72 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = read_custom_par &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_custom_sys_par
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1d4]"></a>save_custom_par</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = save_custom_par &rArr; save_custom_type_info &rArr; write_u16_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_custom_type_info
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_par_info
</UL>

<P><STRONG><a name="[1d7]"></a>get_cur_type_num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
</UL>

<P><STRONG><a name="[1d5]"></a>set_custom_type_info</STRONG> (Thumb, 654 bytes, Stack size 248 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = set_custom_type_info &rArr; serve_charkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor_l
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_charkey
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_custom_type_gui
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_type_num
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_custom_type_info
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_custom_type
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
</UL>

<P><STRONG><a name="[21b]"></a>get_cal_pin</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[90c]"></a>get_key_task_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>off_keyboard</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = off_keyboard &rArr; OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_task
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_type
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_comm_ctrl_status_dispose
</UL>

<P><STRONG><a name="[1c6]"></a>on_keyboard</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = on_keyboard &rArr; OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_type
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_discharge_over
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_comm_ctrl_status_dispose
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_module
</UL>

<P><STRONG><a name="[1e2]"></a>clear_keyboard</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = clear_keyboard &rArr; OSQAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_irq
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
</UL>

<P><STRONG><a name="[1e3]"></a>off_sample_task</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = off_sample_task &rArr; OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_task
</UL>

<P><STRONG><a name="[22b]"></a>disable_sample_task</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_irq
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfi_irq
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_irq
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_hv
</UL>

<P><STRONG><a name="[238]"></a>on_sample_task</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_irq
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_draw_test_ui
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
</UL>

<P><STRONG><a name="[1e5]"></a>resume_sample_task</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = resume_sample_task &rArr; OSTimeDlyResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
</UL>

<P><STRONG><a name="[1e7]"></a>off_schedule_task</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = off_schedule_task &rArr; OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_running
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_draw_test_ui
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
</UL>

<P><STRONG><a name="[1e9]"></a>on_schedule_task</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = on_schedule_task &rArr; OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details_g
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[1ea]"></a>mdbus_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mdbus_init &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterEnable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_init
</UL>

<P><STRONG><a name="[1f3]"></a>exe_cur_status</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2436 + Unknown Stack Size
<LI>Call Chain = exe_cur_status &rArr; auto_calibration &rArr; draw_auto_calibration_gui &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_subtask
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_modules
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rtc_int
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_rtc_int
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_subtask
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_main
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Show
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[200]"></a>clear_mdbus_send_queue</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = clear_mdbus_send_queue &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_master_send_task
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[203]"></a>modbus_master_send_task</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = modbus_master_send_task &rArr; clear_mdbus_send_queue &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_send_cmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mdbus_send_queue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[205]"></a>modbus_master_polling_task</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = modbus_master_polling_task &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[207]"></a>modbus_polling_task</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = modbus_polling_task &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[209]"></a>sample_task</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = sample_task &rArr; adc_sample &rArr; count_dis_value &rArr; cpld_count_angle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_sample_task
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[20b]"></a>schedule_task</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = schedule_task &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[20d]"></a>keyscan_task</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = keyscan_task &rArr; report_key_value &rArr; Det_combination &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_key_value
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_keyboard
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[20f]"></a>create_other_task</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = create_other_task &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[211]"></a>main_task</STRONG> (Thumb, 664 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2452 + Unknown Stack Size
<LI>Call Chain = main_task &rArr; exe_cur_status &rArr; auto_calibration &rArr; draw_auto_calibration_gui &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_date
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_main
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_cal_info
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_off
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_program_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Show
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_other_task
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_pin
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_custom_par
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>startup_task</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = startup_task &rArr; test_md5 &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_md5
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[226]"></a>get_ir_res_meal</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_ir_res_meal &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geat_ir_res_cal_points_num
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_res_order
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_cal_point_info
</UL>

<P><STRONG><a name="[228]"></a>geat_ir_res_cal_points_num</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = geat_ir_res_cal_points_num &rArr; get_ir_res_meal &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_res_meal
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_res_order
</UL>

<P><STRONG><a name="[272]"></a>confirm_vol_segment_s</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm_vol_segment
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
</UL>

<P><STRONG><a name="[1af]"></a>is_acw_segment</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_other_speciality
</UL>

<P><STRONG><a name="[1b0]"></a>is_dcw_segment</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_other_speciality
</UL>

<P><STRONG><a name="[1b1]"></a>is_ir_segment</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_other_speciality
</UL>

<P><STRONG><a name="[22a]"></a>stop_cal</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = stop_cal &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sample_task
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_exception
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
</UL>

<P><STRONG><a name="[22e]"></a>startup_cal</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = startup_cal &rArr; open_sine &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_posrts_mc14094_ctrl
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ready
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_motion
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_cal
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_test_flag
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dc_gr_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_sample_task
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sample_task
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_sample_task
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
</UL>

<P><STRONG><a name="[239]"></a>start_correct_acw_vol</STRONG> (Thumb, 1534 bytes, Stack size 88 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = start_correct_acw_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
</UL>

<P><STRONG><a name="[24a]"></a>correct_acw_out_v</STRONG> (Thumb, 846 bytes, Stack size 48 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = correct_acw_out_v &rArr; start_correct_acw_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_out_v
</UL>

<P><STRONG><a name="[24f]"></a>serve_correct_acw_out_v</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = serve_correct_acw_out_v &rArr; correct_acw_out_v &rArr; start_correct_acw_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_acw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_out_vol_2
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_out_vol_1
</UL>

<P><STRONG><a name="[4]"></a>cal_acw_out_vol_1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = cal_acw_out_vol_1 &rArr; serve_correct_acw_out_v &rArr; correct_acw_out_v &rArr; start_correct_acw_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_out_v
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>cal_acw_out_vol_2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = cal_acw_out_vol_2 &rArr; serve_correct_acw_out_v &rArr; correct_acw_out_v &rArr; start_correct_acw_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_out_v
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[250]"></a>correct_exception</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = correct_exception &rArr; stop_cal &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_judge_err
</UL>

<P><STRONG><a name="[252]"></a>start_correct_dcw_vol</STRONG> (Thumb, 1590 bytes, Stack size 88 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = start_correct_dcw_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_judge_err
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
</UL>

<P><STRONG><a name="[254]"></a>correct_dcw_out_v</STRONG> (Thumb, 812 bytes, Stack size 48 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = correct_dcw_out_v &rArr; start_correct_dcw_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_out_v
</UL>

<P><STRONG><a name="[256]"></a>serve_correct_dcw_out_v</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = serve_correct_dcw_out_v &rArr; correct_dcw_out_v &rArr; start_correct_dcw_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_dcw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_dcw_out_vol_2
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_dcw_out_vol_1
</UL>

<P><STRONG><a name="[b]"></a>cal_dcw_out_vol_1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = cal_dcw_out_vol_1 &rArr; serve_correct_dcw_out_v &rArr; correct_dcw_out_v &rArr; start_correct_dcw_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_out_v
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>cal_dcw_out_vol_2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = cal_dcw_out_vol_2 &rArr; serve_correct_dcw_out_v &rArr; correct_dcw_out_v &rArr; start_correct_dcw_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_out_v
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[257]"></a>start_correct_ir_vol</STRONG> (Thumb, 1552 bytes, Stack size 88 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = start_correct_ir_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
</UL>

<P><STRONG><a name="[258]"></a>correct_ir_out_v</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = correct_ir_out_v &rArr; start_correct_ir_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_out_v
</UL>

<P><STRONG><a name="[25a]"></a>serve_correct_ir_out_v</STRONG> (Thumb, 582 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = serve_correct_ir_out_v &rArr; correct_ir_out_v &rArr; start_correct_ir_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_ir
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_ir_out_vol_2
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_ir_out_vol_1
</UL>

<P><STRONG><a name="[10]"></a>cal_ir_out_vol_1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = cal_ir_out_vol_1 &rArr; serve_correct_ir_out_v &rArr; correct_ir_out_v &rArr; start_correct_ir_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_out_v
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>cal_ir_out_vol_2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = cal_ir_out_vol_2 &rArr; serve_correct_ir_out_v &rArr; correct_ir_out_v &rArr; start_correct_ir_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_out_v
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[25d]"></a>init_ratio</STRONG> (Thumb, 864 bytes, Stack size 12 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_ratio
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ratio_all
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_flash
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_eep
</UL>

<P><STRONG><a name="[1f2]"></a>init_ratio_all</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_ratio_all &rArr; init_ratio
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ratio
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_init
</UL>

<P><STRONG><a name="[25e]"></a>set_out_vol</STRONG> (Thumb, 1000 bytes, Stack size 160 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = set_out_vol &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_uA
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_cur
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_more_cur
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_more
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_uA
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_cur
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_more_cur
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_uA
</UL>

<P><STRONG><a name="[25f]"></a>start_correct_acw_cur</STRONG> (Thumb, 1072 bytes, Stack size 176 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = start_correct_acw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm_vol_segment
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
</UL>

<P><STRONG><a name="[262]"></a>correct_acw_measure_uA</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>

<P><STRONG><a name="[264]"></a>correct_acw_cur_gear</STRONG> (Thumb, 764 bytes, Stack size 40 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = correct_acw_cur_gear &rArr; start_correct_acw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_cur
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_more_cur
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_uA
</UL>

<P><STRONG><a name="[6]"></a>serve_correct_acw_cur_uA</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = serve_correct_acw_cur_uA &rArr; correct_acw_cur_gear &rArr; start_correct_acw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_acw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[265]"></a>cal_acw_more_more_cur</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = cal_acw_more_more_cur &rArr; correct_acw_cur_gear &rArr; start_correct_acw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_acw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_cur
</UL>

<P><STRONG><a name="[266]"></a>cal_acw_more_cur</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = cal_acw_more_cur &rArr; cal_acw_more_more_cur &rArr; correct_acw_cur_gear &rArr; start_correct_acw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_more_cur
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_acw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
</UL>

<P><STRONG><a name="[7]"></a>serve_correct_acw_cur_mA</STRONG> (Thumb, 546 bytes, Stack size 88 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = serve_correct_acw_cur_mA &rArr; cal_acw_more_cur &rArr; cal_acw_more_more_cur &rArr; correct_acw_cur_gear &rArr; start_correct_acw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_cur
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_acw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[269]"></a>correct_acw_arc_g</STRONG> (Thumb, 902 bytes, Stack size 160 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = correct_acw_arc_g &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_arc
</UL>

<P><STRONG><a name="[26b]"></a>correct_acw_arc_c</STRONG> (Thumb, 1092 bytes, Stack size 160 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = correct_acw_arc_c &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_arc
</UL>

<P><STRONG><a name="[8]"></a>serve_correct_acw_arc</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = serve_correct_acw_arc &rArr; correct_acw_arc_c &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_acw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[26d]"></a>start_correct_acw_vol_real_cur</STRONG> (Thumb, 680 bytes, Stack size 160 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[26f]"></a>get_cal_acw_vol_meal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
</UL>

<P><STRONG><a name="[26e]"></a>correct_acw</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = correct_acw &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_acw_vol_meal
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_acw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
</UL>

<P><STRONG><a name="[270]"></a>set_out_dcw_vol</STRONG> (Thumb, 890 bytes, Stack size 160 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[271]"></a>start_correct_dcw_cur</STRONG> (Thumb, 980 bytes, Stack size 176 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = start_correct_dcw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm_vol_segment_s
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
</UL>

<P><STRONG><a name="[273]"></a>correct_dcw_cur_gear</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = correct_dcw_cur_gear &rArr; start_correct_dcw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_more
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_uA
</UL>

<P><STRONG><a name="[d]"></a>serve_correct_dcw_cur_uA</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = serve_correct_dcw_cur_uA &rArr; correct_dcw_cur_gear &rArr; start_correct_dcw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_dcw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[274]"></a>dcw_cur_more</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = dcw_cur_more &rArr; correct_dcw_cur_gear &rArr; start_correct_dcw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_dcw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
</UL>

<P><STRONG><a name="[e]"></a>serve_correct_dcw_cur_mA</STRONG> (Thumb, 686 bytes, Stack size 96 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = serve_correct_dcw_cur_mA &rArr; dcw_cur_more &rArr; correct_dcw_cur_gear &rArr; start_correct_dcw_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_dcw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[275]"></a>correct_dcw_arc_g</STRONG> (Thumb, 838 bytes, Stack size 160 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = correct_dcw_arc_g &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_arc
</UL>

<P><STRONG><a name="[276]"></a>correct_dcw_arc_c</STRONG> (Thumb, 1008 bytes, Stack size 160 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = correct_dcw_arc_c &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_arc
</UL>

<P><STRONG><a name="[f]"></a>serve_correct_dcw_arc</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = serve_correct_dcw_arc &rArr; correct_dcw_arc_c &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_dcw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[278]"></a>get_cal_dcw_vol_meal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
</UL>

<P><STRONG><a name="[277]"></a>correct_dcw</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = correct_dcw &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_dcw_vol_meal
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_dcw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
</UL>

<P><STRONG><a name="[279]"></a>correct_ir_out_v1</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[27a]"></a>dis_correct_ir_vol</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dis_correct_ir_vol &rArr; GUI_DispFloatFix &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
</UL>

<P><STRONG><a name="[27c]"></a>confirm_vol_segment_ss</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
</UL>

<P><STRONG><a name="[27b]"></a>start_correct_ir_res</STRONG> (Thumb, 934 bytes, Stack size 88 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = start_correct_ir_res &rArr; startup_cal &rArr; open_sine &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm_vol_segment_ss
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_correct_ir_vol
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_judge_err
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
</UL>

<P><STRONG><a name="[27d]"></a>correct_ir_measure</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = correct_ir_measure &rArr; start_correct_ir_res &rArr; startup_cal &rArr; open_sine &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_res
</UL>

<P><STRONG><a name="[12]"></a>serve_correct_ir_res</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = serve_correct_ir_res &rArr; correct_ir_measure &rArr; start_correct_ir_res &rArr; startup_cal &rArr; open_sine &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_ir
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[27e]"></a>get_acw_vol_cal_point_range</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_acw_vol_cal_point_range &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_vol_order
</UL>

<P><STRONG><a name="[27f]"></a>get_dcw_vol_cal_point_range</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_dcw_vol_cal_point_range &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_vol_order
</UL>

<P><STRONG><a name="[281]"></a>get_cal_ir_meal</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_vol_cal_point_range
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
</UL>

<P><STRONG><a name="[280]"></a>get_ir_vol_cal_point_range</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_ir_vol_cal_point_range &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_ir_meal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_vol_order
</UL>

<P><STRONG><a name="[282]"></a>correct_ir</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = correct_ir &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_ir_meal
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_res_meal
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_ir
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
</UL>

<P><STRONG><a name="[283]"></a>start_correct_gr_cur</STRONG> (Thumb, 3216 bytes, Stack size 232 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = start_correct_gr_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcBlockCRC
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_vol_gear
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_test_method
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_output_da
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_open_err
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_ad
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_cal_dc_module_addr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dc_gr_map_ratio_n
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_judge_err
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
</UL>

<P><STRONG><a name="[290]"></a>correct_gr_out_cur</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = correct_gr_out_cur &rArr; start_correct_gr_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_gr_out_cur
</UL>

<P><STRONG><a name="[13]"></a>serve_correct_gr_out_cur</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = serve_correct_gr_out_cur &rArr; correct_gr_out_cur &rArr; start_correct_gr_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_gr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[291]"></a>select_gr_cal_menu</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = select_gr_cal_menu &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_cal_point_info
</UL>

<P><STRONG><a name="[292]"></a>correct_gr</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = correct_gr &rArr; slelect_cal_dc_gr_module &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_gr_cal_menu
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_gr_out_cur
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_gr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
</UL>

<P><STRONG><a name="[294]"></a>start_correct_bbd_cur</STRONG> (Thumb, 1068 bytes, Stack size 176 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = start_correct_bbd_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm_vol_segment
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
</UL>

<P><STRONG><a name="[295]"></a>correct_bbd_cur_gear</STRONG> (Thumb, 754 bytes, Stack size 40 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = correct_bbd_cur_gear &rArr; start_correct_bbd_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_uA
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_cur
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_more_cur
</UL>

<P><STRONG><a name="[296]"></a>cal_bbd_more_more_cur</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = cal_bbd_more_more_cur &rArr; correct_bbd_cur_gear &rArr; start_correct_bbd_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_bbd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_cur
</UL>

<P><STRONG><a name="[297]"></a>cal_bbd_more_cur</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = cal_bbd_more_cur &rArr; cal_bbd_more_more_cur &rArr; correct_bbd_cur_gear &rArr; start_correct_bbd_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_more_cur
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_bbd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
</UL>

<P><STRONG><a name="[a]"></a>serve_correct_bbd_cur_mA</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = serve_correct_bbd_cur_mA &rArr; cal_bbd_more_cur &rArr; cal_bbd_more_more_cur &rArr; correct_bbd_cur_gear &rArr; start_correct_bbd_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_cur
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_bbd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>serve_correct_bbd_cur_uA</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = serve_correct_bbd_cur_uA &rArr; correct_bbd_cur_gear &rArr; start_correct_bbd_cur &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_bbd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration.o(.data)
</UL>
<P><STRONG><a name="[298]"></a>correct_bbd</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = correct_bbd &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_bbd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
</UL>

<P><STRONG><a name="[21e]"></a>correctness</STRONG> (Thumb, 594 bytes, Stack size 16 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084 + Unknown Stack Size
<LI>Call Chain = correctness &rArr; correct_gr &rArr; slelect_cal_dc_gr_module &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd24064_Clr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[29a]"></a>dis_test_status</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, cs99xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dis_test_status &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_offset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bbd
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_dis
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_discharge_over
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
</UL>

<P><STRONG><a name="[29b]"></a>dis_test_result_status</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, cs99xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dis_test_result_status &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
</UL>

<P><STRONG><a name="[29c]"></a>dis_test_vol1</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, cs99xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = dis_test_vol1 &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_str_pre_zero
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
</UL>

<P><STRONG><a name="[29e]"></a>dis_test_time</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, cs99xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = dis_test_time &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_str_pre_zero
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_time
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;into_output_delay
</UL>

<P><STRONG><a name="[29f]"></a>dis_test_data</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, cs99xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = dis_test_data &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_str_pre_zero
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_discharge_over
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
</UL>

<P><STRONG><a name="[2a0]"></a>updata_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cs99xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = updata_time &rArr; dis_test_time &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_time_string
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_test
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs99xx_big_cap_test
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs99xx_test
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs99xx_g_test
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
</UL>

<P><STRONG><a name="[2a2]"></a>test_dis</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, cs99xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = test_dis &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sample_task
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_result
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_dis
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_auto_find_gear
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_details
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_details
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
</UL>

<P><STRONG><a name="[2a8]"></a>offset_dis</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cs99xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = offset_dis &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_auto_select_gear
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_offset_step
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_bbd_step
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details_g
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details
</UL>

<P><STRONG><a name="[2aa]"></a>dis_test_ui</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, cs99xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = dis_test_ui &rArr; dis_port &rArr; draw_port &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_title_step
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_dis
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_port
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_time
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
</UL>

<P><STRONG><a name="[4c9]"></a>buzzer_flicker</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cs99xx_buzzer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_poll_task
</UL>

<P><STRONG><a name="[4c8]"></a>buzzer_delay_off</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cs99xx_buzzer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_poll_task
</UL>

<P><STRONG><a name="[2c6]"></a>smoothing_filtering</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, cs99xx_collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smoothing_filtering
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
</UL>

<P><STRONG><a name="[2c4]"></a>set_high_err</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cs99xx_collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_judge_err
</UL>

<P><STRONG><a name="[2b8]"></a>reset_high_err</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cs99xx_collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
</UL>

<P><STRONG><a name="[2b4]"></a>get_high_err</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs99xx_collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
</UL>

<P><STRONG><a name="[2ad]"></a>clear_slither_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cs99xx_collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_slither_data &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_ir_gear
</UL>

<P><STRONG><a name="[2ae]"></a>slither_f</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, cs99xx_collect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2bd]"></a>get_dc_gr_amp_err</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs99xx_collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
</UL>

<P><STRONG><a name="[2b0]"></a>judge_vol_exception</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, cs99xx_collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = judge_vol_exception &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_exception_scene
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_judge_err
</UL>

<P><STRONG><a name="[2b3]"></a>judge_err</STRONG> (Thumb, 1992 bytes, Stack size 48 bytes, cs99xx_collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = judge_err &rArr; judge_vol_exception &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sample_task
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_ir
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_gr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_dcw
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_bbd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_acw
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_exception_scene
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_upper
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_vol_exception
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_amp_err
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_err
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_high_err
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[2c1]"></a>count_dis_value</STRONG> (Thumb, 3140 bytes, Stack size 96 bytes, cs99xx_collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = count_dis_value &rArr; cpld_count_angle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_exception_scene
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_data
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_count_angle
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_high_err
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_err
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
</UL>

<P><STRONG><a name="[730]"></a>set_dc_gr_open_err</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cs99xx_collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_ad
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_data
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_short_data
</UL>

<P><STRONG><a name="[289]"></a>get_dc_gr_open_err</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs99xx_collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
</UL>

<P><STRONG><a name="[731]"></a>set_dc_gr_amp_err</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cs99xx_collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_ad
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_data
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_short_data
</UL>

<P><STRONG><a name="[20a]"></a>adc_sample</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, cs99xx_collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = adc_sample &rArr; count_dis_value &rArr; cpld_count_angle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoothing_filtering
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_task
</UL>

<P><STRONG><a name="[2c8]"></a>eep_buf_write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = eep_buf_write &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_eep
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_list_dis_eep
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag_to_eep
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_to_eep
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par_to_eep
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_step_table_eep
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_group_step_used_flag_eep
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag_eep
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_to_eep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table_eep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio_to_eep
</UL>

<P><STRONG><a name="[2ca]"></a>eep_buf_read</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = eep_buf_read &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_eep
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_page_eep
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result_eep
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag_eep
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_flag_to_eep
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_file_to_eep
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_to_eep
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_par_from_eep
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_to_eep
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table_eep
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_res_from_eep
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_eep
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_to_eep
</UL>

<P><STRONG><a name="[2cc]"></a>save_ratio_to_eep</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = save_ratio_to_eep &rArr; eep_buf_write &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcBlockCRC
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_eep
</UL>

<P><STRONG><a name="[2ce]"></a>read_ratio_to_eep</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>

<P><STRONG><a name="[2cf]"></a>read_ratio_from_eep</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = read_ratio_from_eep &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcBlockCRC
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ratio
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio_to_eep
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio
</UL>

<P><STRONG><a name="[2d1]"></a>save_group_table_eep</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = save_group_table_eep &rArr; eep_buf_write &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_eep
</UL>

<P><STRONG><a name="[2d2]"></a>read_one_res_from_eep</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cs99xx_eep_manage.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>

<P><STRONG><a name="[2d3]"></a>read_group_table_eep</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = read_group_table_eep &rArr; eep_buf_read &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
</UL>

<P><STRONG><a name="[2d5]"></a>save_one_step_to_eep</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = save_one_step_to_eep &rArr; count_eep_pos &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_eep_pos
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_eep
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode_eep
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list_to_eep
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_eep
</UL>

<P><STRONG><a name="[2d6]"></a>read_one_step_to_eep</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = read_one_step_to_eep &rArr; count_eep_pos &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_eep_pos
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_eep
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode_eep
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_eep
</UL>

<P><STRONG><a name="[2d7]"></a>save_file_to_eep</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = save_file_to_eep &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_file_to_eep
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_eep
</UL>

<P><STRONG><a name="[2d8]"></a>save_step_used_flag_eep</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = save_step_used_flag_eep &rArr; eep_buf_write &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_eep
</UL>

<P><STRONG><a name="[2d9]"></a>save_as_cur_group_eep</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = save_as_cur_group_eep &rArr; read_one_step_to_eep &rArr; count_eep_pos &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_file
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_exist
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag_eep
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_to_eep
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_to_eep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table_eep
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group
</UL>

<P><STRONG><a name="[2dc]"></a>init_group_step_used_flag_eep</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = init_group_step_used_flag_eep &rArr; eep_buf_write &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_step_used_flag
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_group_step_used_flag
</UL>

<P><STRONG><a name="[2de]"></a>init_file_step_table_eep</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = init_file_step_table_eep &rArr; eep_buf_write &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_group_table
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_step_table
</UL>

<P><STRONG><a name="[2e0]"></a>save_sys_par_to_eep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = save_sys_par_to_eep &rArr; eep_buf_write &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
</UL>

<P><STRONG><a name="[2e1]"></a>read_sys_par_from_eep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = read_sys_par_from_eep &rArr; eep_buf_read &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_par
</UL>

<P><STRONG><a name="[2e2]"></a>save_list_to_eep</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = save_list_to_eep &rArr; save_one_step_to_eep &rArr; count_eep_pos &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
</UL>

<P><STRONG><a name="[2e3]"></a>copy_cur_file_to_new_pos_eep</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = copy_cur_file_to_new_pos_eep &rArr; read_one_step_to_eep &rArr; count_eep_pos &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_exist
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetTime
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag_eep
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_to_eep
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_to_eep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table_eep
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos
</UL>

<P><STRONG><a name="[2e5]"></a>save_init_group_to_eep</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, cs99xx_eep_manage.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_file
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_eep_pos
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group
</UL>

<P><STRONG><a name="[2e6]"></a>get_first_step_mode_eep</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = get_first_step_mode_eep &rArr; read_one_step_to_eep &rArr; count_eep_pos &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_to_eep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode
</UL>

<P><STRONG><a name="[2e7]"></a>load_steps_to_list_eep</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = load_steps_to_list_eep &rArr; read_one_step_to_eep &rArr; count_eep_pos &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_99xx_list
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_node
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_to_eep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
</UL>

<P><STRONG><a name="[2e9]"></a>read_file_to_eep</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cs99xx_eep_manage.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file
</UL>

<P><STRONG><a name="[2ea]"></a>save_all_file_to_eep</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = save_all_file_to_eep &rArr; save_file_to_eep &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_file
</UL>

<P><STRONG><a name="[2eb]"></a>read_all_file_to_eep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = read_all_file_to_eep &rArr; eep_buf_read &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_file
</UL>

<P><STRONG><a name="[2ec]"></a>save_sys_flag_to_eep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = save_sys_flag_to_eep &rArr; eep_buf_write &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
</UL>

<P><STRONG><a name="[2ed]"></a>read_sys_flag_to_eep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = read_sys_flag_to_eep &rArr; eep_buf_read &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_flag
</UL>

<P><STRONG><a name="[2ee]"></a>read_step_used_flag_eep</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = read_step_used_flag_eep &rArr; eep_buf_read &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
</UL>

<P><STRONG><a name="[2ef]"></a>save_one_result_list_dis_eep</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = save_one_result_list_dis_eep &rArr; eep_buf_write &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_list_dis
</UL>

<P><STRONG><a name="[2f0]"></a>save_one_result_eep</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = save_one_result_eep &rArr; eep_buf_write &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result
</UL>

<P><STRONG><a name="[2f1]"></a>read_one_result_eep</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = read_one_result_eep &rArr; eep_buf_read &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_n_results
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result
</UL>

<P><STRONG><a name="[2f2]"></a>read_result_list_dis_one_page_eep</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = read_result_list_dis_one_page_eep &rArr; eep_buf_read &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_page
</UL>

<P><STRONG><a name="[2f3]"></a>read_result_list_dis_one_eep</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = read_result_list_dis_one_eep &rArr; eep_buf_read &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one
</UL>

<P><STRONG><a name="[2d0]"></a>updata_excep_info</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, cs99xx_err_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = updata_excep_info &rArr; write_one_page_bin &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_pages_flash
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_one_page_bin
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_table_flag
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_acw_par
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dcw_par
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ir_par
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bbd_par
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cc_par
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_list
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_flash
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_to_eep
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_eep
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode_eep
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_to_eep
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list_to_eep
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_eep
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_to_eep
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_to_eep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_eep
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_eep_pos
</UL>

<P><STRONG><a name="[2f5]"></a>clear_excep_info</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cs99xx_err_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clear_excep_info &rArr; erase_pages_flash &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_pages_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
</UL>

<P><STRONG><a name="[302]"></a>exception_handling</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, cs99xx_exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = exception_handling &rArr; fail_mode_fpdfc_dispose &rArr; fail_mode_con_dispose &rArr; fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover_exception_scene
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_cylinder_ctrl_stop
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_fpdfc_dispose
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_next_dispose
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_restart_dispose
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_con_dispose
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_halt_dispose
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_stop_dispose
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_str
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_result
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_time
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details_g
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[308]"></a>writebuffer_spi_flash</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_set_at45db161
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_buffer_write
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_list_dis_flash
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_flash
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par_flash
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag_flash
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_flash
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_group_step_used_flag_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_flash
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio_from_flash
</UL>

<P><STRONG><a name="[30b]"></a>readbuffer_spi_flash</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_set_at45db161
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_flash
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_page_flash
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result_flash
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_par_flash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_flag_flash
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_flash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table_flash
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_flash
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_flash
</UL>

<P><STRONG><a name="[30d]"></a>save_ratio_from_flash</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = save_ratio_from_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_flash
</UL>

<P><STRONG><a name="[30e]"></a>read_ratio_from_flash</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = read_ratio_from_flash &rArr; save_ratio_from_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcBlockCRC
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ratio
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio_from_flash
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio
</UL>

<P><STRONG><a name="[30f]"></a>save_one_step_flash</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode_flash
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_flash
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_flash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list_flash
</UL>

<P><STRONG><a name="[310]"></a>save_list_flash</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = save_list_flash &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
</UL>

<P><STRONG><a name="[311]"></a>read_one_step_flash</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = read_one_step_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_flash
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_flash
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_flash
</UL>

<P><STRONG><a name="[312]"></a>save_step_used_flag_flash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = save_step_used_flag_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_flash
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_flash
</UL>

<P><STRONG><a name="[313]"></a>save_group_table_flash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = save_group_table_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_flash
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_step_table_flash
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_flash
</UL>

<P><STRONG><a name="[314]"></a>copy_cur_file_to_new_pos_flash</STRONG> (Thumb, 160 bytes, Stack size 88 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = copy_cur_file_to_new_pos_flash &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_flash
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_exist
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos
</UL>

<P><STRONG><a name="[316]"></a>init_group_step_used_flag_flash</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = init_group_step_used_flag_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_group_step_used_flag
</UL>

<P><STRONG><a name="[318]"></a>read_step_used_flag_flash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = read_step_used_flag_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_flash
</UL>

<P><STRONG><a name="[319]"></a>read_group_table_flash</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = read_group_table_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_flash
</UL>

<P><STRONG><a name="[31a]"></a>init_file_step_table_flash</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = init_file_step_table_flash &rArr; save_group_table_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table_flash
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_group_table
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_step_table
</UL>

<P><STRONG><a name="[31c]"></a>save_file_flash</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = save_file_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_file_flash
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_flash
</UL>

<P><STRONG><a name="[31d]"></a>save_as_cur_group_flash</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = save_as_cur_group_flash &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_flash
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_file
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_exist
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group
</UL>

<P><STRONG><a name="[31e]"></a>save_init_group_flash</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, cs99xx_flash_manage.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_flash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table_flash
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_flash
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_file
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_step_used_flag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_group_table
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group
</UL>

<P><STRONG><a name="[31f]"></a>save_all_file_flash</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = save_all_file_flash &rArr; save_file_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_file
</UL>

<P><STRONG><a name="[320]"></a>read_file_flash</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = read_file_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_file_flash
</UL>

<P><STRONG><a name="[321]"></a>read_all_file_flash</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_all_file_flash &rArr; read_file_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_file
</UL>

<P><STRONG><a name="[322]"></a>save_sys_flag_flash</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = save_sys_flag_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
</UL>

<P><STRONG><a name="[323]"></a>read_sys_flag_flash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = read_sys_flag_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_flag
</UL>

<P><STRONG><a name="[324]"></a>save_sys_par_flash</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
</UL>

<P><STRONG><a name="[325]"></a>read_sys_par_flash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = read_sys_par_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_par
</UL>

<P><STRONG><a name="[326]"></a>get_first_step_mode_flash</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = get_first_step_mode_flash &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode
</UL>

<P><STRONG><a name="[327]"></a>load_steps_to_list_flash</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_99xx_list
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_flash
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_node
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
</UL>

<P><STRONG><a name="[329]"></a>save_one_result_flash</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = save_one_result_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result
</UL>

<P><STRONG><a name="[32a]"></a>save_one_result_list_dis_flash</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = save_one_result_list_dis_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_list_dis
</UL>

<P><STRONG><a name="[32b]"></a>read_one_result_flash</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_one_result_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_n_results
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result
</UL>

<P><STRONG><a name="[32c]"></a>read_result_list_dis_one_page_flash</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_result_list_dis_one_page_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_page
</UL>

<P><STRONG><a name="[32d]"></a>read_result_list_dis_one_flash</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cs99xx_flash_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_result_list_dis_one_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one
</UL>

<P><STRONG><a name="[1a]"></a>sys_interface</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, cs99xx_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = sys_interface &rArr; gui_draw_communication_interface &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_interface_config
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_interface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_parameter.o(.data)
</UL>
<P><STRONG><a name="[335]"></a>init_set_ir_gear</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, cs99xx_ir_shift_gear.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_set_ir_gear &rArr; ir_set_gear &rArr; ir_set_gear_s &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_set_gear
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_motion
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_gear
</UL>

<P><STRONG><a name="[337]"></a>switch_ir_gear</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cs99xx_ir_shift_gear.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = switch_ir_gear &rArr; clear_slither_data &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_slither_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_auto_find_gear
</UL>

<P><STRONG><a name="[2a3]"></a>ir_auto_find_gear</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, cs99xx_ir_shift_gear.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ir_auto_find_gear &rArr; ir_set_gear &rArr; ir_set_gear_s &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_set_gear
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_ir_gear
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
</UL>

<P><STRONG><a name="[338]"></a>init_exit</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, cs99xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_exit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_DeInit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[212]"></a>exit_off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs99xx_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_sw
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>

<P><STRONG><a name="[2fe]"></a>exit_sw</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, cs99xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = exit_sw &rArr; ADC_WatchdogOFF &rArr; ADC_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_off
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WatchdogON
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WatchdogOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_con_dispose
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
</UL>

<P><STRONG><a name="[40a]"></a>exit_off_all</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs99xx_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
</UL>

<P><STRONG><a name="[498]"></a>disable_stop_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs99xx_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[499]"></a>enable_stop_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs99xx_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[487]"></a>led_cmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cs99xx_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
</UL>

<P><STRONG><a name="[1e]"></a>sys_lockkeyboard</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, cs99xx_lock_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = sys_lockkeyboard &rArr; gui_draw_keyboard_lock_manage &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_keyboard_lock_manage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cs99xx_parameter.o(.text)
<LI> cs99xx_parameter.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>sys_recover</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, cs99xx_lock_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = sys_recover &rArr; init_par &rArr; insert_step &rArr; save_one_step &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_recover
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_parameter.o(.data)
</UL>
<P><STRONG><a name="[90d]"></a>get_used_res_num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cs99xx_mem_api.o(.text), UNUSED)

<P><STRONG><a name="[90e]"></a>get_pass_res_num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cs99xx_mem_api.o(.text), UNUSED)

<P><STRONG><a name="[90f]"></a>get_res_string_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs99xx_mem_api.o(.text), UNUSED)

<P><STRONG><a name="[682]"></a>get_step_used_flag_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_par_len_usb_dispose
</UL>

<P><STRONG><a name="[683]"></a>get_group_table_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_par_len_usb_dispose
</UL>

<P><STRONG><a name="[344]"></a>save_as_cur_group</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = save_as_cur_group &rArr; save_as_cur_group_flash &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_flash
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_save_file_for_comm
</UL>

<P><STRONG><a name="[345]"></a>save_group_table</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = save_group_table &rArr; save_group_table_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table_flash
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_step
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_group_table_base_dispose
</UL>

<P><STRONG><a name="[347]"></a>get_cc_cur_intensity_upper</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cc_par
</UL>

<P><STRONG><a name="[2b6]"></a>get_cur_upper</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_acw_par
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dcw_par
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cc_par
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
</UL>

<P><STRONG><a name="[346]"></a>check_cc_par</STRONG> (Thumb, 504 bytes, Stack size 80 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = check_cc_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_hz_kinds
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cc_cur_intensity_upper
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_upper
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_save_step_data
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[349]"></a>check_bbd_par</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = check_bbd_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_save_step_data
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[34a]"></a>check_gr_par</STRONG> (Thumb, 704 bytes, Stack size 144 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_hz_kinds
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_vol_kinds
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_save_step_data
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[34d]"></a>check_ir_par</STRONG> (Thumb, 576 bytes, Stack size 24 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = check_ir_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_save_step_data
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[34e]"></a>check_dcw_par</STRONG> (Thumb, 702 bytes, Stack size 80 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = check_dcw_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_upper
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_save_step_data
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[34f]"></a>check_acw_par</STRONG> (Thumb, 794 bytes, Stack size 80 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = check_acw_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_hz_kinds
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_upper
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_save_step_data
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[350]"></a>check_save_step_data</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = check_save_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_mode
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_acw_par
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dcw_par
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ir_par
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bbd_par
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cc_par
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
</UL>

<P><STRONG><a name="[351]"></a>save_cur_step</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = save_cur_step &rArr; check_save_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_save_step_data
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_flash
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_for_comm
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ir_auto_for_comm
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_port_for_comm
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_for_comm
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steps_cont_for_comm
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pass_signal_for_comm
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hz_for_comm
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_arc_for_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_charge_cur_for_comm
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_real_cur_for_comm
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_value_for_comm
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_for_comm
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gear_for_comm
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vol_for_comm
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bbd_short_check_for_comm
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bbd_open_check_for_comm
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
</UL>

<P><STRONG><a name="[352]"></a>save_init_group</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_flash
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_to_eep
</UL>

<P><STRONG><a name="[353]"></a>save_list</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = save_list &rArr; save_list_flash &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list_flash
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_for_comm
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_two_step_for_comm
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retreat_cur_step_for_comm
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_cur_step_for_comm
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_cur_step_for_comm
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
</UL>

<P><STRONG><a name="[354]"></a>copy_cur_file_to_new_pos</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = copy_cur_file_to_new_pos &rArr; copy_cur_file_to_new_pos_flash &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_flash
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
</UL>

<P><STRONG><a name="[355]"></a>save_one_result_list_dis</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = save_one_result_list_dis &rArr; save_one_result_list_dis_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_list_dis_flash
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_list_dis_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
</UL>

<P><STRONG><a name="[356]"></a>save_one_result</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = save_one_result &rArr; save_one_result_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_flash
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
</UL>

<P><STRONG><a name="[357]"></a>read_result_list_dis_one_page</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = read_result_list_dis_one_page &rArr; read_result_list_dis_one_page_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_page_flash
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_page_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
</UL>

<P><STRONG><a name="[358]"></a>read_result_list_dis_one</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = read_result_list_dis_one &rArr; read_result_list_dis_one_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_flash
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_result_fetch_for_comm
</UL>

<P><STRONG><a name="[359]"></a>read_one_result</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = read_one_result &rArr; read_one_result_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result_flash
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_usb_dispose
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_fetch_for_comm
</UL>

<P><STRONG><a name="[35a]"></a>read_n_results</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = read_n_results &rArr; read_one_result_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result_flash
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
</UL>

<P><STRONG><a name="[218]"></a>save_sys_par</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_sys_language_par
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par_flash
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_date
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sys_par
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_lockkeyboard
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_set
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sys
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_par_usb_dispose
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pass_word_dispose
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_sys_par_for_comm
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dut_name_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_all_res_for_comm
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_module
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
</UL>

<P><STRONG><a name="[35c]"></a>check_sys_par</STRONG> (Thumb, 660 bytes, Stack size 48 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_fail_mode_kinds
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>

<P><STRONG><a name="[35e]"></a>save_one_step</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = save_one_step &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_flash
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_group_steps_for_comm
</UL>

<P><STRONG><a name="[328]"></a>check_test_step_data</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_mode
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_step
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_step
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_step
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_step
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bbd_step
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_step
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_acw_par
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dcw_par
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ir_par
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bbd_par
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cc_par
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_list
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_flash
</UL>

<P><STRONG><a name="[365]"></a>load_steps_to_list</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_flash
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_step
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_and_updata_old_file
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_updata_new_file
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_list
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_appoint_step_for_comm
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_two_step_for_comm
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retreat_cur_step_for_comm
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_cur_step_for_comm
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_cur_step_for_comm
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
</UL>

<P><STRONG><a name="[332]"></a>read_list</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = read_list &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_appoint_file_for_comm
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file_for_comm
</UL>

<P><STRONG><a name="[366]"></a>read_ratio</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = read_ratio &rArr; read_ratio_from_flash &rArr; save_ratio_from_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_flash
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[367]"></a>save_step_used_flag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = save_step_used_flag &rArr; save_step_used_flag_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag_flash
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_step_used_flag_base_dispose
</UL>

<P><STRONG><a name="[315]"></a>save_file</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = save_file &rArr; save_file_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_flash
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_and_updata_old_file
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_flash
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_file_list_usb_dispose
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_edit_file_for_comm
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_save_file_for_comm
</UL>

<P><STRONG><a name="[368]"></a>save_group_info</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = save_group_info &rArr; save_step_used_flag &rArr; save_step_used_flag_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_and_updata_old_file
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_updata_new_file
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_two_step_for_comm
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retreat_cur_step_for_comm
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_cur_step_for_comm
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_cur_step_for_comm
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_group
</UL>

<P><STRONG><a name="[369]"></a>read_all_file</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = read_all_file &rArr; read_all_file_flash &rArr; read_file_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_file_flash
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_file_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
</UL>

<P><STRONG><a name="[331]"></a>read_group_table</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_group_table &rArr; read_group_table_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table_flash
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_table_flag
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_group_base_usb_dispose
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_group_table_base_dispose
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_group_steps_for_comm
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_appoint_file_for_comm
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_group
</UL>

<P><STRONG><a name="[21c]"></a>save_sys_flag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = save_sys_flag &rArr; save_sys_flag_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag_flash
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_updata_new_file
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_flag_usb_dispose
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_flag_for_comm
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_appoint_file_for_comm
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file_for_comm
</UL>

<P><STRONG><a name="[36a]"></a>init_file_step_table</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = init_file_step_table &rArr; init_file_step_table_flash &rArr; save_group_table_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_step_table_flash
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_step_table_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
</UL>

<P><STRONG><a name="[36b]"></a>init_group_step_used_flag</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = init_group_step_used_flag &rArr; init_group_step_used_flag_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_group_step_used_flag_flash
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_group_step_used_flag_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
</UL>

<P><STRONG><a name="[36c]"></a>save_all_file</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = save_all_file &rArr; save_all_file_flash &rArr; save_file_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_file_flash
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_file_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
</UL>

<P><STRONG><a name="[343]"></a>init_par</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = init_par &rArr; insert_step &rArr; save_one_step &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_table
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_par
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_flag
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_default_file
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_file
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_group_step_used_flag
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_step_table
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_file
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_recover
</UL>

<P><STRONG><a name="[330]"></a>read_step_used_flag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_step_used_flag &rArr; read_step_used_flag_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag_flash
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_table_flag
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_group_base_usb_dispose
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_step_used_flag_base_dispose
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_group_steps_for_comm
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_appoint_file_for_comm
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_group
</UL>

<P><STRONG><a name="[371]"></a>check_table_flag</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = check_table_flag &rArr; read_step_used_flag &rArr; read_step_used_flag_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[379]"></a>check_dc_gr_data_valid</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[373]"></a>read_sys_par</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_sys_par &rArr; read_sys_par_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_par_flash
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_par_from_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[374]"></a>read_sys_flag</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_sys_flag &rArr; read_sys_flag_flash &rArr; readbuffer_spi_flash &rArr; at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_flag_flash
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_flag_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[214]"></a>read_paramenter</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = read_paramenter &rArr; auto_scan_modules &rArr; auto_scan_module &rArr; gui_draw_dc_gr_module_being_in_comm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_pin
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_mode
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_count
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_to_board
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_fail
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dc_gr_moduls
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_warning
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_modules
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_flag
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_par
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dc_gr_data_valid
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_table_flag
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_file
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sys_par
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_list
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[37f]"></a>read_file</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_flash
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_to_eep
</UL>

<P><STRONG><a name="[243]"></a>save_ratio</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = save_ratio &rArr; save_ratio_from_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio_from_flash
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_save_ratio
</UL>

<P><STRONG><a name="[380]"></a>get_first_step_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = get_first_step_mode &rArr; get_first_step_mode_flash &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode_flash
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
</UL>

<P><STRONG><a name="[2dd]"></a>clear_step_used_flag</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_step_used_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_and_updata_old_file
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_updata_new_file
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_flash
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_group_step_used_flag_eep
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_group
</UL>

<P><STRONG><a name="[2df]"></a>clear_group_table</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = clear_group_table
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_and_updata_old_file
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_updata_new_file
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_flash
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_step_table_flash
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_step_table_eep
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_group
</UL>

<P><STRONG><a name="[381]"></a>read_one_step</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cs99xx_mem_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = read_one_step &rArr; read_one_step_to_eep &rArr; count_eep_pos &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_flash
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_to_eep
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_group_base_usb_dispose
</UL>

<P><STRONG><a name="[2db]"></a>check_file_exist</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cs99xx_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_flash
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_flash
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_file
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_eep
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_delete_file_dispose
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_appoint_file_for_comm
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_appoint_file_msg_for_comm
</UL>

<P><STRONG><a name="[2da]"></a>pos_file</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pos_file
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_exist
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_flash
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_to_eep
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_eep
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_group_steps_for_comm
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_appoint_file_for_comm
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_group
</UL>

<P><STRONG><a name="[1db]"></a>serve_charkey</STRONG> (Thumb, 1680 bytes, Stack size 24 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = serve_charkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
</UL>

<P><STRONG><a name="[18]"></a>sys_memory</STRONG> (Thumb, 672 bytes, Stack size 96 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = sys_memory &rArr; server_mem_shortcut_exist &rArr; server_more_file &rArr; authenticate_pw &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_file_management
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Refresh_Rect
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_page_files
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roll_txt
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_parameter.o(.data)
</UL>
<P><STRONG><a name="[39d]"></a>dis_offset_test_ports</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, cs99xx_offset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dis_offset_test_ports &rArr; GUI_DispCharAt &rArr; GL_DispChar &rArr; GUI_DispNextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
</UL>

<P><STRONG><a name="[1c]"></a>sys_offset</STRONG> (Thumb, 1398 bytes, Stack size 48 bytes, cs99xx_offset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = sys_offset &rArr; offset_test &rArr; offset_details_g &rArr; exception_handling &rArr; fail_mode_fpdfc_dispose &rArr; fail_mode_con_dispose &rArr; fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_test
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_test_ui_info
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_offset
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_offset_one_page
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_offset_step
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_offset_shortcut
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_more
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_parameter.o(.data)
</UL>
<P><STRONG><a name="[3a7]"></a>updata_ac_cur_gear_affect_par_info</STRONG> (Thumb, 876 bytes, Stack size 8 bytes, cs99xx_par_acw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = updata_ac_cur_gear_affect_par_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_par_list
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_par_list
</UL>

<P><STRONG><a name="[2a]"></a>set_ac_cur_gear</STRONG> (Thumb, 892 bytes, Stack size 96 bytes, cs99xx_par_acw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = set_ac_cur_gear &rArr; ac_cur_sel_gui &rArr; more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_cur_sel_gui
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_ac_cur_gear_affect_par_info
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[3ae]"></a>set_contrast</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cs99xx_par_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata_RA
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD_RA
</UL>

<P><STRONG><a name="[1ce]"></a>define_modes</STRONG> (Thumb, 264 bytes, Stack size 12 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = define_modes
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_mode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_and_updata_old_file
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_updata_new_file
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_for_comm
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_group
</UL>

<P><STRONG><a name="[3bf]"></a>define_g_modes</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = define_g_modes
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
</UL>

<P><STRONG><a name="[3b2]"></a>init_offset_par</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
</UL>

<P><STRONG><a name="[3b1]"></a>init_mode</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = init_mode &rArr; init_dcw_step &rArr; define_cur_kinds
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offset_par
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_step
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_step
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_step
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_step
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bbd_step
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_step
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_mode
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_for_comm
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
</UL>

<P><STRONG><a name="[2ac]"></a>updata_title_step</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = updata_title_step &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_total
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTitle
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_step
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
</UL>

<P><STRONG><a name="[3b5]"></a>updata_step</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = updata_step &rArr; updata_title_step &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_title_step
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
</UL>

<P><STRONG><a name="[245]"></a>serve_numkey</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_par
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_options_par
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
</UL>

<P><STRONG><a name="[3da]"></a>find_menu</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sys
</UL>

<P><STRONG><a name="[3ac]"></a>server_combination_key</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_par
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_options_par
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
</UL>

<P><STRONG><a name="[22]"></a>set_step</STRONG> (Thumb, 1632 bytes, Stack size 80 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = set_step &rArr; serve_shortcut &rArr; serve_more &rArr; serve_swap &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_step
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cursor
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTitle
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_step
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>set_mode</STRONG> (Thumb, 738 bytes, Stack size 80 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = set_mode &rArr; mode_sel_gui &rArr; more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_sel_gui
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_g_mode_inval
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_steps
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_step
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_g_modes
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_mode
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>set_voltage</STRONG> (Thumb, 876 bytes, Stack size 64 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = set_voltage &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offset_par
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>set_all_ports</STRONG> (Thumb, 878 bytes, Stack size 40 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = set_all_ports &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_cursor_pos
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_port_for_set
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_draw.o(.data)
<LI> cs99xx_set_par_path.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>set_test_time</STRONG> (Thumb, 698 bytes, Stack size 32 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = set_test_time &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_g_mode_inval
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>set_either_or_par</STRONG> (Thumb, 674 bytes, Stack size 32 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = set_either_or_par &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_g_mode_inval
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>set_float_par</STRONG> (Thumb, 1102 bytes, Stack size 72 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = set_float_par &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sprintf
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_par_inval
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_draw.o(.data)
<LI> cs99xx_set_par_path.o(.text)
</UL>
<P><STRONG><a name="[3c8]"></a>set_float_par_for_syn</STRONG> (Thumb, 750 bytes, Stack size 64 bytes, cs99xx_par_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_set_sys_cur_limit
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[26]"></a>set_frequency</STRONG> (Thumb, 620 bytes, Stack size 88 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = set_frequency &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_hz_kinds
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_gr_hz_sel_gui
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_draw.o(.data)
<LI> cs99xx_set_par_path.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>set_option_par</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = set_option_par &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_more_options_gui
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[3cc]"></a>updata_dc_cur_gear_affect_par_info</STRONG> (Thumb, 528 bytes, Stack size 0 bytes, cs99xx_par_dcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_par_list
</UL>

<P><STRONG><a name="[2b]"></a>set_dcw_cur_gear</STRONG> (Thumb, 884 bytes, Stack size 88 bytes, cs99xx_par_dcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = set_dcw_cur_gear &rArr; dcw_cur_sel_gui &rArr; more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_sel_gui
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_dc_cur_gear_affect_par_info
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[3ce]"></a>dir_gr_range_str</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, cs99xx_par_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dir_gr_range_str &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
</UL>

<P><STRONG><a name="[2d]"></a>set_gr_output_cur</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, cs99xx_par_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = set_gr_output_cur &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cursor_pos
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gr_cur_no_dis_bits
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offset_par
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>set_gr_res_upper</STRONG> (Thumb, 736 bytes, Stack size 104 bytes, cs99xx_par_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = set_gr_res_upper &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>set_gr_res_lower</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, cs99xx_par_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = set_gr_res_lower &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>set_gr_vol_upper</STRONG> (Thumb, 816 bytes, Stack size 56 bytes, cs99xx_par_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = set_gr_vol_upper &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>set_gr_vol_lower</STRONG> (Thumb, 722 bytes, Stack size 64 bytes, cs99xx_par_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = set_gr_vol_lower &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[910]"></a>updata_gr_cur_affect_par_info</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cs99xx_par_gr.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>updata_gr_vol_gear_affect_par_info</STRONG> (Thumb, 710 bytes, Stack size 0 bytes, cs99xx_par_gr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_par_list
</UL>

<P><STRONG><a name="[2c]"></a>set_gr_vol_gear</STRONG> (Thumb, 888 bytes, Stack size 72 bytes, cs99xx_par_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = set_gr_vol_gear &rArr; gr_vol_sel_gui &rArr; more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_vol_kinds
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_vol_sel_gui
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_gr_vol_gear_affect_par_info
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>set_gr_test_method</STRONG> (Thumb, 976 bytes, Stack size 24 bytes, cs99xx_par_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = set_gr_test_method &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[3d7]"></a>init_gr_info</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info
</UL>

<P><STRONG><a name="[3d4]"></a>init_acw_info</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info
</UL>

<P><STRONG><a name="[3d5]"></a>init_dcw_info</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info
</UL>

<P><STRONG><a name="[3d6]"></a>init_ir_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info
</UL>

<P><STRONG><a name="[3d3]"></a>init_com_info</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info
</UL>

<P><STRONG><a name="[3a2]"></a>init_test_ui_info</STRONG> (Thumb, 362 bytes, Stack size 0 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_draw_test_ui
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>

<P><STRONG><a name="[213]"></a>init_par_info</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_par_info
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_test_ui_info
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_com_info
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_info
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_info
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_info
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[3d8]"></a>update_affect_par_info</STRONG> (Thumb, 1132 bytes, Stack size 96 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = update_affect_par_info &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par_to_buf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
</UL>

<P><STRONG><a name="[1fa]"></a>set_subtask</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = set_subtask &rArr; authenticate_pw &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_menu
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
</UL>

<P><STRONG><a name="[1fc]"></a>menu_subtask</STRONG> (Thumb, 870 bytes, Stack size 32 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = menu_subtask &rArr; authenticate_pw &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
</UL>

<P><STRONG><a name="[1f7]"></a>test_subtask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = test_subtask &rArr; serve_test &rArr; testing_gui_control &rArr; serve_test_shortcut &rArr; sys_memory &rArr; server_mem_shortcut_exist &rArr; server_more_file &rArr; authenticate_pw &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
</UL>

<P><STRONG><a name="[3dd]"></a>set_custom_par_info</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = set_custom_par_info &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_custom_par
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_amp_type
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
</UL>

<P><STRONG><a name="[3df]"></a>dis_soft_version</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = dis_soft_version &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
</UL>

<P><STRONG><a name="[1fb]"></a>help_subtask</STRONG> (Thumb, 550 bytes, Stack size 16 bytes, cs99xx_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = help_subtask &rArr; set_custom_type_info &rArr; serve_charkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_pin
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_3
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_2
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_1
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_str
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_interface_info
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_soft_version
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_par_info
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
</UL>

<P><STRONG><a name="[1f8]"></a>plc_signal_cmd</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, cs99xx_plc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = plc_signal_cmd &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_delay_off
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>

<P><STRONG><a name="[3e5]"></a>plc_delay_off</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cs99xx_plc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = plc_delay_off &rArr; plc_signal_cmd &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_poll_task
</UL>

<P><STRONG><a name="[3e6]"></a>cancel_plc_test_signal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cs99xx_plc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
</UL>

<P><STRONG><a name="[21d]"></a>authenticate_pw</STRONG> (Thumb, 974 bytes, Stack size 160 bytes, cs99xx_pw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = authenticate_pw &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor_l
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_pwkey
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_subtask
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
</UL>

<P><STRONG><a name="[1b]"></a>sys_password</STRONG> (Thumb, 1514 bytes, Stack size 392 bytes, cs99xx_pw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = sys_password &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd24064_Clr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor_l
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_password_manage
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_pw
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_pwkey
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_parameter.o(.data)
</UL>
<P><STRONG><a name="[3eb]"></a>test_pass</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = test_pass &rArr; plc_signal_cmd &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_irq
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_details
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
</UL>

<P><STRONG><a name="[307]"></a>test_fail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = test_fail &rArr; plc_signal_cmd &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_off
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
</UL>

<P><STRONG><a name="[235]"></a>relay_ready</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = relay_ready &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch_hv
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[3ed]"></a>on_dc_gr_control_relay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_dc_gr_control_relay &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
</UL>

<P><STRONG><a name="[236]"></a>open_sine</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = open_sine &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_write
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[233]"></a>amp_relay_ctrl_on</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = amp_relay_ctrl_on &rArr; amp_relay_ctrl_on_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on_old
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on_8833
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[3f1]"></a>mc14094_set_gear</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD_BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_acw_cur_gear
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_set_gear_s
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cur_gear
</UL>

<P><STRONG><a name="[3f3]"></a>shift_cur_gear</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shift_cur_gear &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc14094_set_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_motion
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_auto_select_gear
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_gear
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_load_gear
</UL>

<P><STRONG><a name="[3f4]"></a>no_dcw_big_cap_stop_charge</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = no_dcw_big_cap_stop_charge &rArr; hv_cpld_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cpld_hv_port
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_motion
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
</UL>

<P><STRONG><a name="[3f7]"></a>dcw_big_cap_start_charge</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dcw_big_cap_start_charge &rArr; hv_cpld_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cpld_hv_port
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_motion
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
</UL>

<P><STRONG><a name="[231]"></a>relay_motion</STRONG> (Thumb, 682 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = relay_motion &rArr; init_set_ir_gear &rArr; ir_set_gear &rArr; ir_set_gear_s &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_delay_us
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_set_ir_gear
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_start_charge
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_dcw_big_cap_stop_charge
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cur_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[3fd]"></a>updata_port</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = updata_port &rArr; serve_port_4094 &rArr; serve_port_16_4094 &rArr; MC14094_CMD_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata_Port
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_port_cpld
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_port_4094
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[3ff]"></a>test_ready</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = test_ready &rArr; test_vref &rArr; dcw_10kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ready
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_motion
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mdbus_send_queue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_schedule_task
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_count
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_test_timer
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_dc_gr_send_task_idle
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hv
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_comm_fail
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dc_gr_st
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ask_dc_gr_start_ok
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_port
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_details
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details_g
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_details
</UL>

<P><STRONG><a name="[408]"></a>amp_relay_ctrl_off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off_old
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off_8833
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_irq
</UL>

<P><STRONG><a name="[409]"></a>close_sine</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = close_sine &rArr; cpld_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_write
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
</UL>

<P><STRONG><a name="[193]"></a>irq_stop_relay_motion</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_off_all
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_switch_hv
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_hv
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_sine
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_irq
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_irq
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfi_irq
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_irq
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_irq
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_vol_exception
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_test_details
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_details
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_irq
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_over
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_execute_dis_charge
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[40d]"></a>ir_set_gear_s</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ir_set_gear_s &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc14094_set_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_set_gear
</UL>

<P><STRONG><a name="[336]"></a>ir_set_gear</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ir_set_gear &rArr; ir_set_gear_s &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_set_gear_s
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_set_ir_gear
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_auto_find_gear
</UL>

<P><STRONG><a name="[2a9]"></a>bbd_auto_select_gear</STRONG> (Thumb, 646 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bbd_auto_select_gear &rArr; shift_cur_gear &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cur_gear
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis
</UL>

<P><STRONG><a name="[40e]"></a>bbd_load_gear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bbd_load_gear &rArr; shift_cur_gear &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cur_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>

<P><STRONG><a name="[40f]"></a>shift_gear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shift_gear &rArr; init_set_ir_gear &rArr; ir_set_gear &rArr; ir_set_gear_s &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_set_ir_gear
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cur_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
</UL>

<P><STRONG><a name="[303]"></a>exit_test_relay_motion</STRONG> (Thumb, 666 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = exit_test_relay_motion &rArr; init_set_ir_gear &rArr; ir_set_gear &rArr; ir_set_gear_s &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_delay_us
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_set_ir_gear
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_start_charge
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_dcw_big_cap_stop_charge
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cur_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_details
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
</UL>

<P><STRONG><a name="[410]"></a>reset_ports</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_posrts_mc14094_ctrl
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_posrts_cpld_ctrl
</UL>

<P><STRONG><a name="[412]"></a>dcw_big_cap_stop_charge</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cpld_hv_port
</UL>

<P><STRONG><a name="[413]"></a>dcw_big_cap_stop_dis_charge</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dcw_big_cap_stop_dis_charge &rArr; hv_cpld_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cpld_hv_port
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
</UL>

<P><STRONG><a name="[237]"></a>dcw_big_cap_cal</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dcw_big_cap_cal &rArr; hv_cpld_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cpld_hv_port
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
</UL>

<P><STRONG><a name="[414]"></a>dcw_big_cap_keep_dis_charge</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dcw_big_cap_keep_dis_charge &rArr; hv_cpld_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cpld_hv_port
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
</UL>

<P><STRONG><a name="[415]"></a>dcw_big_cap_execute_dis_charge</STRONG> (Thumb, 636 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = dcw_big_cap_execute_dis_charge &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cpld_hv_port
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
</UL>

<P><STRONG><a name="[416]"></a>dcw_big_cap_output_Impedan_sel</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dcw_big_cap_output_Impedan_sel &rArr; hv_cpld_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hv_cpld_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cpld_hv_port
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_draw_test_ui
</UL>

<P><STRONG><a name="[3a4]"></a>de_reset</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = de_reset &rArr; plc_signal_cmd &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_sine
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>

<P><STRONG><a name="[417]"></a>test_reset</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = test_reset &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_keep_dis_charge
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_sine
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_port
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_discharge_over
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>

<P><STRONG><a name="[418]"></a>set_sine_hz</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, cs99xx_relay_motion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_write
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[421]"></a>get_ir_res_uint</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cs99xx_result.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
</UL>

<P><STRONG><a name="[419]"></a>transfer_ir_res_loop_to_string</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = transfer_ir_res_loop_to_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
</UL>

<P><STRONG><a name="[41b]"></a>transfer_ir_res_out_range_loop_to_string</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = transfer_ir_res_out_range_loop_to_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ten_power
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
</UL>

<P><STRONG><a name="[41d]"></a>ch_out_result_to_string</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ch_out_result_to_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_vol
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string
</UL>

<P><STRONG><a name="[41e]"></a>add_other_option</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = add_other_option &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
</UL>

<P><STRONG><a name="[41f]"></a>ch_out_result_to_string_comm</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ch_out_result_to_string_comm &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
</UL>

<P><STRONG><a name="[420]"></a>ch_loop_result_to_string</STRONG> (Thumb, 926 bytes, Stack size 64 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_str_pre_zero
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ten_power
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrcat
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;front_add_space_at_string
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_ir_res_out_range_loop_to_string
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_ir_res_loop_to_string
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_res_uint
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_cur
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string
</UL>

<P><STRONG><a name="[424]"></a>ch_loop_result_to_string_comm</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ch_loop_result_to_string_comm &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ten_power
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrcat
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_ir_res_out_range_loop_to_string
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
</UL>

<P><STRONG><a name="[425]"></a>ch_real_result_to_string_comm</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ch_real_result_to_string_comm &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ten_power
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
</UL>

<P><STRONG><a name="[426]"></a>ch_open_ratio_to_string_comm</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ch_open_ratio_to_string_comm &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
</UL>

<P><STRONG><a name="[427]"></a>ch_short_ratio_to_string_comm</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ch_short_ratio_to_string_comm &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
</UL>

<P><STRONG><a name="[428]"></a>ch_range_result_to_string</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ch_range_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string
</UL>

<P><STRONG><a name="[429]"></a>ch_range_result_to_string_comm</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ch_range_result_to_string_comm &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
</UL>

<P><STRONG><a name="[42a]"></a>change_result_to_string</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = change_result_to_string &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_string
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_range_result_to_string
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_out_result_to_string
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_usb_dispose
</UL>

<P><STRONG><a name="[42c]"></a>change_result_to_string_comm</STRONG> (Thumb, 640 bytes, Stack size 40 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = change_result_to_string_comm &rArr; transform_time_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_string
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_range_result_to_string_comm
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_short_ratio_to_string_comm
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_open_ratio_to_string_comm
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_out_result_to_string_comm
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_other_option
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_fetch_for_comm
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_result_fetch_for_comm
</UL>

<P><STRONG><a name="[42e]"></a>res_dis_vol</STRONG> (Thumb, 34 bytes, Stack size 144 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = res_dis_vol &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_out_result_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis_one_res
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_res
</UL>

<P><STRONG><a name="[42f]"></a>res_dis_cur</STRONG> (Thumb, 110 bytes, Stack size 152 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis_one_res
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_res
</UL>

<P><STRONG><a name="[430]"></a>test_dis_one_res</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_cur
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_vol
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_draw_one_page
</UL>

<P><STRONG><a name="[432]"></a>res_draw_one_page</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis_one_res
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
</UL>

<P><STRONG><a name="[2f8]"></a>res_list_dis</STRONG> (Thumb, 946 bytes, Stack size 56 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one_page
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_draw_one_page
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_next_dispose
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_restart_dispose
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_stop_dispose
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
</UL>

<P><STRONG><a name="[3b3]"></a>get_res_total</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cs99xx_result.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_title_step
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_fetch_for_comm
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_info_for_comm
</UL>

<P><STRONG><a name="[2b7]"></a>result_acw</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = result_acw &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_result
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_judge_err
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
</UL>

<P><STRONG><a name="[433]"></a>save_result</STRONG> (Thumb, 496 bytes, Stack size 64 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = save_result &rArr; save_one_result &rArr; save_one_result_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_total
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetTime
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_acw
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_data_to_str
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
</UL>

<P><STRONG><a name="[305]"></a>save_cur_result</STRONG> (Thumb, 354 bytes, Stack size 72 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = save_cur_result &rArr; save_result &rArr; save_one_result &rArr; save_one_result_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_total
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_result_list_dis
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_details
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
</UL>

<P><STRONG><a name="[435]"></a>result_cc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = result_cc &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_result
</UL>

<P><STRONG><a name="[2c0]"></a>result_bbd</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = result_bbd &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_result
</UL>

<P><STRONG><a name="[2bc]"></a>result_gr</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = result_gr &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_result
</UL>

<P><STRONG><a name="[2b9]"></a>result_ir</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = result_ir &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_result
</UL>

<P><STRONG><a name="[2b5]"></a>result_dcw</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = result_dcw &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_result
</UL>

<P><STRONG><a name="[2a4]"></a>updata_result</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = updata_result &rArr; result_bbd &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_ir
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_gr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_dcw
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_bbd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_acw
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_cc
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
</UL>

<P><STRONG><a name="[32e]"></a>wait_usb_connect</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = wait_usb_connect &rArr; draw_wait_usb_connect_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_wait_usb_connect_gui
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_no_connect_usb_gui
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
</UL>

<P><STRONG><a name="[1d]"></a>sys_result</STRONG> (Thumb, 858 bytes, Stack size 40 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = sys_result &rArr; result_short_cut &rArr; result_jump &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_total
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_n_results
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test_result
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_res
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_title
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_more
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_parameter.o(.data)
</UL>
<P><STRONG><a name="[444]"></a>init_ir_filtering_deep_options_list</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_ir_filtering_deep_options_list &rArr; more_option_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_filtering_deep_options_way
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_option_list_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_par_list
</UL>

<P><STRONG><a name="[446]"></a>init_cc_cur_gear_options_list</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_cc_cur_gear_options_list &rArr; more_option_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_cur_gear_options_way
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_option_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_par_list
</UL>

<P><STRONG><a name="[448]"></a>init_plc_signal_options_list</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_plc_signal_options_list &rArr; more_option_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_options_way
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_option_list_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_par_list
</UL>

<P><STRONG><a name="[449]"></a>custom_options_way</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = custom_options_way
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_add_more_opt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_more_options_list
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_options_list
</UL>

<P><STRONG><a name="[44a]"></a>init_custom_options_list</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init_custom_options_list &rArr; custom_options_way
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_options_way
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_par_list
</UL>

<P><STRONG><a name="[44e]"></a>gr_test_way_vol_drop2</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gr_test_way_vol_drop2 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_par_list
</UL>

<P><STRONG><a name="[911]"></a>get_gr_cur_no_dis_bits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs99xx_set_par_path.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>count_gr_cur_no_dis_bits</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_par_list
</UL>

<P><STRONG><a name="[465]"></a>init_sys_par_list</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = init_sys_par_list &rArr; init_plc_signal_options_list &rArr; more_option_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_plc_signal_options_list
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_filtering_deep_options_list
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_cs9929ax_f
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_2
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_for_single_gr
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_1
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sys
</UL>

<P><STRONG><a name="[466]"></a>custom_par_way_1</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = custom_par_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_par_list
</UL>

<P><STRONG><a name="[467]"></a>get_cur_amp_type_name</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_cur_amp_type_name &rArr; read_par_to_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_par_list
</UL>

<P><STRONG><a name="[468]"></a>get_cur_par_medium_name</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_cur_par_medium_name &rArr; read_par_to_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_par_list
</UL>

<P><STRONG><a name="[469]"></a>get_cur_res_medium_name</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_cur_res_medium_name &rArr; read_par_to_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_par_list
</UL>

<P><STRONG><a name="[46a]"></a>get_cur_cal_medium_name</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_cur_cal_medium_name &rArr; read_par_to_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_par_list
</UL>

<P><STRONG><a name="[3de]"></a>init_custom_par_list</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = init_custom_par_list &rArr; init_custom_options_list &rArr; custom_options_way
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_cal_medium_name
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_res_medium_name
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_par_medium_name
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_amp_type_name
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_par_way_1
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_custom_options_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_par_info
</UL>

<P><STRONG><a name="[216]"></a>init_par_info_list</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = init_par_info_list &rArr; init_cc_par_list &rArr; init_cc_cur_gear_options_list &rArr; more_option_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_com_par
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bbd_par_list
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_par_list
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_par_list
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_par_list
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_par_list
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_par_info
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_mode
</UL>

<P><STRONG><a name="[36f]"></a>init_sys_flag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cs99xx_struct.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
</UL>

<P><STRONG><a name="[370]"></a>init_sys_par</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = init_sys_par &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
</UL>

<P><STRONG><a name="[1f0]"></a>init_file_table</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_file_table &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
</UL>

<P><STRONG><a name="[912]"></a>init_one_file</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, cs99xx_struct.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>clear_one_file</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_one_file &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
</UL>

<P><STRONG><a name="[36d]"></a>init_default_file</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_default_file &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
</UL>

<P><STRONG><a name="[390]"></a>del_file</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = del_file &rArr; save_group_info &rArr; save_step_used_flag &rArr; save_step_used_flag_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_step_used_flag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_group_table
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_one_file
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file_for_comm
</UL>

<P><STRONG><a name="[391]"></a>del_all_file</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = del_all_file &rArr; save_all_file &rArr; save_all_file_flash &rArr; save_file_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_table
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_file
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_step_used_flag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_group_table
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file_for_comm
</UL>

<P><STRONG><a name="[1f1]"></a>init_99xx_list</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_99xx_list &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_flash
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_eep
</UL>

<P><STRONG><a name="[35f]"></a>init_acw_step</STRONG> (Thumb, 186 bytes, Stack size 104 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = init_acw_step &rArr; define_cur_kinds
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_node
</UL>

<P><STRONG><a name="[364]"></a>init_cc_step</STRONG> (Thumb, 276 bytes, Stack size 104 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = init_cc_step &rArr; define_cur_kinds
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[360]"></a>init_dcw_step</STRONG> (Thumb, 168 bytes, Stack size 112 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = init_dcw_step &rArr; define_cur_kinds
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[361]"></a>init_ir_step</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_ir_step &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[362]"></a>init_gr_step</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_gr_step &rArr; define_vol_kinds
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_vol_kinds
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[363]"></a>init_bbd_step</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_bbd_step &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
</UL>

<P><STRONG><a name="[2e8]"></a>insert_node</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = insert_node &rArr; init_acw_step &rArr; define_cur_kinds
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_step
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_flash
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_eep
</UL>

<P><STRONG><a name="[36e]"></a>insert_step</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = insert_step &rArr; save_one_step &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_step_used_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_and_updata_old_file
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_updata_new_file
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_group
</UL>

<P><STRONG><a name="[3ba]"></a>del_step</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = del_step
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_steps
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_cur_step_for_comm
</UL>

<P><STRONG><a name="[3c2]"></a>del_all_steps</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = del_all_steps &rArr; del_step
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_step
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
</UL>

<P><STRONG><a name="[3b8]"></a>swap_step</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = swap_step &rArr; save_group_table &rArr; save_group_table_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_two_step_for_comm
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retreat_cur_step_for_comm
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_cur_step_for_comm
</UL>

<P><STRONG><a name="[706]"></a>check_step_exist_for_comm</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cs99xx_struct.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_appoint_step_for_comm
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_two_step_for_comm
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_exist
</UL>

<P><STRONG><a name="[3bd]"></a>position_step</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cs99xx_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = position_step &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
</UL>

<P><STRONG><a name="[913]"></a>get_group_total_step</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cs99xx_struct.o(.text), UNUSED)

<P><STRONG><a name="[712]"></a>get_cur_file_total</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs99xx_struct.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_result_fetch_for_comm
</UL>

<P><STRONG><a name="[38]"></a>set_float_sys_par</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, cs99xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = set_float_sys_par &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>set_either_or_sys_par</STRONG> (Thumb, 724 bytes, Stack size 32 bytes, cs99xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = set_either_or_sys_par &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>set_option_sys_par</STRONG> (Thumb, 690 bytes, Stack size 64 bytes, cs99xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = set_option_sys_par &rArr; sys_option_sel_gui &rArr; more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_fail_mode_kinds
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_option_sel_gui
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par_to_buf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>set_plc_option_sys_par</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, cs99xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = set_plc_option_sys_par &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_more_options_gui
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>set_int_sys_par</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, cs99xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = set_int_sys_par &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[470]"></a>prompt_for_check_data</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, cs99xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = prompt_for_check_data &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_date
</UL>

<P><STRONG><a name="[21f]"></a>sys_check_date</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cs99xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = sys_check_date &rArr; prompt_for_check_data &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_check_data
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[19]"></a>sys_sys</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, cs99xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = sys_sys &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_menu
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_par_list
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par_to_buf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cs99xx_parameter.o(.text)
<LI> cs99xx_parameter.o(.data)
</UL>
<P><STRONG><a name="[475]"></a>JudgeSaveTime</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, cs99xx_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = JudgeSaveTime
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_time_for_comm
</UL>

<P><STRONG><a name="[21]"></a>sys_updata</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cs99xx_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sys_updata &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_parameter.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>sys_settime</STRONG> (Thumb, 908 bytes, Stack size 720 bytes, cs99xx_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = sys_settime &rArr; serve_timekey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Show
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetTime
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_time
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_time_manage
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvToCalendar
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSaveTime
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_timekey
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_parameter.o(.data)
</UL>
<P><STRONG><a name="[478]"></a>dcw_5kv_short_vref</STRONG> (Thumb, 730 bytes, Stack size 64 bytes, cs99xx_vref.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dcw_5kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dcw_max_gear
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
</UL>

<P><STRONG><a name="[47a]"></a>dcw_10kv_short_vref</STRONG> (Thumb, 724 bytes, Stack size 64 bytes, cs99xx_vref.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dcw_10kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dcw_max_gear
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
</UL>

<P><STRONG><a name="[400]"></a>test_vref</STRONG> (Thumb, 1294 bytes, Stack size 144 bytes, cs99xx_vref.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = test_vref &rArr; dcw_10kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acw_max_gear
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_10kv_short_vref
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_5kv_short_vref
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_arc_vref
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[47d]"></a>update_info</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = update_info &rArr; gui_draw_test &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_draw_test_ui
</UL>

<P><STRONG><a name="[47e]"></a>dis_gear_up_limit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, general_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>

<P><STRONG><a name="[47f]"></a>judge_ir_rang</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = judge_ir_rang &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
</UL>

<P><STRONG><a name="[480]"></a>tr_ir_gear_up_limit_to_string</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
</UL>

<P><STRONG><a name="[481]"></a>transform_test_ir_res_loop</STRONG> (Thumb, 1214 bytes, Stack size 56 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_ir_gear_up_limit_to_string
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_ir_rang
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
</UL>

<P><STRONG><a name="[482]"></a>dis_gr_vol</STRONG> (Thumb, 612 bytes, Stack size 32 bytes, general_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[483]"></a>dis_test_gr_cur</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, general_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[484]"></a>dis_test_gr_vol</STRONG> (Thumb, 890 bytes, Stack size 40 bytes, general_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_str_pre_zero
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[485]"></a>transform_test_gr_vol</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = transform_test_gr_vol &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
</UL>

<P><STRONG><a name="[486]"></a>dis_pass</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = dis_pass &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_cmd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_result_status
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[488]"></a>dis_fail</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = dis_fail &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[489]"></a>dis_discharge_over</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = dis_discharge_over &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
</UL>

<P><STRONG><a name="[48a]"></a>dis_stop</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = dis_stop &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_count
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[48b]"></a>stop_server_for_comm</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stop_server_for_comm &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[48c]"></a>dis_charge_remain_vol</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = dis_charge_remain_vol &rArr; count_dis_value &rArr; cpld_count_angle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_schedule_task
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_sample_task
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sample_task
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sample_task
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_test_timer
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_time
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_dis
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_discharge_over
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_execute_dis_charge
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[496]"></a>cur_cylinder_ctrl_over</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, general_test.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[48e]"></a>clear_test_falg</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_test_falg &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>

<P><STRONG><a name="[491]"></a>re_draw_test_ui</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = re_draw_test_ui &rArr; update_info &rArr; gui_draw_test &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_schedule_task
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sample_task
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_test_ui_info
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_output_Impedan_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
</UL>

<P><STRONG><a name="[497]"></a>app_ctrl_exit_sw</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, general_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[494]"></a>uninstall_test_irq_fun</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, general_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[493]"></a>testing_process_controlx</STRONG> (Thumb, 1370 bytes, Stack size 16 bytes, general_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sample_task
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_count
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_stop_exit
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_stop_exit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_test_timer
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;install_test_irq_fun
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninstall_test_irq_fun
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ctrl_exit_sw
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_test_falg
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_cylinder_ctrl_over
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_server_for_comm
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;into_output_delay
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
</UL>

<P><STRONG><a name="[914]"></a>install_run_test_fun</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, general_test.o(.text), UNUSED)

<P><STRONG><a name="[49a]"></a>testing_process_control</STRONG> (Thumb, 920 bytes, Stack size 16 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = testing_process_control &rArr; dis_fail &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sample_task
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_count
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_stop_exit
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_stop_exit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_test_timer
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_acw_test
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;install_test_irq_fun
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninstall_test_irq_fun
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ctrl_exit_sw
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_test_falg
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_server_for_comm
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;into_output_delay
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_running
</UL>

<P><STRONG><a name="[49b]"></a>testing_gui_control</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = testing_gui_control &rArr; serve_test_shortcut &rArr; sys_memory &rArr; server_mem_shortcut_exist &rArr; server_more_file &rArr; authenticate_pw &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_schedule_task
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_draw_test_ui
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_test_falg
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_server_for_comm
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_output_Impedan_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>

<P><STRONG><a name="[49e]"></a>test_running</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = test_running &rArr; testing_process_control &rArr; dis_fail &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_schedule_task
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>

<P><STRONG><a name="[3dc]"></a>serve_test</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = serve_test &rArr; testing_gui_control &rArr; serve_test_shortcut &rArr; sys_memory &rArr; server_mem_shortcut_exist &rArr; server_more_file &rArr; authenticate_pw &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_off
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_keyboard
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_test_ui_info
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_cylinder_ctrl_stop
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;install_test_irq_fun
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_running
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_test_falg
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_subtask
</UL>

<P><STRONG><a name="[4ca]"></a>gfi_cycle_clear_count</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_poll_task
</UL>

<P><STRONG><a name="[199]"></a>stop_irq</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = stop_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_hv
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_control_test_button_dispose
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tester_reset_for_comm
</UL>

<P><STRONG><a name="[19e]"></a>short_irq</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = short_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sample_task
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_exception_scene
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_poll_task
</UL>

<P><STRONG><a name="[19d]"></a>arc_irq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = arc_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sample_task
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_exception_scene
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>gfi_irq</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = gfi_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sample_task
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_exception_scene
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[4a0]"></a>serve_test_over</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = serve_test_over &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_irq
</UL>

<P><STRONG><a name="[4a1]"></a>sever_offset_test_over</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sever_offset_test_over &rArr; stop_test &rArr; exit_test_relay_motion &rArr; init_set_ir_gear &rArr; ir_set_gear &rArr; ir_set_gear_s &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_res_f
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_irq
</UL>

<P><STRONG><a name="[4a2]"></a>report_absorptance_res_value</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = report_absorptance_res_value &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_irq
</UL>

<P><STRONG><a name="[90]"></a>test_irq</STRONG> (Thumb, 784 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = test_irq &rArr; serve_test_over &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ch_step
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_rise_vol_step_value
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_absorptance_res_value
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sever_offset_test_over
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_over
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hv
</UL>
<BR>[Address Reference Count : 3]<UL><LI> serve_test.o(.text)
<LI> cs99xx_offset.o(.text)
<LI> cs99xx_bbd.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>test_big_cap_irq</STRONG> (Thumb, 904 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = test_big_cap_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sample_task
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ch_step
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hv
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serve_test.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>test_g_irq</STRONG> (Thumb, 602 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = test_g_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ch_step
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_res_f
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hv
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serve_test.o(.text)
<LI> cs99xx_offset.o(.text)
</UL>
<P><STRONG><a name="[1ca]"></a>erase_pages_flash</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, on_chip_flash_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = erase_pages_flash &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetFlagStatus
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_custom_type_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_type
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_sys_language_par
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_excep_info
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
</UL>

<P><STRONG><a name="[1cb]"></a>write_u16_flash</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, on_chip_flash_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = write_u16_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_custom_type_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_type
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_sys_language_par
</UL>

<P><STRONG><a name="[35b]"></a>updata_sys_language_par</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, on_chip_flash_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = updata_sys_language_par &rArr; write_u16_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_flash
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_pages_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
</UL>

<P><STRONG><a name="[2f4]"></a>write_one_page_bin</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, on_chip_flash_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = write_one_page_bin &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
</UL>

<P><STRONG><a name="[2b1]"></a>record_exception_scene</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, serve_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_irq
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfi_irq
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_irq
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_vol_exception
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_judge_err
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[304]"></a>recover_exception_scene</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, serve_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
</UL>

<P><STRONG><a name="[405]"></a>open_hv</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = open_hv &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_irq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_irq
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_test_irq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_irq
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[40c]"></a>close_hv</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = close_hv
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sample_task
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_irq
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
</UL>

<P><STRONG><a name="[306]"></a>cur_cylinder_ctrl_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serve_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>

<P><STRONG><a name="[221]"></a>dis_exception_log</STRONG> (Thumb, 538 bytes, Stack size 136 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dis_exception_log &rArr; transform_time_to_str &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_excep_info
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_data_to_str
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[2a5]"></a>test_unit_dis</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = test_unit_dis &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_offset_step
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_bbd_step
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
</UL>

<P><STRONG><a name="[49d]"></a>serve_test_shortcut</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = serve_test_shortcut &rArr; sys_memory &rArr; server_mem_shortcut_exist &rArr; server_more_file &rArr; authenticate_pw &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd24064_Clr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_step
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_more
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
</UL>

<P><STRONG><a name="[377]"></a>serve_count</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, serve_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[4ab]"></a>count_gear_vol</STRONG> (Thumb, 946 bytes, Stack size 16 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = count_gear_vol &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>

<P><STRONG><a name="[4ac]"></a>transform_gr_cur_string</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = transform_gr_cur_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
</UL>

<P><STRONG><a name="[2a6]"></a>transform_test_vol_string</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = transform_test_vol_string &rArr; transform_gr_cur_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_gr_cur_string
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_discharge_over
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
</UL>

<P><STRONG><a name="[2a1]"></a>transform_test_time_string</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = transform_test_time_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_time
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;into_output_delay
</UL>

<P><STRONG><a name="[2a7]"></a>transform_test_loop_string</STRONG> (Thumb, 714 bytes, Stack size 56 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_gr_vol
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_discharge_over
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
</UL>

<P><STRONG><a name="[4ad]"></a>confirm_contact_segment_s</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serve_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm_vol_segment
</UL>

<P><STRONG><a name="[260]"></a>confirm_vol_segment</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = confirm_vol_segment
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm_vol_segment_s
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm_contact_segment_s
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>

<P><STRONG><a name="[4ae]"></a>load_cur_frequency</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = load_cur_frequency &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>

<P><STRONG><a name="[4b6]"></a>get_gr_gear</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, serve_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_cal_info
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_cal_point_info
</UL>

<P><STRONG><a name="[4af]"></a>load_ratio</STRONG> (Thumb, 1618 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = load_ratio
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
</UL>

<P><STRONG><a name="[4b2]"></a>set_dc_gr_module_info</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = set_dc_gr_module_info &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_vol_gear
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_test_method
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_output_da
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_dc_gr_n_moduls
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>

<P><STRONG><a name="[3a1]"></a>load_data</STRONG> (Thumb, 3138 bytes, Stack size 24 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm_vol_segment
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_time_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WatchdogConfig
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_info
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ratio
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gr_gear
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cur_frequency
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gear_vol
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_load_gear
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_offset_one_page
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bbd_one_page
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_for_comm
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_for_comm
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_auto_for_comm
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ir_auto_for_comm
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_port_for_comm
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_port_for_comm
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port_for_comm
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_for_comm
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_steps_cont_for_comm
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steps_cont_for_comm
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_signal_for_comm
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pass_signal_for_comm
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hz_for_comm_f
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hz_for_comm
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hz_for_comm
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_arc_for_comm
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_arc_for_comm
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_charge_cur_for_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_charge_cur_for_comm
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_cur_for_comm
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_real_cur_for_comm
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_offset_value_for_comm
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_for_comm
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_value_for_comm
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_for_comm
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_for_comm
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gear_for_comm
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gear_for_comm
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_for_comm
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vol_for_comm
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_for_comm
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bbd_short_check_for_comm
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bbd_short_check_for_comm
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bbd_open_check_for_comm
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bbd_open_check_for_comm
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_two_step_for_comm
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retreat_cur_step_for_comm
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_cur_step_for_comm
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_cur_step_for_comm
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
</UL>

<P><STRONG><a name="[4b7]"></a>count_fall_vol_step_value</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = count_fall_vol_step_value &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_test_details
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_details
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details_g
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_details
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ch_step
</UL>

<P><STRONG><a name="[4a3]"></a>count_rise_vol_step_value</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = count_rise_vol_step_value &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_irq
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_test_irq
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_details
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details_g
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ch_step
</UL>

<P><STRONG><a name="[4b8]"></a>test_g_details</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = test_g_details &rArr; test_ready &rArr; test_vref &rArr; dcw_10kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_fall_vol_step_value
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_rise_vol_step_value
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs99xx_g_test
</UL>

<P><STRONG><a name="[48d]"></a>test_status_dis</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = test_status_dis &rArr; dis_test_status &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs99xx_big_cap_test
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs99xx_test
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs99xx_g_test
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;into_output_delay
</UL>

<P><STRONG><a name="[4b9]"></a>cs99xx_g_test</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = cs99xx_g_test &rArr; test_g_details &rArr; test_ready &rArr; test_vref &rArr; dcw_10kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_time
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_details
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_dis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serve_test.o(.text)
</UL>
<P><STRONG><a name="[4bb]"></a>cs99xx_test</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = cs99xx_test &rArr; test_details &rArr; test_ready &rArr; test_vref &rArr; dcw_10kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_time
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_details
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_dis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serve_test.o(.text)
</UL>
<P><STRONG><a name="[1e4]"></a>set_sample_rate</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, serve_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_sample_task
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_draw_test_ui
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
</UL>

<P><STRONG><a name="[4bd]"></a>cs99xx_big_cap_test</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = cs99xx_big_cap_test &rArr; test_big_cap_details &rArr; test_ready &rArr; test_vref &rArr; dcw_10kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_time
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_dis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serve_test.o(.text)
</UL>
<P><STRONG><a name="[495]"></a>install_test_irq_fun</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, serve_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
</UL>

<P><STRONG><a name="[490]"></a>count_vol_step_value</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = count_vol_step_value &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
</UL>

<P><STRONG><a name="[4a4]"></a>count_vol_ch_step</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = count_vol_ch_step &rArr; count_fall_vol_step_value &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_fall_vol_step_value
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_rise_vol_step_value
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_irq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_irq
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_test_irq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_irq
</UL>

<P><STRONG><a name="[4be]"></a>vol_change</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vol_change &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details_g
</UL>

<P><STRONG><a name="[4bf]"></a>vol_change_200hz</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vol_change_200hz &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[4c0]"></a>vol_change_1000hz</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, serve_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2fd]"></a>open_test_timer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = open_test_timer &rArr; bsp_tim2_open
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim2_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_con_dispose
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details_g
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[4c4]"></a>offset_state_dis</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = offset_state_dis &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_test
</UL>

<P><STRONG><a name="[3a6]"></a>offset_test</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = offset_test &rArr; offset_details_g &rArr; exception_handling &rArr; fail_mode_fpdfc_dispose &rArr; fail_mode_con_dispose &rArr; fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_time
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_state_dis
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details_g
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_details
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
</UL>

<P><STRONG><a name="[22f]"></a>clear_test_flag</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_test_flag &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_par
</UL>

<P><STRONG><a name="[402]"></a>wait_dc_gr_send_task_idle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = wait_dc_gr_send_task_idle &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[3a5]"></a>startup</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = startup &rArr; save_result &rArr; save_one_result &rArr; save_one_result_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dc_gr_data
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mdbus_send_queue
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_sample_task
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sample_task
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_keyboard
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_sw
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_slither_data
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_par
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_dc_gr_send_task_idle
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_write
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_stop_dis_charge
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dc_gr_control_relay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[19a]"></a>close_test_timer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = close_test_timer &rArr; bsp_tim2_close
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim2_close
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_task
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_irq
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_con_dispose
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_irq
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sever_offset_test_over
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_over
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
</UL>

<P><STRONG><a name="[2fc]"></a>stop_test</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = stop_test &rArr; exit_test_relay_motion &rArr; init_set_ir_gear &rArr; ir_set_gear &rArr; ir_set_gear_s &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sample_task
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_write
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_hv
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_irq
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_con_dispose
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sever_offset_test_over
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
</UL>

<P><STRONG><a name="[9c]"></a>serve_test_poll_task</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = serve_test_poll_task &rArr; short_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_irq
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_delay_off
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_flicker
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfi_cycle_clear_count
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_delay_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_config.o(.text)
</UL>
<P><STRONG><a name="[4d0]"></a>MD5Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_md5
</UL>

<P><STRONG><a name="[4cc]"></a>MD5Decode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[4cb]"></a>MD5Transform</STRONG> (Thumb, 1886 bytes, Stack size 284 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[4cd]"></a>MD5Update</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_md5
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[4cf]"></a>MD5Encode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MD5Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[4ce]"></a>MD5Final</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Encode
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_md5
</UL>

<P><STRONG><a name="[222]"></a>test_md5</STRONG> (Thumb, 58 bytes, Stack size 128 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = test_md5 &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[39]"></a>set_custom_options_par</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, cs99xx_custom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = set_custom_options_par &rArr; load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_more_options_gui
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_combination_key
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_par_to_ram
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw.o(.data)
</UL>
<P><STRONG><a name="[4d7]"></a>clear_bbd_ok_flag</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cs99xx_bbd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
</UL>

<P><STRONG><a name="[4d6]"></a>update_cap_limit</STRONG> (Thumb, 748 bytes, Stack size 24 bytes, cs99xx_bbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = update_cap_limit &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
</UL>

<P><STRONG><a name="[49c]"></a>sys_bbd</STRONG> (Thumb, 1932 bytes, Stack size 48 bytes, cs99xx_bbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = sys_bbd &rArr; offset_test &rArr; offset_details_g &rArr; exception_handling &rArr; fail_mode_fpdfc_dispose &rArr; fail_mode_con_dispose &rArr; fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_test
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_test_ui_info
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bbd
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cap_limit
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bbd_ok_flag
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bbd_one_page
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_bbd_step
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_bbd_shortcut
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_more
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
</UL>

<P><STRONG><a name="[4db]"></a>acw_into_test_relay_ready</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, acw_relay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_acw_cur_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_start_test
</UL>

<P><STRONG><a name="[4dc]"></a>acw_exit_test_relay_motion</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, acw_relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = acw_exit_test_relay_motion &rArr; shift_acw_cur_gear &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_acw_cur_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_test_details
</UL>

<P><STRONG><a name="[4dd]"></a>acw_start_test</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, acw_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_into_test_relay_ready
</UL>

<P><STRONG><a name="[915]"></a>load_acw_data</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, acw_test.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>acw_test_irq</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, acw_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ch_step
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_rise_vol_step_value
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hv
</UL>

<P><STRONG><a name="[4df]"></a>acw_test_details</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, acw_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = acw_test_details &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_exit_test_relay_motion
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_fall_vol_step_value
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_acw_test
</UL>

<P><STRONG><a name="[91]"></a>run_acw_test</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, acw_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = run_acw_test &rArr; count_acw_dis_value &rArr; cpld_count_angle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_test_details
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> general_test.o(.text)
</UL>
<P><STRONG><a name="[4e0]"></a>count_acw_dis_value</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, acw_count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = count_acw_dis_value &rArr; cpld_count_angle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_exception_scene
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_count_angle
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_judge_err
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_acw_test
</UL>

<P><STRONG><a name="[719]"></a>enter_auto_cal_ui</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, auto_cal_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_auto_cal_ui_for_comm
</UL>

<P><STRONG><a name="[71a]"></a>exit_auto_cal_ui</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, auto_cal_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_auto_cal_ui_for_comm
</UL>

<P><STRONG><a name="[71b]"></a>get_cur_point_mode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, auto_cal_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_mode_for_comm
</UL>

<P><STRONG><a name="[4e2]"></a>get_cur_point_range</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, auto_cal_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_cur_point_range &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_range_for_comm
</UL>

<P><STRONG><a name="[4e3]"></a>get_auto_cal_status</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, auto_cal_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_auto_cal_status &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_status_for_comm
</UL>

<P><STRONG><a name="[71c]"></a>auto_cal_start_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, auto_cal_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_start_for_comm
</UL>

<P><STRONG><a name="[71d]"></a>auto_cal_stop_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, auto_cal_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_stop_for_comm
</UL>

<P><STRONG><a name="[4e4]"></a>set_auto_cal_measure</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, auto_cal_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_auto_cal_measure
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cal_measure_for_comm
</UL>

<P><STRONG><a name="[4e6]"></a>get_auto_cal_points</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, auto_cal_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_auto_cal_points &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_points_for_comm
</UL>

<P><STRONG><a name="[71e]"></a>load_auto_cal_point</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, auto_cal_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cal_point_for_comm
</UL>

<P><STRONG><a name="[4e7]"></a>get_res_cal_point_info</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_res_cal_point_info &rArr; get_ir_res_meal &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_res_meal
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_res_cal_info
</UL>

<P><STRONG><a name="[4e8]"></a>get_vol_cal_point_info</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = get_vol_cal_point_info &rArr; select_gr_cal_menu &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_gr_cal_menu
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gr_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dc_gr_cal_info
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_cal_info
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_vol_cal_info
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_vol_cal_info
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_vol_cal_info
</UL>

<P><STRONG><a name="[4e9]"></a>get_cur_cal_point_info</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_cur_cal_point_info &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cur_cal_info
</UL>

<P><STRONG><a name="[4ea]"></a>draw_auto_cal_ui_ele</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = draw_auto_cal_ui_ele &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cal_ele
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cal_point_base_info
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ui_ele
</UL>

<P><STRONG><a name="[4eb]"></a>clear_ui_ele</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = clear_ui_ele &rArr; draw_auto_cal_ui_ele &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_cal_ui_ele
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
</UL>

<P><STRONG><a name="[508]"></a>init_ui_ele_info</STRONG> (Thumb, 1102 bytes, Stack size 8 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_ui_ele_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
</UL>

<P><STRONG><a name="[4ec]"></a>transform_auto_cal_num_to_string</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = transform_auto_cal_num_to_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cal_point_base_info
</UL>

<P><STRONG><a name="[4ed]"></a>transform_auto_cal_da_ad_to_string</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = transform_auto_cal_da_ad_to_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cal_ele
</UL>

<P><STRONG><a name="[4ee]"></a>transform_auto_cal_gear_to_string</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, auto_cal_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>

<P><STRONG><a name="[4ef]"></a>transform_auto_cal_vol_to_string</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = transform_auto_cal_vol_to_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cal_ele
</UL>

<P><STRONG><a name="[4f0]"></a>transform_auto_cal_cur_to_string</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = transform_auto_cal_cur_to_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
</UL>

<P><STRONG><a name="[4f1]"></a>transform_auto_cal_res_to_string</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = transform_auto_cal_res_to_string &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
</UL>

<P><STRONG><a name="[4f2]"></a>dis_cal_point_base_info</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dis_cal_point_base_info &rArr; draw_auto_cal_ui_ele &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_num_to_string
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_cal_ui_ele
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
</UL>

<P><STRONG><a name="[4f3]"></a>dis_cal_ele</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dis_cal_ele &rArr; draw_auto_cal_ui_ele &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_vol_to_string
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_da_ad_to_string
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_cal_ui_ele
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
</UL>

<P><STRONG><a name="[4f4]"></a>dis_gr_measure</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, auto_cal_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = dis_gr_measure &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
</UL>

<P><STRONG><a name="[4f7]"></a>get_gr_total_cal_points</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_gr_total_cal_points
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_vol_order
</UL>

<P><STRONG><a name="[507]"></a>select_cur_range_pool</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, auto_calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_order
</UL>

<P><STRONG><a name="[1fd]"></a>auto_calibration</STRONG> (Thumb, 330 bytes, Stack size 2112 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2420 + Unknown Stack Size
<LI>Call Chain = auto_calibration &rArr; draw_auto_calibration_gui &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_calibration_gui
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_pass
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_order
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cal_point_base_info
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ui_ele_info
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ui_ele
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
</UL>

<P><STRONG><a name="[50c]"></a>init_gpio_switch_hv</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_gpio_switch_hv &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[3ec]"></a>on_switch_hv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_switch_hv
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ready
</UL>

<P><STRONG><a name="[40b]"></a>off_switch_hv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = off_switch_hv
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
</UL>

<P><STRONG><a name="[50f]"></a>init_cs99xx_nvic_group</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_cs99xx_nvic_group
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[515]"></a>set_vector_table</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[18c]"></a>init_4094</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_4094 &rArr; MC14094_Init &rArr; reset_posrts_mc14094_ctrl &rArr; MC14094_Updata_Port &rArr; MC14094_Write_Port &rArr; MC14094_WriteByte_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[512]"></a>systick_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bsp_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = systick_init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[513]"></a>CRC_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[223]"></a>bsp_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bsp_init &rArr; GUI_Init &rArr; LCD_Init &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exit
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer5_callback
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi_cpld
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_keyboard
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_vref_init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_it_init
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_it_init
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Config
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vector_table
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cs99xx_nvic_group
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gpio_switch_hv
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[916]"></a>cs_delay_us</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_config.o(.text), UNUSED)

<P><STRONG><a name="[723]"></a>cs_delay_ms</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
</UL>

<P><STRONG><a name="[19c]"></a>soft_delay_us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_motion
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_delay_10us
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off_old
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off_8833
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[198]"></a>soft_delay_10us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = soft_delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[516]"></a>FSMC_Configuration</STRONG> (Thumb, 254 bytes, Stack size 96 bytes, stm32_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FSMC_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[1f9]"></a>on_rtc_int</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtc_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
</UL>

<P><STRONG><a name="[1f6]"></a>off_rtc_int</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtc_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
</UL>

<P><STRONG><a name="[524]"></a>rtc_wait_for_synchro</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_wait_for_synchro &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[525]"></a>rtc_wait_for_last_task</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_wait_for_last_task &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[526]"></a>Time_ConvCalendar</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Time_ConvCalendar &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetCalendarTime
</UL>

<P><STRONG><a name="[476]"></a>Time_Adjust</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Time_Adjust &rArr; Time_ConvCalendar &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvCalendar
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_for_last_task
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_time
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_time_for_comm
</UL>

<P><STRONG><a name="[477]"></a>set_sys_time</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_sys_time &rArr; Time_Adjust &rArr; Time_ConvCalendar &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
</UL>

<P><STRONG><a name="[529]"></a>RTC_Configuration</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Configuration &rArr; RTC_NVIC_Conf &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_delay_us
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_for_last_task
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_for_synchro
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Conf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[217]"></a>rtc_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rtc_init &rArr; set_sys_time &rArr; Time_Adjust &rArr; Time_ConvCalendar &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_time
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_for_last_task
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_for_synchro
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Conf
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[473]"></a>Time_ConvToCalendar</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Time_ConvToCalendar &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str_for_mem
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_string
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_data_to_str
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_time_for_comm
</UL>

<P><STRONG><a name="[2e4]"></a>Time_GetTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Time_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_time_for_comm
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
</UL>

<P><STRONG><a name="[383]"></a>GetTime</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GetTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetTime
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvToCalendar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_date
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Show
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
</UL>

<P><STRONG><a name="[42b]"></a>transform_time_to_string</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = transform_time_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvToCalendar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string
</UL>

<P><STRONG><a name="[434]"></a>transform_data_to_str</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = transform_data_to_str &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvToCalendar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
</UL>

<P><STRONG><a name="[431]"></a>transform_time_to_str</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = transform_time_to_str &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvToCalendar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis_one_res
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_res
</UL>

<P><STRONG><a name="[384]"></a>transform_time_to_str_for_mem</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = transform_time_to_str_for_mem &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvToCalendar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_file_info
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
</UL>

<P><STRONG><a name="[1ff]"></a>Time_Show</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Time_Show &rArr; GetTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Refresh_Rect
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
</UL>

<P><STRONG><a name="[534]"></a>Time_SetTime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetCalendarTime
</UL>

<P><STRONG><a name="[536]"></a>Time_SetCalendarTime</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, rtc_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetTime
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvCalendar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4c]"></a>RTC_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RTC_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[519]"></a>TIM2_it_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, timer_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM2_it_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[4c6]"></a>bsp_tim2_close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_tim2_close
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
</UL>

<P><STRONG><a name="[4c1]"></a>bsp_tim2_open</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_tim2_open
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_test_timer
</UL>

<P><STRONG><a name="[65]"></a>TIM2_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, timer_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_200hz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[518]"></a>GPIO_Configuration</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32_gpio_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[375]"></a>scan_keyboard</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_program_info
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_fail
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_comm_fail
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_interface_info
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_soft_version
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Det_combination
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectKey
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_F4_5
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_F4_9
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_F4_8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_EN1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_EN0
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_06
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_05
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_04
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_03
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_02
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_01
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_9
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_7
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_6
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_5
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_1
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_0
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_enter
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_F4
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_F3
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_F2
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown_key_F1
</UL>

<P><STRONG><a name="[542]"></a>InitKeyStr</STRONG> (Thumb, 1362 bytes, Stack size 0 bytes, keyboard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_keyboard
</UL>

<P><STRONG><a name="[541]"></a>bsp_keyboard_init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_keyboard_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_keyboard
</UL>

<P><STRONG><a name="[51c]"></a>init_keyboard</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_keyboard &rArr; bsp_keyboard_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_keyboard_init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKeyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[20e]"></a>report_key_value</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = report_key_value &rArr; Det_combination &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Det_combination
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectKey
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_task
</UL>

<P><STRONG><a name="[545]"></a>I2C_GPIO_CAL_IN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c_ee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[521]"></a>I2C_EE_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_EE_Init &rArr; I2C_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[552]"></a>I2C_EE_WriteProtect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_EE_WriteProtect
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
</UL>

<P><STRONG><a name="[553]"></a>I2C_EE_PageWrite</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetAddr
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Idle
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cwrite_byte_to24C512
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_ACK
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
</UL>

<P><STRONG><a name="[2c9]"></a>I2C_EE_BufferWrite</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteProtect
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
</UL>

<P><STRONG><a name="[554]"></a>I2C_EE_ByteWrite</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2c_ee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetAddr
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cwrite_byte_to24C512
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_ACK
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>

<P><STRONG><a name="[2cb]"></a>I2C_EE_BufferRead</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_EE_BufferRead &rArr; I2Cread_byte_from24C512 &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetAddr
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cread_byte_from24C512
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cwrite_byte_to24C512
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_NOACK
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_ACK
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_ACK
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
</UL>

<P><STRONG><a name="[22c]"></a>MC14094_CMD</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC14094_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ready
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_motion
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_exit_test_relay_motion
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_into_test_relay_ready
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_acw_cur_gear
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cur_gear
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dc_gr_control_relay
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off_old
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off_8833
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on_old
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on_8833
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_plc_test_signal
</UL>

<P><STRONG><a name="[3f2]"></a>MC14094_CMD_BYTE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc14094.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc14094_set_gear
</UL>

<P><STRONG><a name="[234]"></a>MC14094_Updata</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ready
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_motion
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_cmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_auto_select_gear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_reset
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_gear
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc14094_set_gear
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dc_gr_control_relay
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off_old
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off_8833
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on_old
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on_8833
</UL>

<P><STRONG><a name="[3fe]"></a>MC14094_Updata_Port</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MC14094_Updata_Port &rArr; MC14094_Write_Port &rArr; MC14094_WriteByte_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write_Port
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_posrts_mc14094_ctrl
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_port
</UL>

<P><STRONG><a name="[232]"></a>reset_posrts_mc14094_ctrl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = reset_posrts_mc14094_ctrl &rArr; MC14094_Updata_Port &rArr; MC14094_Write_Port &rArr; MC14094_WriteByte_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata_Port
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_ports
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Init
</UL>

<P><STRONG><a name="[511]"></a>MC14094_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MC14094_Init &rArr; reset_posrts_mc14094_ctrl &rArr; MC14094_Updata_Port &rArr; MC14094_Write_Port &rArr; MC14094_WriteByte_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_posrts_mc14094_ctrl
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_4094
</UL>

<P><STRONG><a name="[3af]"></a>MC14094_CMD_RA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc14094.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contrast
</UL>

<P><STRONG><a name="[3b0]"></a>MC14094_Updata_RA</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc14094.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write_RA
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contrast
</UL>

<P><STRONG><a name="[3f9]"></a>MC14094_CMD_Port</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC14094_CMD_Port
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_port_8_4094
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_port_16_4094
</UL>

<P><STRONG><a name="[51d]"></a>dac_vref_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dac_vref.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dac_vref_init &rArr; Dac1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac1_Init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD4051_Init
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[563]"></a>vref_scan_fun</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, dac_vref.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vref_scan_fun &rArr; DAC_SetChannel1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>TIM3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dac_vref.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; vref_scan_fun &rArr; DAC_SetChannel1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_scan_fun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[564]"></a>NVIC_Config_For_ADC_Watchdog</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Config_For_ADC_Watchdog &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WatchdogConfig
</UL>

<P><STRONG><a name="[4b5]"></a>ADC_WatchdogConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_WatchdogConfig &rArr; NVIC_Config_For_ADC_Watchdog &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AnalogWatchdogSingleChannelConfig
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AnalogWatchdogThresholdsConfig
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AnalogWatchdogCmd
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config_For_ADC_Watchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[340]"></a>ADC_WatchdogON</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_sw
</UL>

<P><STRONG><a name="[33f]"></a>ADC_WatchdogOFF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_WatchdogOFF &rArr; ADC_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_sw
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[51f]"></a>ADC_Config</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_Config &rArr; ADC_WatchdogConfig &rArr; NVIC_Config_For_ADC_Watchdog &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WatchdogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[2c5]"></a>Get_Adc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ADC1_2_IRQHandler &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WatchdogOFF
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_exception_scene
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c7]"></a>Get_Adc_Average</STRONG> (Thumb, 188 bytes, Stack size 152 bytes, stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
</UL>

<P><STRONG><a name="[576]"></a>HV_SPI_CPLD_GPIO</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi_cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HV_SPI_CPLD_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi_cpld
</UL>

<P><STRONG><a name="[577]"></a>SPI_CPLD_GPIO</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, spi_cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_CPLD_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi_cpld
</UL>

<P><STRONG><a name="[51e]"></a>init_spi_cpld</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_spi_cpld &rArr; SPI_CPLD_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPLD_GPIO
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_SPI_CPLD_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[3ee]"></a>cpld_write</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, spi_cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpld_write
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sine_hz
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_sine
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromCPLD
</UL>

<P><STRONG><a name="[3f5]"></a>cmd_cpld_hv_port</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_cpld_hv_port
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_cal
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_output_Impedan_sel
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_execute_dis_charge
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_keep_dis_charge
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_stop_dis_charge
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_stop_charge
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_start_charge
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_dcw_big_cap_stop_charge
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_port_cpld
</UL>

<P><STRONG><a name="[411]"></a>reset_posrts_cpld_ctrl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_cpld.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_ports
</UL>

<P><STRONG><a name="[578]"></a>ReadDataFromCPLD</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, spi_cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadDataFromCPLD &rArr; cpld_write
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_count_angle
</UL>

<P><STRONG><a name="[2c2]"></a>cpld_count_angle</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, spi_cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cpld_count_angle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromCPLD
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
</UL>

<P><STRONG><a name="[3f6]"></a>hv_cpld_write</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, spi_cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hv_cpld_write
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_cal
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_output_Impedan_sel
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_execute_dis_charge
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_keep_dis_charge
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_stop_dis_charge
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_stop_charge
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_port
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_start_charge
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_dcw_big_cap_stop_charge
</UL>

<P><STRONG><a name="[51a]"></a>init_timer5_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer5_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[51b]"></a>TIM5_it_init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, timer5_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM5_it_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[7b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, timer5_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = TIM5_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[309]"></a>flash_cs_set_at45db161</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, spi_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
</UL>

<P><STRONG><a name="[586]"></a>SPI_FLASH_PageErase</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_unlock
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_lock
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>

<P><STRONG><a name="[58a]"></a>erase_chip_spi_flash</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_unlock
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_lock
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>

<P><STRONG><a name="[30a]"></a>at45_buffer_write</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_page_and_check_ok
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadSector
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_flash
</UL>

<P><STRONG><a name="[30c]"></a>at45_buffer_read</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = at45_buffer_read &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadSector
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_flash
</UL>

<P><STRONG><a name="[58f]"></a>xxxx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Read_Sector_Protection_Reg
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Sector_Protection_Reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase_Sector_Protection_Reg
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PROTE_DISABLE
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PROTE_ENABLE
</UL>

<P><STRONG><a name="[590]"></a>test_flash</STRONG> (Thumb, 106 bytes, Stack size 112 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_buffer_write
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_buffer_read
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Read_Sector_Protection_Reg
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Sector_Protection_Reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase_Sector_Protection_Reg
</UL>

<P><STRONG><a name="[520]"></a>init_flash</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init_flash &rArr; SPI_FLASH_ReadID &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_set_at45db161
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Read_Sector_Protection_Reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase_Sector_Protection_Reg
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_gpio_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[593]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[591]"></a>OSEventNameGet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[596]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[595]"></a>OSEventNameSet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[59c]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[597]"></a>OS_Sched</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBDtxSw
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>

<P><STRONG><a name="[59b]"></a>OS_EventTaskWaitMulti</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[59a]"></a>OSEventPendMulti</STRONG> (Thumb, 686 bytes, Stack size 64 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWaitMulti
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>

<P><STRONG><a name="[59d]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[59f]"></a>OS_TaskStat</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[5a3]"></a>OS_TaskIdle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[5a7]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[18d]"></a>OSInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[5b2]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5b3]"></a>OSSchedUnlock</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[192]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[224]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[195]"></a>OSTimeTick</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[917]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[5d3]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[5b7]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[5b6]"></a>OS_EventTaskRdy</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>

<P><STRONG><a name="[5c5]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[5c2]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[5d8]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[5b8]"></a>OS_TCBInit</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[5bb]"></a>OSMemCreate</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5bc]"></a>OSMemGet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5bd]"></a>OSMemNameGet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[5be]"></a>OSMemNameSet</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[5bf]"></a>OSMemPut</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5c0]"></a>OSMemQuery</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5ac]"></a>OS_MemInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5c1]"></a>OSMutexAccept</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[190]"></a>OSMutexCreate</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c3]"></a>OSMutexDel</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[201]"></a>OSMutexPend</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_master_send_task
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mdbus_send_queue
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_slave_info
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_query_slave_info
</UL>

<P><STRONG><a name="[202]"></a>OSMutexPost</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_master_send_task
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mdbus_send_queue
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuffer_spi_flash
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebuffer_spi_flash
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_read
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_buf_write
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_slave_info
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_query_slave_info
</UL>

<P><STRONG><a name="[5c6]"></a>OSMutexQuery</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1e0]"></a>OSQAccept</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mdbus_send_queue
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_keyboard
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
</UL>

<P><STRONG><a name="[18e]"></a>OSQCreate</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c7]"></a>OSQDel</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[5c8]"></a>OSQFlush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1c9]"></a>OSQPend</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_uA
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_cur
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_more_cur
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_gr_out_cur
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_res
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_arc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_more
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_uA
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_arc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_cur
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_more_cur
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_uA
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_out_v
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_out_v
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_out_v
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_modules
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_subtask
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_master_send_task
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_type
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_par
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_offset_shortcut
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_sel_mode
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_manual
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_del_all
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_del_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_ch_work_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_recover
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_lockkeyboard
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_usb_connect
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_interface
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_set
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_bbd_shortcut
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_manual
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_options_par
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_more
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_res_clear
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_module
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
</UL>

<P><STRONG><a name="[5c9]"></a>OSQPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[53f]"></a>OSQPost</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Det_combination
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectKey
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_slave_info
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_query_slave_info
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_control_test_button_dispose
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_comm_ctrl_status_dispose
</UL>

<P><STRONG><a name="[5ca]"></a>OSQPostFront</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[5cb]"></a>OSQPostOpt</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[5cc]"></a>OSQQuery</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5ad]"></a>OS_QInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e8]"></a>OSSemAccept</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_schedule_task
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_schedule_task
</UL>

<P><STRONG><a name="[18f]"></a>OSSemCreate</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[5cd]"></a>OSSemDel</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[20c]"></a>OSSemPend</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_task
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
</UL>

<P><STRONG><a name="[5ce]"></a>OSSemPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[50b]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[5cf]"></a>OSSemQuery</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5d0]"></a>OSSemSet</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[191]"></a>OSTaskCreate</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d2]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[210]"></a>OSTaskCreateExt</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_other_task
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[225]"></a>OSTaskDel</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[5d5]"></a>OSTaskDelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5d6]"></a>OSTaskNameGet</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[5a2]"></a>OSTaskNameSet</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[1e1]"></a>OSTaskResume</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_schedule_task
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_sample_task
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
</UL>

<P><STRONG><a name="[59e]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[1df]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_schedule_task
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_sample_task
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_keyboard
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[5d7]"></a>OSTaskQuery</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[4d9]"></a>OSTimeDly</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1c5]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_task
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_task
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_polling_task
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_master_polling_task
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_master_send_task
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_type
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_new_del
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_usb_connect
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_of_advance
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_next_dispose
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_restart_dispose
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_con_dispose
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_stop_dispose
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_running
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_check_data
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_wait_usb_connect_gui
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_no_connect_usb_gui
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_dc_gr_send_task_idle
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ask_dc_gr_start_ok
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_pw
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_updata
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_sw_on_warning
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcgr_commuincation_err
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressBar
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Det_combination
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_control_test_button_dispose
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_module
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
</UL>

<P><STRONG><a name="[1e6]"></a>OSTimeDlyResume</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_sample_task
</UL>

<P><STRONG><a name="[5d9]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5da]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5dd]"></a>OSTmrCreate</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Alloc
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[5df]"></a>OSTmrDel</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[5e2]"></a>OSTmrNameGet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[5e3]"></a>OSTmrRemainGet</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[5e4]"></a>OSTmrStateGet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[5e5]"></a>OSTmrStart</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[5e7]"></a>OSTmrStop</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[5e8]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[5ae]"></a>OSTmr_Init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[592]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>

<P><STRONG><a name="[594]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>

<P><STRONG><a name="[5b4]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[599]"></a>BBDtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[5b1]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[47]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a9]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5af]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5ba]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[5d4]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[5a4]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[5a0]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[5d1]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[bb]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[5b9]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[5b5]"></a>OSTimeTickHook</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[5b0]"></a>OSDebugInit</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, os_dbg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[6a9]"></a>m_power_checkres_dispose</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6aa]"></a>m_comm_addr_dispose</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5ea]"></a>m_comm_ctrl_status_dispose</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = m_comm_ctrl_status_dispose &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_keyboard
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5eb]"></a>m_control_test_button_dispose</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = m_control_test_button_dispose &rArr; stop_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_irq
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5ec]"></a>m_delete_file_dispose</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = m_delete_file_dispose &rArr; del_file_for_comm &rArr; read_list &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_exist
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6ab]"></a>m_query_active_file_num_dispose</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6ac]"></a>m_query_active_step_num_dispose</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5ee]"></a>m_catalog_file_dispose</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = m_catalog_file_dispose &rArr; get_appoint_file_msg_for_comm &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_appoint_file_msg_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5f0]"></a>m_insert_step_dispose</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = m_insert_step_dispose &rArr; inster_one_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5f2]"></a>m_delete_step_dispose</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_delete_step_dispose &rArr; del_cur_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_cur_step_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5f4]"></a>m_active_step_front_dispose</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_active_step_front_dispose &rArr; advance_cur_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_cur_step_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5f6]"></a>m_active_step_behind_dispose</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_active_step_behind_dispose &rArr; retreat_cur_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retreat_cur_step_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5f8]"></a>m_inter_change_step_dispose</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_inter_change_step_dispose &rArr; swap_two_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_two_step_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5fa]"></a>m_updata_step_mode_dispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = m_updata_step_mode_dispose &rArr; set_mode_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5fc]"></a>m_system_nrule_dispose</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_system_nrule_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[5fe]"></a>m_system_time_dispose</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = m_system_time_dispose &rArr; set_sys_time_for_comm &rArr; Time_Adjust &rArr; Time_ConvCalendar &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_time_for_comm
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_time_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[601]"></a>m_pass_word_dispose</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = m_pass_word_dispose &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[602]"></a>m_keyklock_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_keyklock_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[604]"></a>m_fail_continue_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_fail_continue_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[605]"></a>m_sys_language_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_sys_language_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[606]"></a>m_test_port_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_test_port_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6ad]"></a>m_reset_stop_dispose</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6ae]"></a>m_check_hint_dispose</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[607]"></a>m_self_check_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_self_check_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[608]"></a>m_test_signal_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_test_signal_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6af]"></a>m_phv_dispose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[609]"></a>m_gfi_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_gfi_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[60a]"></a>m_result_recover_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_result_recover_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[60b]"></a>m_result_save_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_result_save_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[60c]"></a>m_res_remain_hint_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_res_remain_hint_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[60d]"></a>m_sys_volume_dispose</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_sys_volume_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[60e]"></a>m_sys_contrast_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = m_sys_contrast_dispose &rArr; set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_par_for_comm
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[60f]"></a>m_dut_name_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = m_dut_name_dispose &rArr; set_dut_name_for_comm &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dut_name_for_comm
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dut_name_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[612]"></a>m_result_fetch_dispose</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = m_result_fetch_dispose &rArr; get_result_fetch_for_comm &rArr; change_result_to_string_comm &rArr; transform_time_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_fetch_for_comm
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_result_fetch_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[615]"></a>m_result_clear_dispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = m_result_clear_dispose &rArr; clear_all_res_for_comm &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_all_res_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[617]"></a>m_result_fail_dispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_result_fail_dispose &rArr; get_result_info_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_info_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[619]"></a>m_result_pass_dispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_result_pass_dispose &rArr; get_result_info_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_info_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[61a]"></a>m_result_used_num_dispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_result_used_num_dispose &rArr; get_result_info_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_info_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[61b]"></a>m_result_remain_num_dispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_result_remain_num_dispose &rArr; get_result_info_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_info_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[61c]"></a>m_result_total_num_dispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_result_total_num_dispose &rArr; get_result_info_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_info_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[61d]"></a>m_test_ports_dispose</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = m_test_ports_dispose &rArr; set_test_port_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_port_for_comm
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_port_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[620]"></a>m_ir_auto_shift_dispose</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = m_ir_auto_shift_dispose &rArr; get_ir_auto_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_auto_for_comm
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ir_auto_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[623]"></a>m_com_steps_cont_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_com_steps_cont_dispose &rArr; set_steps_cont_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_steps_cont_for_comm
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steps_cont_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[626]"></a>m_com_steps_pass_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_com_steps_pass_dispose &rArr; set_pass_signal_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_signal_for_comm
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pass_signal_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[629]"></a>m_com_delay_t_dispose</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = m_com_delay_t_dispose &rArr; set_timer_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_for_comm
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[62c]"></a>m_com_change_t_dispose</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = m_com_change_t_dispose &rArr; set_timer_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_for_comm
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[62d]"></a>m_com_inter_t_dispose</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = m_com_inter_t_dispose &rArr; set_timer_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_for_comm
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[62e]"></a>m_com_fall_t_dispose</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = m_com_fall_t_dispose &rArr; set_timer_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_for_comm
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[62f]"></a>m_com_test_t_dispose</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = m_com_test_t_dispose &rArr; set_timer_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_for_comm
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[630]"></a>m_com_rise_t_dispose</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = m_com_rise_t_dispose &rArr; set_timer_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_for_comm
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[631]"></a>m_com_frequency_dispose</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = m_com_frequency_dispose &rArr; set_hz_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hz_for_comm
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hz_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[634]"></a>m_com_arc_dispose</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_com_arc_dispose &rArr; set_arc_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_arc_for_comm
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_arc_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[637]"></a>m_com_current_dispose</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = m_com_current_dispose &rArr; get_vol_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_for_comm
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vol_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[63a]"></a>m_com_charge_current_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_com_charge_current_dispose &rArr; set_charge_cur_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_charge_cur_for_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_charge_cur_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[63d]"></a>m_com_real_current_dispose</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = m_com_real_current_dispose &rArr; get_real_cur_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_cur_for_comm
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_real_cur_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[640]"></a>m_com_cur_low_dispose</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_com_cur_low_dispose &rArr; get_low_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_for_comm
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[643]"></a>m_com_cur_offset_dispose</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_com_cur_offset_dispose &rArr; set_offset_value_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_offset_value_for_comm
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_value_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[646]"></a>m_com_cur_high_dispose</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = m_com_cur_high_dispose &rArr; set_high_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_for_comm
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[649]"></a>m_com_cur_gear_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = m_com_cur_gear_dispose &rArr; set_gear_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gear_for_comm
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gear_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[64c]"></a>m_com_voltage_dispose</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = m_com_voltage_dispose &rArr; get_vol_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_for_comm
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vol_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[64d]"></a>m_com_mode_dispose</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = m_com_mode_dispose &rArr; set_mode_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mode_for_comm
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[64f]"></a>m_bbd_open_check_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = m_bbd_open_check_dispose &rArr; set_bbd_open_check_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bbd_open_check_for_comm
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bbd_open_check_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[652]"></a>m_bbd_short_check_dispose</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = m_bbd_short_check_dispose &rArr; set_bbd_short_check_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bbd_short_check_for_comm
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bbd_short_check_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[655]"></a>m_swap_steps_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_swap_steps_dispose &rArr; swap_two_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_two_step_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[656]"></a>m_move_forward_dispose</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_move_forward_dispose &rArr; retreat_cur_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retreat_cur_step_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[657]"></a>m_move_backward_dispose</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_move_backward_dispose &rArr; advance_cur_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_cur_step_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[658]"></a>m_test_mode_dispose</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = m_test_mode_dispose &rArr; set_mode_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mode_for_comm
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[659]"></a>m_test_fetch_msg_dispose</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = m_test_fetch_msg_dispose &rArr; get_test_fetch_for_comm &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plc_relay_status_for_comm
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_fetch_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[65c]"></a>m_get_cap_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_get_cap_dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cap_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[65e]"></a>m_get_offset_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_get_offset_dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_offset_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[660]"></a>m_plc_status_dispose</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_plc_status_dispose &rArr; get_plc_relay_status_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plc_relay_status_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[661]"></a>m_test_status_dispose</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_test_status_dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_testing_status_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[918]"></a>m_set_plc_st_dispose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_interface.o(.text), UNUSED)

<P><STRONG><a name="[663]"></a>m_del_all_file_dispose</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = m_del_all_file_dispose &rArr; del_all_file_for_comm &rArr; del_all_file &rArr; save_all_file &rArr; save_all_file_flash &rArr; save_file_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[665]"></a>m_step_msg_dispose</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = m_step_msg_dispose &rArr; get_active_step_msg_for_comm &rArr; get_hz_for_comm_f &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_step_msg_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[667]"></a>m_file_msg_dispose</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = m_file_msg_dispose &rArr; get_active_file_msg_for_comm &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_file_msg_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[669]"></a>m_set_active_step_dispose</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = m_set_active_step_dispose &rArr; active_appoint_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_appoint_step_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[66b]"></a>m_set_active_file_dispose</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = m_set_active_file_dispose &rArr; active_appoint_file_for_comm &rArr; read_list &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_appoint_file_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[66d]"></a>m_save_file_dispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = m_save_file_dispose &rArr; app_save_file_for_comm &rArr; save_as_cur_group &rArr; save_as_cur_group_flash &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_save_file_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[66f]"></a>m_edit_file_dispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = m_edit_file_dispose &rArr; app_edit_file_for_comm &rArr; save_file &rArr; save_file_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_edit_file_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[671]"></a>m_new_file_dispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = m_new_file_dispose &rArr; app_new_file_for_comm &rArr; insert_step &rArr; save_one_step &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[673]"></a>m_id_msg_dispose</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = m_id_msg_dispose &rArr; get_idn_msg_for_comm &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idn_msg_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[675]"></a>m_rst_dispose</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = m_rst_dispose &rArr; tester_reset_for_comm &rArr; stop_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tester_reset_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6b0]"></a>m_tester_info_dispose</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6b1]"></a>m_comm_bps_dispose</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6b2]"></a>m_comm_sw_status_dispose</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6b3]"></a>m_plc_sw_status_dispose</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[677]"></a>m_sys_par_usb_dispose</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = m_sys_par_usb_dispose &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[678]"></a>m_sys_flag_usb_dispose</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = m_sys_flag_usb_dispose &rArr; save_sys_flag &rArr; save_sys_flag_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[679]"></a>m_file_list_usb_dispose</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = m_file_list_usb_dispose &rArr; save_file &rArr; save_file_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[67a]"></a>m_step_used_flag_base_dispose</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = m_step_used_flag_base_dispose &rArr; save_step_used_flag &rArr; save_step_used_flag_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_step_used_flag
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_used_flag_for_comm
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[67c]"></a>m_group_table_base_dispose</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = m_group_table_base_dispose &rArr; save_group_table &rArr; save_group_table_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_table
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_group_table_for_comm
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[67e]"></a>m_mem_group_base_usb_dispose</STRONG> (Thumb, 90 bytes, Stack size 88 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = m_mem_group_base_usb_dispose &rArr; set_group_steps_for_comm &rArr; save_one_step &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_group_steps_for_comm
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6b4]"></a>m_data_loading_end_dispose</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[680]"></a>m_result_usb_dispose</STRONG> (Thumb, 76 bytes, Stack size 80 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = m_result_usb_dispose &rArr; change_result_to_string &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6b5]"></a>m_result_info_dispose</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6b6]"></a>m_result_one_usb_dispose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[681]"></a>m_sys_par_len_usb_dispose</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_sys_par_len_usb_dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_group_table_size
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_used_flag_size
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6b7]"></a>m_file_steps_num_usb_dispose</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_file_steps_num_usb_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[684]"></a>m_get_tester_type_usb_dispose</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_get_tester_type_usb_dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6b8]"></a>m_usb_connect_status_dispose</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6b9]"></a>m_cylinder_ctrl_status_dispose</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[6ba]"></a>m_auto_cal_dispose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[685]"></a>m_get_interface_info_dispose</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_get_interface_info_dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[686]"></a>m_cal_enter_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_cal_enter_dispose &rArr; enter_auto_cal_ui_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_auto_cal_ui_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[688]"></a>m_cal_exit_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_cal_exit_dispose &rArr; exit_auto_cal_ui_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_auto_cal_ui_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[68a]"></a>m_cal_status_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = m_cal_status_dispose &rArr; get_cal_status_for_comm &rArr; get_auto_cal_status &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_status_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[68c]"></a>m_cal_mode_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = m_cal_mode_dispose &rArr; get_cal_mode_for_comm &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_mode_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[68e]"></a>m_cal_range_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = m_cal_range_dispose &rArr; get_cal_range_for_comm &rArr; get_cur_point_range &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_range_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[690]"></a>m_cal_start_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_cal_start_dispose &rArr; auto_cal_start_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_start_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[692]"></a>m_cal_stop_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_cal_stop_dispose &rArr; auto_cal_stop_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_stop_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[694]"></a>m_cal_measure_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_cal_measure_dispose &rArr; set_cal_measure_for_comm &rArr; set_auto_cal_measure
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cal_measure_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[696]"></a>m_cal_points_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = m_cal_points_dispose &rArr; get_cal_points_for_comm &rArr; get_auto_cal_points &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_points_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[698]"></a>m_cal_load_dispose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_cal_load_dispose &rArr; load_cal_point_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cal_point_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
</UL>

<P><STRONG><a name="[204]"></a>mb_send_cmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mb_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mb_send_cmd &rArr; eMBMasterReqReadWriteMultipleHoldingRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterReqReadWriteMultipleHoldingRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_master_send_task
</UL>

<P><STRONG><a name="[69b]"></a>mb_query_slave_info</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, mb_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mb_query_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_fetch_short_dc_module_bridge
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_fetch_dc_module_bridge
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_info_dc_module_bridge
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_data_dc_module_bridge
</UL>

<P><STRONG><a name="[69c]"></a>mb_set_slave_info</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, mb_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vol_gear_dc_module_bridge
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_method_dc_module_bridge
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_stop_dc_module_bridge
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_start_dc_module_bridge
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_dc_module_bridge
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dac_value_dc_module_bridge
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cal_data_dc_module_bridge
</UL>

<P><STRONG><a name="[69d]"></a>user_read_write_mult_hold_reg_hook_m</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, mb_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = user_read_write_mult_hold_reg_hook_m &rArr; m_dc_module_cal_data_dispose &rArr; find_dc_gr_map_ratio_n
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_vol_gear_dispose
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_test_method_dispose
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_test_fetch_short_dispose
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_test_fetch_dispose
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_stop_dispose
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_start_dispose
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_set_data_dispose
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_info_dispose
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_dac_dispose
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_cal_data_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterFuncReadWriteMultipleHoldingRegister
</UL>

<P><STRONG><a name="[6a8]"></a>user_read_write_mult_hold_reg_hook_s</STRONG> (Thumb, 1518 bytes, Stack size 16 bytes, mb_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = user_read_write_mult_hold_reg_hook_s &rArr; m_com_cur_high_dispose &rArr; set_high_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_load_dispose
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_points_dispose
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_measure_dispose
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_stop_dispose
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_start_dispose
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_range_dispose
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_mode_dispose
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_status_dispose
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_exit_dispose
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_enter_dispose
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_get_interface_info_dispose
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_auto_cal_dispose
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cylinder_ctrl_status_dispose
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_usb_connect_status_dispose
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_get_tester_type_usb_dispose
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_file_steps_num_usb_dispose
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_par_len_usb_dispose
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_one_usb_dispose
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_info_dispose
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_usb_dispose
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_data_loading_end_dispose
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_group_base_usb_dispose
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_group_table_base_dispose
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_step_used_flag_base_dispose
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_file_list_usb_dispose
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_flag_usb_dispose
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_par_usb_dispose
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_plc_sw_status_dispose
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_comm_sw_status_dispose
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_comm_bps_dispose
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tester_info_dispose
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rst_dispose
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_id_msg_dispose
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_new_file_dispose
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_edit_file_dispose
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_save_file_dispose
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_set_active_file_dispose
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_set_active_step_dispose
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_file_msg_dispose
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_step_msg_dispose
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_del_all_file_dispose
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_status_dispose
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_plc_status_dispose
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_get_offset_dispose
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_get_cap_dispose
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_fetch_msg_dispose
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_mode_dispose
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_move_backward_dispose
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_move_forward_dispose
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_swap_steps_dispose
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bbd_short_check_dispose
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bbd_open_check_dispose
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_mode_dispose
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_voltage_dispose
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_gear_dispose
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_high_dispose
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_offset_dispose
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_low_dispose
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_real_current_dispose
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_charge_current_dispose
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_current_dispose
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_arc_dispose
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_frequency_dispose
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_rise_t_dispose
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_test_t_dispose
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_fall_t_dispose
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_inter_t_dispose
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_change_t_dispose
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_delay_t_dispose
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_steps_pass_dispose
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_steps_cont_dispose
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_auto_shift_dispose
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_ports_dispose
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_total_num_dispose
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_remain_num_dispose
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_used_num_dispose
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_pass_dispose
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_fail_dispose
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_clear_dispose
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_fetch_dispose
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dut_name_dispose
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_contrast_dispose
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_volume_dispose
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_res_remain_hint_dispose
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_save_dispose
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_recover_dispose
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gfi_dispose
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_phv_dispose
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_signal_dispose
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_self_check_dispose
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_check_hint_dispose
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_reset_stop_dispose
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_port_dispose
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_language_dispose
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fail_continue_dispose
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyklock_dispose
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pass_word_dispose
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_time_dispose
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_nrule_dispose
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_updata_step_mode_dispose
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_inter_change_step_dispose
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_active_step_behind_dispose
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_active_step_front_dispose
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_delete_step_dispose
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_insert_step_dispose
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_catalog_file_dispose
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_query_active_step_num_dispose
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_query_active_file_num_dispose
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_delete_file_dispose
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_control_test_button_dispose
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_comm_ctrl_status_dispose
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_comm_addr_dispose
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_power_checkres_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
</UL>

<P><STRONG><a name="[1eb]"></a>eMBInit</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdbus_init
</UL>

<P><STRONG><a name="[6bd]"></a>eMBRegisterCB</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>

<P><STRONG><a name="[919]"></a>eMBClose</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>eMBEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdbus_init
</UL>

<P><STRONG><a name="[91a]"></a>eMBDisable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mb.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>eMBPoll</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_polling_task
</UL>

<P><STRONG><a name="[3b]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, mbfuncholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; user_read_write_mult_hold_reg_hook_s &rArr; m_com_cur_high_dispose &rArr; set_high_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_s
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[6c4]"></a>eMBSetSlaveID</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mbfuncother.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3a]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbfuncother.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mb_m.o(.data)
<LI> mb.o(.data)
</UL>
<P><STRONG><a name="[6dc]"></a>xMBUtilSetBits</STRONG> (Thumb, 96 bytes, Stack size 28 bytes, mbutils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[6db]"></a>xMBUtilGetBits</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, mbutils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[6c3]"></a>prveMBError2Exception</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mbutils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterFuncReadWriteMultipleHoldingRegister
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
</UL>

<P><STRONG><a name="[6ca]"></a>usMBCRC16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mbcrc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUSend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUReceive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[6bb]"></a>eMBRTUInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[bc]"></a>eMBRTUStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBRTUStart &rArr; vMBPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>eMBRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBRTUStop &rArr; vMBPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>eMBRTUReceive</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>eMBRTUSend</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = eMBRTUSend &rArr; vMBPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUReceiveFSM &rArr; xMBPortSerialGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app.o(.text)
<LI> mb.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xMBRTUTransmitFSM &rArr; vMBPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app.o(.text)
<LI> mb.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBRTUTimerT35Expired &rArr; vMBPortTimersDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[6be]"></a>EnterCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUSend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUReceive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStart
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUInit
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegisterCB
</UL>

<P><STRONG><a name="[6bf]"></a>ExitCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUSend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUReceive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStart
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUInit
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegisterCB
</UL>

<P><STRONG><a name="[6bc]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[6c1]"></a>xMBPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
</UL>

<P><STRONG><a name="[6c0]"></a>xMBPortEventGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, portevent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[6c7]"></a>vMBPortSerialEnable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vMBPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[6ce]"></a>vMBPortClose</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, portserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>

<P><STRONG><a name="[6c5]"></a>xMBPortSerialInit</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = xMBPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[6cc]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBPortSerialPutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[6cb]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBPortSerialGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[6e]"></a>USART1_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTRxISR
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c6]"></a>xMBPortTimersInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, porttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xMBPortTimersInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[6c8]"></a>vMBPortTimersEnable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, porttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[6c9]"></a>vMBPortTimersDisable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, porttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimersDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[67]"></a>TIM4_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, porttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvTIMERExpiredISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d7]"></a>eMBRegInputCB</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, user_mb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>

<P><STRONG><a name="[6c2]"></a>eMBRegHoldingCB</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, user_mb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterFuncReadWriteMultipleHoldingRegister
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
</UL>

<P><STRONG><a name="[6da]"></a>eMBRegCoilsCB</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, user_mb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
</UL>

<P><STRONG><a name="[6dd]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, user_mb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
</UL>

<P><STRONG><a name="[91b]"></a>eMBMasterReqReadFile</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, mbfuncfile_m.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>eMBMasterFuncReadFile</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbfuncfile_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>eMBMasterFuncWriteFile</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbfuncfile_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(.data)
</UL>
<P><STRONG><a name="[69a]"></a>eMBMasterReqReadWriteMultipleHoldingRegister</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, mbfuncholding_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBMasterReqReadWriteMultipleHoldingRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortEventPost
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetIsBusy
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetPDUSndLength
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetDestAddress
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterGetPDUSndBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_send_cmd
</UL>

<P><STRONG><a name="[3c]"></a>eMBMasterFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, mbfuncholding_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = eMBMasterFuncReadWriteMultipleHoldingRegister &rArr; user_read_write_mult_hold_reg_hook_m &rArr; m_dc_module_cal_data_dispose &rArr; find_dc_gr_map_ratio_n
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterGetPDUSndBuf
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(.data)
</UL>
<P><STRONG><a name="[6e3]"></a>eMBMasterRTUInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mbrtu_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = eMBMasterRTUInit &rArr; xMBMasterPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterInit
</UL>

<P><STRONG><a name="[12b]"></a>eMBMasterRTUStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbrtu_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBMasterRTUStart &rArr; vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>eMBMasterRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBMasterRTUStop &rArr; vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>eMBMasterRTUReceive</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mbrtu_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBMasterRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>eMBMasterRTUSend</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, mbrtu_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = eMBMasterRTUSend &rArr; vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>xMBMasterRTUReceiveFSM</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, mbrtu_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xMBMasterRTUReceiveFSM &rArr; vMBMasterPortTimersT35Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialGetByte
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>xMBMasterRTUTransmitFSM</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, mbrtu_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xMBMasterRTUTransmitFSM &rArr; vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialPutByte
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>xMBMasterRTUTimerExpired</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, mbrtu_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBMasterRTUTimerExpired &rArr; vMBMasterPortTimersDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetIsBusy
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(.text)
</UL>
<P><STRONG><a name="[91c]"></a>vMBMasterGetRTUSndBuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbrtu_m.o(.text), UNUSED)

<P><STRONG><a name="[6df]"></a>vMBMasterGetPDUSndBuf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbrtu_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterReqReadWriteMultipleHoldingRegister
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterFuncReadWriteMultipleHoldingRegister
</UL>

<P><STRONG><a name="[6e1]"></a>vMBMasterSetPDUSndLength</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbrtu_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterReqReadWriteMultipleHoldingRegister
</UL>

<P><STRONG><a name="[722]"></a>ucMBMasterGetPDUSndLength</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbrtu_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
</UL>

<P><STRONG><a name="[729]"></a>vMBMasterSetCurTimerMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbrtu_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
</UL>

<P><STRONG><a name="[71f]"></a>xMBMasterPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterInit
</UL>

<P><STRONG><a name="[6e2]"></a>xMBMasterPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterReqReadWriteMultipleHoldingRegister
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTimerExpired
</UL>

<P><STRONG><a name="[720]"></a>xMBMasterPortEventGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, portevent_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
</UL>

<P><STRONG><a name="[69e]"></a>m_dc_module_cal_data_dispose</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mb_dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = m_dc_module_cal_data_dispose &rArr; find_dc_gr_map_ratio_n
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dc_gr_map_ratio_n
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
</UL>

<P><STRONG><a name="[69f]"></a>m_dc_module_dac_dispose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
</UL>

<P><STRONG><a name="[6a0]"></a>m_dc_module_start_dispose</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mb_dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_dc_module_start_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
</UL>

<P><STRONG><a name="[6a1]"></a>m_dc_module_stop_dispose</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mb_dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_dc_module_stop_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
</UL>

<P><STRONG><a name="[6a2]"></a>m_dc_module_test_fetch_dispose</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mb_dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_dc_module_test_fetch_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
</UL>

<P><STRONG><a name="[6a3]"></a>m_dc_module_test_fetch_short_dispose</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mb_dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_dc_module_test_fetch_short_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
</UL>

<P><STRONG><a name="[6a4]"></a>m_dc_module_vol_gear_dispose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
</UL>

<P><STRONG><a name="[6a5]"></a>m_dc_module_test_method_dispose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
</UL>

<P><STRONG><a name="[6a7]"></a>m_dc_module_set_data_dispose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
</UL>

<P><STRONG><a name="[6a6]"></a>m_dc_module_info_dispose</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mb_dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = m_dc_module_info_dispose &rArr; select_dc_gr_moduls
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_dc_gr_moduls
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_write_mult_hold_reg_hook_m
</UL>

<P><STRONG><a name="[91d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[91e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[91f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[422]"></a>mystrcat</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mystrcat &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;front_add_space_at_string
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
</UL>

<P><STRONG><a name="[423]"></a>front_add_space_at_string</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = front_add_space_at_string &rArr; mystrcat &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrcat
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
</UL>

<P><STRONG><a name="[920]"></a>init_test_gui_area_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_draw.o(.text), UNUSED)

<P><STRONG><a name="[6ef]"></a>GUI_DispFloatFixAt</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[3aa]"></a>draw_colon</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = draw_colon &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_par
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_options_par
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
</UL>

<P><STRONG><a name="[921]"></a>save_par_to_array</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, gui_draw.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>save_par_to_ram</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gui_draw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_par
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_options_par
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sys
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
</UL>

<P><STRONG><a name="[6f0]"></a>draw_one_par_info</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
</UL>

<P><STRONG><a name="[3d9]"></a>read_par_to_buf</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_par_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_cal_medium_name
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_res_medium_name
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_par_medium_name
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_amp_type_name
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_plc_signal_options_list
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_filtering_deep_options_list
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sys
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
</UL>

<P><STRONG><a name="[3a8]"></a>load_this_page_info</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gui_draw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_par
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_options_par
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
</UL>

<P><STRONG><a name="[3a9]"></a>load_this_page_value</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = load_this_page_value &rArr; draw_one_par_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par_to_buf
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_par
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_options_par
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
</UL>

<P><STRONG><a name="[29d]"></a>div_str_pre_zero</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = div_str_pre_zero &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_time
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_vol1
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
</UL>

<P><STRONG><a name="[41c]"></a>ten_power</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_draw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_ir_res_out_range_loop_to_string
</UL>

<P><STRONG><a name="[41a]"></a>mysprintf</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ten_power
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_time_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gr_measure
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_res_to_string
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_cur_to_string
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_vol_to_string
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_gear_to_string
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_da_ad_to_string
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_num_to_string
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_gr_cur_string
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_gr_vol
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_cur
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_ir_gear_up_limit_to_string
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_ir_rang
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_short_ratio_to_string_comm
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_open_ratio_to_string_comm
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_out_result_to_string_comm
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_other_option
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_out_result_to_string
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_ir_res_out_range_loop_to_string
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_ir_res_loop_to_string
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_step_msg_for_comm
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_fetch_for_comm
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hz_for_comm_f
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hz_for_comm
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_arc_for_comm
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_charge_cur_for_comm
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_cur_for_comm
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_offset_value_for_comm
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_for_comm
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_for_comm
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_for_comm
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bbd_short_check_for_comm
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bbd_open_check_for_comm
</UL>

<P><STRONG><a name="[6f1]"></a>cursor_pos_n</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_more_options_gui
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_options_sel_gui
</UL>

<P><STRONG><a name="[1da]"></a>cursor_pos</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos_n
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_subtask
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor_l
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cursor_pos
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_cursor_pos
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cursor
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_sel_mode
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_del_all
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_del_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_ch_work_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_recover
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_lockkeyboard
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_set
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_res_clear
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_pwkey
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
</UL>

<P><STRONG><a name="[3cf]"></a>dis_cursor_pos</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dis_cursor_pos &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
</UL>

<P><STRONG><a name="[3bc]"></a>dis_cursor</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dis_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
</UL>

<P><STRONG><a name="[1de]"></a>shift_cursor</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_charkey
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_pwkey
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
</UL>

<P><STRONG><a name="[1dd]"></a>shift_cursor_l</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = shift_cursor_l &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
</UL>

<P><STRONG><a name="[249]"></a>change_data</STRONG> (Thumb, 564 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = change_data &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ten_power
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_charkey
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_timekey
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_pwkey
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
</UL>

<P><STRONG><a name="[3c6]"></a>my_sprintf</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = my_sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ten_power
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
</UL>

<P><STRONG><a name="[244]"></a>update_data</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ten_power
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_charkey
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_timekey
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_pwkey
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
</UL>

<P><STRONG><a name="[1f4]"></a>clear_</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = clear_ &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_subtask
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_custom_type_gui
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_offset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_file_management
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_to_board
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_fail
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_recover
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_keyboard_lock_manage
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_interface
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_calibration_gui
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_pass
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bbd
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_time_manage
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test_result
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_agreement
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_plc
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_sw_on_warning
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcgr_commuincation_err
</UL>

<P><STRONG><a name="[23a]"></a>clear_menu</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = clear_menu &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_uA
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_cur
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_more_cur
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_gr_out_cur
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_res
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_arc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_more
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_uA
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_arc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_cur
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_more_cur
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_uA
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_out_v
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_out_v
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_out_v
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_offset_shortcut
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_manual
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_bbd_shortcut
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_manual
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_draw_test_ui
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_select_cal_dc_gr_gui
</UL>

<P><STRONG><a name="[6f3]"></a>clear_menu_n</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = clear_menu_n &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_str
</UL>

<P><STRONG><a name="[3c7]"></a>gui_par_inval</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = gui_par_inval &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
</UL>

<P><STRONG><a name="[3c1]"></a>gui_g_mode_inval</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = gui_g_mode_inval &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
</UL>

<P><STRONG><a name="[6f4]"></a>ratio_broken</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>

<P><STRONG><a name="[376]"></a>cal_warning</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = cal_warning &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[50a]"></a>auto_cal_pass</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = auto_cal_pass &rArr; clear_ &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
</UL>

<P><STRONG><a name="[32f]"></a>rate_of_advance</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = rate_of_advance &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
</UL>

<P><STRONG><a name="[6f5]"></a>type_mismatch</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>

<P><STRONG><a name="[6f6]"></a>dis_set_port</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[3c4]"></a>ports_cursor_pos</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = ports_cursor_pos &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
</UL>

<P><STRONG><a name="[6f7]"></a>gui_dis_float_at</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>

<P><STRONG><a name="[6f8]"></a>more_options_sel_gui</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos_n
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_vol_sel_gui
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_sel_gui
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_sel_gui
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_cur_sel_gui
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_option_sel_gui
</UL>

<P><STRONG><a name="[3cd]"></a>dcw_cur_sel_gui</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = dcw_cur_sel_gui &rArr; more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_options_sel_gui
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
</UL>

<P><STRONG><a name="[3ca]"></a>acw_gr_hz_sel_gui</STRONG> (Thumb, 1760 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = acw_gr_hz_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
</UL>

<P><STRONG><a name="[3ab]"></a>ac_cur_sel_gui</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ac_cur_sel_gui &rArr; more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_options_sel_gui
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
</UL>

<P><STRONG><a name="[46f]"></a>sys_option_sel_gui</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sys_option_sel_gui &rArr; more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_options_sel_gui
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
</UL>

<P><STRONG><a name="[6f9]"></a>draw_bitmap_circle</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = draw_bitmap_circle &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_more_options_gui
</UL>

<P><STRONG><a name="[3cb]"></a>draw_more_options_gui</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = draw_more_options_gui &rArr; draw_bitmap_circle &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap_circle
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos_n
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_par
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_options_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
</UL>

<P><STRONG><a name="[3d1]"></a>gr_vol_sel_gui</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = gr_vol_sel_gui &rArr; more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_options_sel_gui
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
</UL>

<P><STRONG><a name="[3c0]"></a>mode_sel_gui</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = mode_sel_gui &rArr; more_options_sel_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_options_sel_gui
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
</UL>

<P><STRONG><a name="[6fa]"></a>dcgr_commuincation_err</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[6fb]"></a>cal_sw_on_warning</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[43a]"></a>draw_wait_usb_connect_gui</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = draw_wait_usb_connect_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Refresh_Rect
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_usb_connect
</UL>

<P><STRONG><a name="[509]"></a>draw_auto_calibration_gui</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = draw_auto_calibration_gui &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
</UL>

<P><STRONG><a name="[43b]"></a>draw_no_connect_usb_gui</STRONG> (Thumb, 550 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = draw_no_connect_usb_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_usb_connect
</UL>

<P><STRONG><a name="[37c]"></a>gui_draw_build_connect_to_board</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = gui_draw_build_connect_to_board &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[37d]"></a>gui_draw_build_connect_fail</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = gui_draw_build_connect_fail &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[404]"></a>gui_draw_dc_gr_module_comm_fail</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = gui_draw_dc_gr_module_comm_fail &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[6fc]"></a>gui_draw_dc_gr_module_being_in_comm</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = gui_draw_dc_gr_module_being_in_comm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_module
</UL>

<P><STRONG><a name="[37e]"></a>gui_draw_self_check</STRONG> (Thumb, 1088 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = gui_draw_self_check &rArr; ProgressBar &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Refresh_Rect
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressBar
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[3bb]"></a>draw_menu_frame_line</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = draw_menu_frame_line &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_custom_type_gui
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_offset
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_file_management
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_recover
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_keyboard_lock_manage
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_interface
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bbd
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_time_manage
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test_result
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_password_manage
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu_sys
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_3
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_2
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_1
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_drow_test_syn
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_agreement
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_plc
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csallwin_mian_ui
</UL>

<P><STRONG><a name="[3e3]"></a>draw_short_cut_str</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = draw_short_cut_str &rArr; clear_menu_n &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu_n
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_modules
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scan_modules_gui
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csallwin_mian_ui
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
</UL>

<P><STRONG><a name="[6fe]"></a>csallwin_mian_ui</STRONG> (Thumb, 248 bytes, Stack size 104 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = csallwin_mian_ui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_str
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_main
</UL>

<P><STRONG><a name="[922]"></a>custom_type_main_gui</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_draw.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>gui_draw_main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = gui_draw_main &rArr; csallwin_mian_ui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csallwin_mian_ui
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
</UL>

<P><STRONG><a name="[3b4]"></a>MenuTitle</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MenuTitle &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_title_step
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test_result
</UL>

<P><STRONG><a name="[6ff]"></a>syn_test_menu_title</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[3c3]"></a>draw_port_for_set</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = draw_port_for_set &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
</UL>

<P><STRONG><a name="[2ab]"></a>dis_port</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dis_port &rArr; draw_port &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_port
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
</UL>

<P><STRONG><a name="[3c9]"></a>gui_draw_set_sys_cur_limit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
</UL>

<P><STRONG><a name="[253]"></a>draw_short_cut_bm</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_subtask
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_custom_type_gui
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_offset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_sel_mode
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_file_management
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_recover
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_keyboard_lock_manage
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_interface
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bbd
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_time_manage
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test_result
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_password_manage
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sys
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu_sys
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_3
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_2
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_1
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_par_info
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scan_modules_gui
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_drow_test_syn
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_agreement
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_plc
</UL>

<P><STRONG><a name="[3db]"></a>gui_draw_menu_sys</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = gui_draw_menu_sys &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_subtask
</UL>

<P><STRONG><a name="[1c8]"></a>gui_draw_menu</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_type
</UL>

<P><STRONG><a name="[1d6]"></a>draw_custom_type_gui</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = draw_custom_type_gui &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
</UL>

<P><STRONG><a name="[3e0]"></a>gui_draw_help_1</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gui_draw_help_1 &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
</UL>

<P><STRONG><a name="[3e1]"></a>gui_draw_help_2</STRONG> (Thumb, 750 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gui_draw_help_2 &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
</UL>

<P><STRONG><a name="[3e2]"></a>gui_draw_help_3</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gui_draw_help_3 &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
</UL>

<P><STRONG><a name="[398]"></a>gui_draw_file_management</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gui_draw_file_management &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
</UL>

<P><STRONG><a name="[334]"></a>gui_draw_communication_interface</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = gui_draw_communication_interface &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_interface_config
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_interface
</UL>

<P><STRONG><a name="[701]"></a>gui_draw_communication_plc</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>

<P><STRONG><a name="[702]"></a>gui_draw_communication_agreement</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>

<P><STRONG><a name="[3ea]"></a>gui_draw_password_manage</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gui_draw_password_manage &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
</UL>

<P><STRONG><a name="[474]"></a>gui_draw_time_manage</STRONG> (Thumb, 738 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = gui_draw_time_manage &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
</UL>

<P><STRONG><a name="[3a3]"></a>gui_draw_offset</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gui_draw_offset &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
</UL>

<P><STRONG><a name="[4d8]"></a>gui_draw_bbd</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gui_draw_bbd &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
</UL>

<P><STRONG><a name="[43f]"></a>gui_draw_test_result</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gui_draw_test_result &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTitle
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
</UL>

<P><STRONG><a name="[341]"></a>gui_draw_keyboard_lock_manage</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gui_draw_keyboard_lock_manage &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_lockkeyboard
</UL>

<P><STRONG><a name="[342]"></a>gui_draw_recover</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gui_draw_recover &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_recover
</UL>

<P><STRONG><a name="[2f9]"></a>gui_draw_test</STRONG> (Thumb, 688 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = gui_draw_test &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_str
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_next_dispose
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_restart_dispose
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_stop_dispose
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
</UL>

<P><STRONG><a name="[703]"></a>gui_drow_test_syn</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, gui_draw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
</UL>

<P><STRONG><a name="[21a]"></a>prompt_recover_pw</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = prompt_recover_pw &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off_keyboard
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[220]"></a>dis_program_info</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = dis_program_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[3e4]"></a>dis_interface_info</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = dis_interface_info &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
</UL>

<P><STRONG><a name="[704]"></a>dis_scan_modules_gui</STRONG> (Thumb, 604 bytes, Stack size 24 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = dis_scan_modules_gui &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_modules
</UL>

<P><STRONG><a name="[70c]"></a>get_cur_gear_par_form</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_charge_cur_for_comm
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_cur_for_comm
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_offset_value_for_comm
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_for_comm
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_for_comm
</UL>

<P><STRONG><a name="[70b]"></a>get_vol_gear_par_form</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_for_comm
</UL>

<P><STRONG><a name="[42d]"></a>getTestMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_step_msg_for_comm
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_fetch_for_comm
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mode_for_comm
</UL>

<P><STRONG><a name="[705]"></a>check_step_exist</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_exist_for_comm
</UL>

<P><STRONG><a name="[707]"></a>init_file_group</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, cs99xx_for_comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_file
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_step_used_flag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_group_table
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[66e]"></a>app_save_file_for_comm</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = app_save_file_for_comm &rArr; save_as_cur_group &rArr; save_as_cur_group_flash &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_save_file_dispose
</UL>

<P><STRONG><a name="[670]"></a>app_edit_file_for_comm</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = app_edit_file_for_comm &rArr; save_file &rArr; save_file_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileArcType_f
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileModeType_f
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_edit_file_dispose
</UL>

<P><STRONG><a name="[672]"></a>app_new_file_for_comm</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = app_new_file_for_comm &rArr; insert_step &rArr; save_one_step &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_step_used_flag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_group_table
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetTime
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileArcType_f
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileModeType_f
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_new_file_dispose
</UL>

<P><STRONG><a name="[5ed]"></a>del_file_for_comm</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = del_file_for_comm &rArr; read_list &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_delete_file_dispose
</UL>

<P><STRONG><a name="[664]"></a>del_all_file_for_comm</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = del_all_file_for_comm &rArr; del_all_file &rArr; save_all_file &rArr; save_all_file_flash &rArr; save_file_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_del_all_file_dispose
</UL>

<P><STRONG><a name="[674]"></a>get_idn_msg_for_comm</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_idn_msg_for_comm &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_id_msg_dispose
</UL>

<P><STRONG><a name="[676]"></a>tester_reset_for_comm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tester_reset_for_comm &rArr; stop_irq &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rst_dispose
</UL>

<P><STRONG><a name="[5f1]"></a>inster_one_step_for_comm</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = inster_one_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_insert_step_dispose
</UL>

<P><STRONG><a name="[5f3]"></a>del_cur_step_for_comm</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = del_cur_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_step
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_delete_step_dispose
</UL>

<P><STRONG><a name="[5f5]"></a>advance_cur_step_for_comm</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = advance_cur_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_step
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_move_backward_dispose
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_active_step_front_dispose
</UL>

<P><STRONG><a name="[5f7]"></a>retreat_cur_step_for_comm</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = retreat_cur_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_step
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_move_forward_dispose
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_active_step_behind_dispose
</UL>

<P><STRONG><a name="[5f9]"></a>swap_two_step_for_comm</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = swap_two_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_step
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_exist_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_swap_steps_dispose
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_inter_change_step_dispose
</UL>

<P><STRONG><a name="[651]"></a>set_bbd_open_check_for_comm</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = set_bbd_open_check_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bbd_open_check_dispose
</UL>

<P><STRONG><a name="[650]"></a>get_bbd_open_check_for_comm</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = get_bbd_open_check_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bbd_open_check_dispose
</UL>

<P><STRONG><a name="[654]"></a>set_bbd_short_check_for_comm</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = set_bbd_short_check_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bbd_short_check_dispose
</UL>

<P><STRONG><a name="[653]"></a>get_bbd_short_check_for_comm</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = get_bbd_short_check_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bbd_short_check_dispose
</UL>

<P><STRONG><a name="[5fb]"></a>set_mode_for_comm</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = set_mode_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_mode_dispose
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_mode_dispose
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_updata_step_mode_dispose
</UL>

<P><STRONG><a name="[64e]"></a>get_mode_for_comm</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_mode_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_mode_dispose
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_mode_dispose
</UL>

<P><STRONG><a name="[639]"></a>set_vol_for_comm</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = set_vol_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_voltage_dispose
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_current_dispose
</UL>

<P><STRONG><a name="[638]"></a>get_vol_for_comm</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = get_vol_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_gear_par_form
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_voltage_dispose
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_current_dispose
</UL>

<P><STRONG><a name="[64b]"></a>set_gear_for_comm</STRONG> (Thumb, 598 bytes, Stack size 88 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = set_gear_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_cur_kinds
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_gear_dispose
</UL>

<P><STRONG><a name="[64a]"></a>get_gear_for_comm</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = get_gear_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_gear_dispose
</UL>

<P><STRONG><a name="[648]"></a>set_high_for_comm</STRONG> (Thumb, 430 bytes, Stack size 104 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = set_high_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_high_dispose
</UL>

<P><STRONG><a name="[647]"></a>get_high_for_comm</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = get_high_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_gear_par_form
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_high_dispose
</UL>

<P><STRONG><a name="[642]"></a>set_low_for_comm</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = set_low_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_low_dispose
</UL>

<P><STRONG><a name="[645]"></a>set_offset_value_for_comm</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = set_offset_value_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_offset_dispose
</UL>

<P><STRONG><a name="[641]"></a>get_low_for_comm</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = get_low_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_gear_par_form
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_low_dispose
</UL>

<P><STRONG><a name="[644]"></a>get_offset_value_for_comm</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = get_offset_value_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_gear_par_form
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_cur_offset_dispose
</UL>

<P><STRONG><a name="[63f]"></a>set_real_cur_for_comm</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = set_real_cur_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_real_current_dispose
</UL>

<P><STRONG><a name="[63e]"></a>get_real_cur_for_comm</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = get_real_cur_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_gear_par_form
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_real_current_dispose
</UL>

<P><STRONG><a name="[63c]"></a>set_charge_cur_for_comm</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = set_charge_cur_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_charge_current_dispose
</UL>

<P><STRONG><a name="[63b]"></a>get_charge_cur_for_comm</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = get_charge_cur_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_gear_par_form
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_charge_current_dispose
</UL>

<P><STRONG><a name="[636]"></a>set_arc_for_comm</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = set_arc_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_arc_dispose
</UL>

<P><STRONG><a name="[635]"></a>get_arc_for_comm</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = get_arc_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_arc_dispose
</UL>

<P><STRONG><a name="[633]"></a>set_hz_for_comm</STRONG> (Thumb, 534 bytes, Stack size 88 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = set_hz_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_hz_kinds
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_frequency_dispose
</UL>

<P><STRONG><a name="[632]"></a>get_hz_for_comm</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = get_hz_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_frequency_dispose
</UL>

<P><STRONG><a name="[70d]"></a>get_hz_for_comm_f</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = get_hz_for_comm_f &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_step_msg_for_comm
</UL>

<P><STRONG><a name="[628]"></a>set_pass_signal_for_comm</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = set_pass_signal_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_steps_pass_dispose
</UL>

<P><STRONG><a name="[627]"></a>get_pass_signal_for_comm</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = get_pass_signal_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_steps_pass_dispose
</UL>

<P><STRONG><a name="[625]"></a>set_steps_cont_for_comm</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = set_steps_cont_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_steps_cont_dispose
</UL>

<P><STRONG><a name="[624]"></a>get_steps_cont_for_comm</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = get_steps_cont_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_steps_cont_dispose
</UL>

<P><STRONG><a name="[70e]"></a>set_port_for_comm</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, cs99xx_for_comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>

<P><STRONG><a name="[70f]"></a>get_port_for_comm</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>

<P><STRONG><a name="[616]"></a>clear_all_res_for_comm</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = clear_all_res_for_comm &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_clear_dispose
</UL>

<P><STRONG><a name="[618]"></a>get_result_info_for_comm</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_result_info_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_total
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_total_num_dispose
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_remain_num_dispose
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_used_num_dispose
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_pass_dispose
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_fail_dispose
</UL>

<P><STRONG><a name="[61f]"></a>set_test_port_for_comm</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = set_test_port_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_ports_dispose
</UL>

<P><STRONG><a name="[61e]"></a>get_test_port_for_comm</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = get_test_port_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_ports_dispose
</UL>

<P><STRONG><a name="[622]"></a>set_ir_auto_for_comm</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = set_ir_auto_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_auto_shift_dispose
</UL>

<P><STRONG><a name="[621]"></a>get_ir_auto_for_comm</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = get_ir_auto_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ir_auto_shift_dispose
</UL>

<P><STRONG><a name="[62b]"></a>set_timer_for_comm</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = set_timer_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_rise_t_dispose
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_test_t_dispose
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_fall_t_dispose
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_inter_t_dispose
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_change_t_dispose
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_delay_t_dispose
</UL>

<P><STRONG><a name="[62a]"></a>get_timer_for_comm</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = get_timer_for_comm &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode_f
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_rise_t_dispose
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_test_t_dispose
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_fall_t_dispose
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_inter_t_dispose
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_change_t_dispose
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_com_delay_t_dispose
</UL>

<P><STRONG><a name="[5fd]"></a>set_sys_par_for_comm</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = set_sys_par_for_comm &rArr; check_sys_par &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sys_par
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_contrast_dispose
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_volume_dispose
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_res_remain_hint_dispose
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_save_dispose
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_recover_dispose
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gfi_dispose
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_signal_dispose
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_self_check_dispose
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_port_dispose
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_language_dispose
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fail_continue_dispose
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyklock_dispose
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_nrule_dispose
</UL>

<P><STRONG><a name="[603]"></a>get_sys_par_for_comm</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sys_par_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_contrast_dispose
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_volume_dispose
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_res_remain_hint_dispose
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_save_dispose
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_recover_dispose
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gfi_dispose
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_signal_dispose
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_self_check_dispose
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_port_dispose
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_language_dispose
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fail_continue_dispose
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_keyklock_dispose
</UL>

<P><STRONG><a name="[600]"></a>set_sys_time_for_comm</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = set_sys_time_for_comm &rArr; Time_Adjust &rArr; Time_ConvCalendar &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSaveTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_time_dispose
</UL>

<P><STRONG><a name="[5ff]"></a>get_sys_time_for_comm</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = get_sys_time_for_comm &rArr; Time_ConvToCalendar &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetTime
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvToCalendar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_system_time_dispose
</UL>

<P><STRONG><a name="[611]"></a>set_dut_name_for_comm</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = set_dut_name_for_comm &rArr; save_sys_par &rArr; save_sys_par_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dut_name_dispose
</UL>

<P><STRONG><a name="[610]"></a>get_dut_name_for_comm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_dut_name_for_comm &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dut_name_dispose
</UL>

<P><STRONG><a name="[65d]"></a>get_cap_for_comm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_get_cap_dispose
</UL>

<P><STRONG><a name="[65f]"></a>get_offset_for_comm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_get_offset_dispose
</UL>

<P><STRONG><a name="[65a]"></a>get_test_fetch_for_comm</STRONG> (Thumb, 578 bytes, Stack size 64 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_test_fetch_for_comm &rArr; mysprintf &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_fetch_msg_dispose
</UL>

<P><STRONG><a name="[65b]"></a>get_plc_relay_status_for_comm</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_plc_relay_status_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_plc_status_dispose
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_fetch_msg_dispose
</UL>

<P><STRONG><a name="[662]"></a>get_testing_status_for_comm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_test_status_dispose
</UL>

<P><STRONG><a name="[710]"></a>check_res_data</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_res_data
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_this_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_result_fetch_for_comm
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_result_fetch_for_comm
</UL>

<P><STRONG><a name="[614]"></a>get_cur_result_fetch_for_comm</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = get_cur_result_fetch_for_comm &rArr; change_result_to_string_comm &rArr; transform_time_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result_list_dis_one
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_file_total
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_res_data
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_fetch_dispose
</UL>

<P><STRONG><a name="[613]"></a>get_result_fetch_for_comm</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = get_result_fetch_for_comm &rArr; change_result_to_string_comm &rArr; transform_time_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_total
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_result
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_res_data
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_result_fetch_dispose
</UL>

<P><STRONG><a name="[713]"></a>get_output_freq</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, cs99xx_for_comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[714]"></a>test_ports_f</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = test_ports_f
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_step_msg_for_comm
</UL>

<P><STRONG><a name="[666]"></a>get_active_step_msg_for_comm</STRONG> (Thumb, 1866 bytes, Stack size 64 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = get_active_step_msg_for_comm &rArr; get_hz_for_comm_f &rArr; load_data &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTestMode
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ports_f
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hz_for_comm_f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_step_msg_dispose
</UL>

<P><STRONG><a name="[668]"></a>get_active_file_msg_for_comm</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_active_file_msg_for_comm &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileArcType
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileModeType
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_file_msg_dispose
</UL>

<P><STRONG><a name="[5ef]"></a>get_appoint_file_msg_for_comm</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_appoint_file_msg_for_comm &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_exist
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileArcType
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileModeType
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_catalog_file_dispose
</UL>

<P><STRONG><a name="[66c]"></a>active_appoint_file_for_comm</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = active_appoint_file_for_comm &rArr; read_list &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_list
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_file
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_exist
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_set_active_file_dispose
</UL>

<P><STRONG><a name="[66a]"></a>active_appoint_step_for_comm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = active_appoint_step_for_comm &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_exist_for_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_set_active_step_dispose
</UL>

<P><STRONG><a name="[717]"></a>set_all_sys_par_for_comm</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
</UL>

<P><STRONG><a name="[718]"></a>set_sys_flag_for_comm</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
</UL>

<P><STRONG><a name="[67b]"></a>set_step_used_flag_for_comm</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_step_used_flag_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_step_used_flag_base_dispose
</UL>

<P><STRONG><a name="[67d]"></a>set_group_table_for_comm</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_group_table_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_group_table_base_dispose
</UL>

<P><STRONG><a name="[67f]"></a>set_group_steps_for_comm</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = set_group_steps_for_comm &rArr; save_one_step &rArr; save_one_step_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_file
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_group_base_usb_dispose
</UL>

<P><STRONG><a name="[687]"></a>enter_auto_cal_ui_for_comm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enter_auto_cal_ui_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_auto_cal_ui
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_enter_dispose
</UL>

<P><STRONG><a name="[689]"></a>exit_auto_cal_ui_for_comm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exit_auto_cal_ui_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_auto_cal_ui
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_exit_dispose
</UL>

<P><STRONG><a name="[68b]"></a>get_cal_status_for_comm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = get_cal_status_for_comm &rArr; get_auto_cal_status &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_auto_cal_status
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_status_dispose
</UL>

<P><STRONG><a name="[68d]"></a>get_cal_mode_for_comm</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_cal_mode_for_comm &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_point_mode
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_mode_dispose
</UL>

<P><STRONG><a name="[68f]"></a>get_cal_range_for_comm</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = get_cal_range_for_comm &rArr; get_cur_point_range &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_point_range
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_range_dispose
</UL>

<P><STRONG><a name="[691]"></a>auto_cal_start_for_comm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = auto_cal_start_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_start_output
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_start_dispose
</UL>

<P><STRONG><a name="[693]"></a>auto_cal_stop_for_comm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = auto_cal_stop_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_stop_output
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_stop_dispose
</UL>

<P><STRONG><a name="[695]"></a>set_cal_measure_for_comm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_cal_measure_for_comm &rArr; set_auto_cal_measure
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_cal_measure
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_measure_dispose
</UL>

<P><STRONG><a name="[697]"></a>get_cal_points_for_comm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = get_cal_points_for_comm &rArr; get_auto_cal_points &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_auto_cal_points
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_points_dispose
</UL>

<P><STRONG><a name="[699]"></a>load_cal_point_for_comm</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = load_cal_point_for_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_auto_cal_point
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_cal_load_dispose
</UL>

<P><STRONG><a name="[1ed]"></a>eMBMasterInit</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mb_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = eMBMasterInit &rArr; eMBMasterRTUInit &rArr; xMBMasterPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortEventInit
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdbus_init
</UL>

<P><STRONG><a name="[923]"></a>eMBMasterClose</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb_m.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>eMBMasterEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdbus_init
</UL>

<P><STRONG><a name="[924]"></a>eMBMasterDisable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mb_m.o(.text), UNUSED)

<P><STRONG><a name="[6ed]"></a>vMBMasterSetIsBusy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTimerExpired
</UL>

<P><STRONG><a name="[6d9]"></a>ucMBMasterGetDestAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterFuncReadWriteMultipleHoldingRegister
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[721]"></a>vMBMasterSetCBRunInMasterMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
</UL>

<P><STRONG><a name="[206]"></a>eMBMasterPoll</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, mb_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBMasterPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortEventGet
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetCBRunInMasterMode
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetIsBusy
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetPDUSndLength
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortEventPost
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterGetPDUSndBuf
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_master_polling_task
</UL>

<P><STRONG><a name="[6de]"></a>xMBMasterGetIsBusy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterReqReadWriteMultipleHoldingRegister
</UL>

<P><STRONG><a name="[6d8]"></a>xMBMasterGetCBRunInMasterMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[6e0]"></a>vMBMasterSetDestAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterReqReadWriteMultipleHoldingRegister
</UL>

<P><STRONG><a name="[6e6]"></a>vMBMasterPortSerialEnable</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, portserial_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_delay_ms
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTransmitFSM
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUSend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStart
</UL>

<P><STRONG><a name="[724]"></a>vMBMasterPortClose</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, portserial_m.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>

<P><STRONG><a name="[6e4]"></a>xMBMasterPortSerialInit</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, portserial_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = xMBMasterPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUInit
</UL>

<P><STRONG><a name="[6ea]"></a>xMBMasterPortSerialPutByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, portserial_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBMasterPortSerialPutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTransmitFSM
</UL>

<P><STRONG><a name="[6e9]"></a>xMBMasterPortSerialGetByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, portserial_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBMasterPortSerialGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUReceiveFSM
</UL>

<P><STRONG><a name="[726]"></a>xxx</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, portserial_m.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTRxISR
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
</UL>

<P><STRONG><a name="[7e]"></a>UART5_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, portserial_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UART5_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTRxISR
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e5]"></a>xMBMasterPortTimersInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, porttimer_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xMBMasterPortTimersInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUInit
</UL>

<P><STRONG><a name="[6e7]"></a>vMBMasterPortTimersT35Enable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, porttimer_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vMBMasterPortTimersT35Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetCurTimerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUReceiveFSM
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStart
</UL>

<P><STRONG><a name="[6eb]"></a>vMBMasterPortTimersConvertDelayEnable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, porttimer_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vMBMasterPortTimersConvertDelayEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetCurTimerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTransmitFSM
</UL>

<P><STRONG><a name="[6ec]"></a>vMBMasterPortTimersRespondTimeoutEnable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, porttimer_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vMBMasterPortTimersRespondTimeoutEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetCurTimerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTransmitFSM
</UL>

<P><STRONG><a name="[6e8]"></a>vMBMasterPortTimersDisable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, porttimer_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBMasterPortTimersDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTimerExpired
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUReceiveFSM
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStop
</UL>

<P><STRONG><a name="[7f]"></a>TIM6_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, porttimer_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = TIM6_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvTIMERExpiredISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72b]"></a>draw_select_cal_dc_gr_gui</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = draw_select_cal_dc_gr_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
</UL>

<P><STRONG><a name="[72c]"></a>dis_one_module_for_cal</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dis_one_module_for_cal &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules_for_cal
</UL>

<P><STRONG><a name="[72d]"></a>dis_one_page_modules_for_cal</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dis_one_page_modules_for_cal &rArr; dis_one_module_for_cal &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_module_for_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
</UL>

<P><STRONG><a name="[4fe]"></a>get_dc_gr_module_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
</UL>

<P><STRONG><a name="[6ee]"></a>select_dc_gr_moduls</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = select_dc_gr_moduls
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_info_dispose
</UL>

<P><STRONG><a name="[4ff]"></a>set_cur_cal_dc_module_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
</UL>

<P><STRONG><a name="[4f8]"></a>get_dc_module_using_num</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_vol_gear
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_test_method
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dc_gr_map_ratio_n
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dc_gr_data
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_data
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gr_total_cal_points
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_dc_gr_n_moduls
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ask_dc_gr_start_ok
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_short_data
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_module_inf
</UL>

<P><STRONG><a name="[72f]"></a>get_dc_module_base_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_vol_gear
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_test_method
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dc_gr_map_ratio_n
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dc_gr_data
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_data
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ask_dc_gr_start_ok
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_short_data
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_module_inf
</UL>

<P><STRONG><a name="[72e]"></a>get_dc_gr_module_inf</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_dc_gr_module_inf &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_base_addr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_modules
</UL>

<P><STRONG><a name="[293]"></a>slelect_cal_dc_gr_module</STRONG> (Thumb, 420 bytes, Stack size 632 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = slelect_cal_dc_gr_module &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cur_cal_dc_module_addr
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_module_id
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_module_inf
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_dc_gr_moduls
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules_for_cal
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_select_cal_dc_gr_gui
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr
</UL>

<P><STRONG><a name="[401]"></a>clear_dc_gr_st</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[288]"></a>get_dc_gr_ad</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_dc_gr_ad
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_amp_err
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_open_err
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
</UL>

<P><STRONG><a name="[230]"></a>clear_dc_gr_data</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_dc_gr_data
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_base_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
</UL>

<P><STRONG><a name="[732]"></a>get_dc_gr_short_data</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, dc_module.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_amp_err
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_open_err
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_base_addr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2c3]"></a>get_dc_gr_data</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_dc_gr_data &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_amp_err
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_open_err
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_base_addr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
</UL>

<P><STRONG><a name="[403]"></a>ask_dc_gr_start_ok</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ask_dc_gr_start_ok &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_base_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>

<P><STRONG><a name="[22d]"></a>send_dc_module_cmd</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vol_gear_dc_module_bridge
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_method_dc_module_bridge
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_stop_dc_module_bridge
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_start_dc_module_bridge
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_dc_module_bridge
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dac_value_dc_module_bridge
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cal_data_dc_module_bridge
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_fetch_short_dc_module_bridge
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_fetch_dc_module_bridge
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_info_dc_module_bridge
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_data_dc_module_bridge
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_base_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_gr_cal_menu
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_cal_info
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dc_gr_moduls
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_save_dc_gr_ratio
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_info
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off_old
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off_8833
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on_old
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on_8833
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_module
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_cal_info
</UL>

<P><STRONG><a name="[37a]"></a>check_dc_gr_moduls</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = check_dc_gr_moduls &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[215]"></a>get_dc_gr_cal_info</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = get_dc_gr_cal_info &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[73e]"></a>set_dc_gr_cal_info</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dc_module.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[286]"></a>set_dc_gr_vol_gear</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_dc_gr_vol_gear
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_base_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_info
</UL>

<P><STRONG><a name="[287]"></a>set_dc_gr_test_method</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_dc_gr_test_method
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_base_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_info
</UL>

<P><STRONG><a name="[285]"></a>set_dc_gr_output_da</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
</UL>

<P><STRONG><a name="[284]"></a>get_cur_cal_dc_module_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dc_module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dc_gr_cal_info
</UL>

<P><STRONG><a name="[28e]"></a>find_dc_gr_map_ratio_n</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_dc_gr_map_ratio_n
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_base_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dc_gr_cal_info
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_output_da
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_cal_data_dispose
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cal_data_dc_module_bridge
</UL>

<P><STRONG><a name="[4b3]"></a>select_dc_gr_n_moduls</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dc_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = select_dc_gr_n_moduls
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_module_using_num
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_info
</UL>

<P><STRONG><a name="[73b]"></a>set_cal_data_dc_module_bridge</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = set_cal_data_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dc_gr_map_ratio_n
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[73c]"></a>get_cal_data_dc_module_bridge</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = get_cal_data_dc_module_bridge &rArr; mb_query_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_query_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[4b4]"></a>set_dc_gr_module_output_da</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_dc_gr_module_output_da &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dc_gr_map_ratio_n
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_info
</UL>

<P><STRONG><a name="[739]"></a>set_dac_value_dc_module_bridge</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = set_dac_value_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[73d]"></a>set_data_dc_module_bridge</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = set_data_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[738]"></a>set_vol_gear_dc_module_bridge</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[733]"></a>set_start_dc_module_bridge</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = set_start_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[734]"></a>set_stop_dc_module_bridge</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = set_stop_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[735]"></a>get_test_fetch_dc_module_bridge</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = get_test_fetch_dc_module_bridge &rArr; mb_query_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_query_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[736]"></a>get_test_fetch_short_dc_module_bridge</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = get_test_fetch_short_dc_module_bridge &rArr; mb_query_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_query_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[73a]"></a>get_info_dc_module_bridge</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = get_info_dc_module_bridge &rArr; mb_query_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_query_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[737]"></a>set_test_method_dc_module_bridge</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dc_module_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = set_test_method_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_slave_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>

<P><STRONG><a name="[73f]"></a>dis_one_module</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dis_one_module &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules
</UL>

<P><STRONG><a name="[740]"></a>dis_one_page_modules</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dis_one_page_modules &rArr; dis_one_module &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_module
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_modules
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
</UL>

<P><STRONG><a name="[741]"></a>start_scan_module</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = start_scan_module &rArr; dis_one_page_modules &rArr; dis_one_module &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_str
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_modules
</UL>

<P><STRONG><a name="[742]"></a>auto_scan_module</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = auto_scan_module &rArr; gui_draw_dc_gr_module_being_in_comm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_keyboard
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_being_in_comm
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_modules
</UL>

<P><STRONG><a name="[37b]"></a>auto_scan_modules</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = auto_scan_modules &rArr; auto_scan_module &rArr; gui_draw_dc_gr_module_being_in_comm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_module
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
</UL>

<P><STRONG><a name="[1fe]"></a>scan_modules</STRONG> (Thumb, 364 bytes, Stack size 624 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 988 + Unknown Stack Size
<LI>Call Chain = scan_modules &rArr; dis_scan_modules_gui &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_str
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scan_modules_gui
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_module_inf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_cur_status
</UL>

<P><STRONG><a name="[1bf]"></a>ReFresh_LCD24064</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReFresh_LCD24064 &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeon
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecode
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd24064_Clr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_uA
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_cur
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_more_cur
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_gr_out_cur
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_res
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_correct_ir_vol
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_arc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_more
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_uA
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_arc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_cur
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_more_cur
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_uA
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_out_v
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_out_v
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_exception
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_out_v
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_modules
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_subtask
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_program_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_type
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_type
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_page_type
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_vol_sel_gui
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_sel_gui
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_more_options_gui
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cursor
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_cur_sel_gui
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_offset_one_page
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_offset_step
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_offset_shortcut
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_manual
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_page_files
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_del_all
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_new_del
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_ch_work_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_to_board
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_fail
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_warning
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_of_advance
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_interface
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_str
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_pass
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_cal_ui_ele
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_bbd_step
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_bbd_shortcut
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_manual
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_state_dis
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_more
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_dis
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_gui_control
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_stop
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_discharge_over
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_fail
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;into_output_delay
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_option_sel_gui
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_check_data
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_wait_usb_connect_gui
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_no_connect_usb_gui
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_res
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_title
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_comm_fail
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_pw
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_pwkey
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_interface_info
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_soft_version
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scan_modules_gui
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csallwin_mian_ui
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_being_in_comm
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_sw_on_warning
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcgr_commuincation_err
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_mismatch
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ratio_broken
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Refresh_Sever
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules_for_cal
</UL>

<P><STRONG><a name="[747]"></a>LCD_24064ReFresh_EN</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd24064.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd24064_Clr
</UL>

<P><STRONG><a name="[299]"></a>Lcd24064_Clr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Lcd24064_Clr &rArr; ReFresh_LCD24064 &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_24064ReFresh_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd24064_Init
</UL>

<P><STRONG><a name="[748]"></a>Lcd24064_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Lcd24064_Init &rArr; Lcd24064_Clr &rArr; ReFresh_LCD24064 &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd24064_Clr
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecode
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Init
</UL>

<P><STRONG><a name="[399]"></a>LCD24064_Refresh_Rect</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD24064_Refresh_Rect &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeon
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Show
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_wait_usb_connect_gui
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressBar
</UL>

<P><STRONG><a name="[749]"></a>LCD24064_Refresh_Sever</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd24064.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
</UL>

<P><STRONG><a name="[74c]"></a>DrawPot</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DrawPot
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_SetPixelIndex
</UL>

<P><STRONG><a name="[74e]"></a>LCD_ReadPoint</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_ReadPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_GetPixelIndex
</UL>

<P><STRONG><a name="[74a]"></a>LCD24064_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD24064_Init &rArr; Lcd24064_Init &rArr; Lcd24064_Clr &rArr; ReFresh_LCD24064 &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd24064_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Init
</UL>

<P><STRONG><a name="[74b]"></a>LCD24064_SetPixelIndex</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawPot
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
</UL>

<P><STRONG><a name="[74d]"></a>LCD24064_GetPixelIndex</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD24064_GetPixelIndex &rArr; LCD_ReadPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetPixelIndex
</UL>

<P><STRONG><a name="[750]"></a>GUI_sin</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_cos
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcOrto
</UL>

<P><STRONG><a name="[74f]"></a>GUI_cos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_cos &rArr; GUI_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcOrto
</UL>

<P><STRONG><a name="[754]"></a>GL_DrawPoint</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GL_DrawPoint &rArr; GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLineEnd
</UL>

<P><STRONG><a name="[758]"></a>GL_DrawLine1</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GL_DrawLine1 &rArr; GL_DrawPoint &rArr; GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetLineColor
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SwapInt
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawEllipse
</UL>

<P><STRONG><a name="[75c]"></a>GL_DrawLine</STRONG> (Thumb, 308 bytes, Stack size 72 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLineEnd
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcOrto
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineTo
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineToNM
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineRelNM
</UL>

<P><STRONG><a name="[24b]"></a>GUI_DrawLine</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_menu_frame_line
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_offset
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_sel_mode
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_manual
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_del_all
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_new_del
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_del_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_ch_work_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_set
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_calibration_gui
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bbd
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_manual
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_res_clear
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_pw
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_drow_test_syn
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos_n
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_select_cal_dc_gr_gui
</UL>

<P><STRONG><a name="[75e]"></a>GL_DrawLineTo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPolygon
</UL>

<P><STRONG><a name="[760]"></a>GL_MoveTo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveTo
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPolygon
</UL>

<P><STRONG><a name="[75f]"></a>GL_DrawPolygon</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MoveTo
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineTo
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPolygon
</UL>

<P><STRONG><a name="[761]"></a>GUI_DrawPolygon</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPolygon
</UL>

<P><STRONG><a name="[764]"></a>GUI_MoveRel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
</UL>

<P><STRONG><a name="[763]"></a>GUI_DrawLineRel</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRel
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineRelNM
</UL>

<P><STRONG><a name="[766]"></a>GUI_DrawLineTo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MoveTo
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineToNM
</UL>

<P><STRONG><a name="[767]"></a>GUI_MoveTo</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MoveTo
</UL>

<P><STRONG><a name="[1c2]"></a>GUI_DrawRect</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GUI_DrawRect &rArr; _DrawRect &rArr; LCD_DrawVLine &rArr; LCD_L0_DrawVLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_modules
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_program_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_type
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_to_board
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_fail
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_warning
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_of_advance
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_pass
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_check_data
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_wait_usb_connect_gui
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_no_connect_usb_gui
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_comm_fail
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_interface_info
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_soft_version
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scan_modules_gui
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_being_in_comm
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_sw_on_warning
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcgr_commuincation_err
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_mismatch
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ratio_broken
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
</UL>

<P><STRONG><a name="[76b]"></a>GUI_DrawPoint</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>

<P><STRONG><a name="[3e8]"></a>GUI_DispChar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_dispchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_DispChar &rArr; GL_DispChar &rArr; GUI_DispNextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
</UL>

<P><STRONG><a name="[396]"></a>GUI_DispCharAt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_dispchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GUI_DispCharAt &rArr; GL_DispChar &rArr; GUI_DispNextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_port_for_set
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_offset_test_ports
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_file_info
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_pwkey
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_port
</UL>

<P><STRONG><a name="[3c5]"></a>GUI_DispString</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, gui_dispstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_3
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFixAt
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecMin
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
</UL>

<P><STRONG><a name="[1be]"></a>GUI_DispStringAt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_dispstringat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_uA
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_cur
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_more_cur
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_gr_out_cur
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_res
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_arc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_more
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_uA
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_arc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_cur
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_more_cur
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_uA
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_out_v
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_out_v
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_exception
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_out_v
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_gr
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_bbd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_ir
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_dcw
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_acw
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_date
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_program_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Show
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_custom_type_gui
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_type
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_page_type
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_par_inval
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_g_mode_inval
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_set_sys_cur_limit
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_port_for_set
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_more_options_gui
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_gr_hz_sel_gui
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTitle
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_offset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_offset_step
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_offset_shortcut
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_sel_mode
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_manual
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_file_management
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_file_info
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_del_all
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_new_del
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_del_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_ch_work_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_to_board
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_fail
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_warning
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_recover
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_keyboard_lock_manage
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_of_advance
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_interface
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_set
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_str
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_title_step
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_dis
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_time
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_vol1
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_result_status
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_calibration_gui
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_pass
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_cal_ui_ele
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bbd
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_bbd_step
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_bbd_shortcut
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_manual
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_state_dis
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_more
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gr_vol
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gear_up_limit
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_time_manage
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_check_data
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test_result
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_wait_usb_connect_gui
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_no_connect_usb_gui
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis_one_res
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_cur
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_vol
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_res
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_title
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_res_clear
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_comm_fail
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_password_manage
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_pw
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu_sys
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_3
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_2
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_1
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_str
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_interface_info
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_soft_version
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scan_modules_gui
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_drow_test_syn
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_agreement
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_plc
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_test_menu_title
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csallwin_mian_ui
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_being_in_comm
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_sw_on_warning
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcgr_commuincation_err
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_options_sel_gui
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_set_port
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_mismatch
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ratio_broken
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_port
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_module
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules_for_cal
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_module_for_cal
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_select_cal_dc_gr_gui
</UL>

<P><STRONG><a name="[773]"></a>GL_DrawBitmap</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, gui_drawbitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
</UL>

<P><STRONG><a name="[1c3]"></a>GUI_DrawBitmap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gui_drawbitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_uA
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_cur
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_more_cur
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_gr_out_cur
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_res
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_arc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_more
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_uA
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_arc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_cur
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_more_cur
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_uA
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_out_v
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_out_v
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_out_v
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_subtask
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_program_info
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_type
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_type
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_gr_hz_sel_gui
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_colon
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_offset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_offset_shortcut
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_sel_mode
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_manual
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_file_management
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_del_all
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_new_del
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_del_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_ch_work_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_to_board
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_fail
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_warning
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_recover
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_keyboard_lock_manage
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_recover
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_lockkeyboard
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_interface
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_interface
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_set
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bbd
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_bbd_shortcut
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_manual
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_check_data
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_wait_usb_connect_gui
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_no_connect_usb_gui
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_res_clear
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_comm_fail
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_pw
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu_sys
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_2
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_interface_info
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_agreement
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_plc
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csallwin_mian_ui
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_being_in_comm
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_sw_on_warning
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcgr_commuincation_err
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap_circle
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_options_sel_gui
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_mismatch
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ratio_broken
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressBar
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_select_cal_dc_gr_gui
</UL>

<P><STRONG><a name="[24c]"></a>GUI_FillRect</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gui_fillrect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = GUI_FillRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_del_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_title_step
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_res_clear
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_select_cal_dc_gr_gui
</UL>

<P><STRONG><a name="[778]"></a>GUI_GotoY</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gui_goto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoY
</UL>

<P><STRONG><a name="[77a]"></a>GUI_GotoX</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gui_goto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoX
</UL>

<P><STRONG><a name="[263]"></a>GUI_GotoXY</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_goto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_GotoXY
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoX
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoY
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_correct_ir_vol
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_cur
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gr_vol
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gear_up_limit
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_dis_float_at
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFixAt
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[1c1]"></a>GUI_SetFont</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_setfont.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_correct_ir_vol
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_exception
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_program_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Show
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_custom_type_gui
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_type
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_par_inval
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_g_mode_inval
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_set_sys_cur_limit
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_port_for_set
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTitle
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_offset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_offset_test_ports
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_offset_shortcut
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_sel_mode
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_manual
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_file_management
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_del_all
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_new_del
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_del_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_ch_work_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_to_board
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_build_connect_fail
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_warning
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_recover
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_keyboard_lock_manage
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_of_advance
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_interface
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_set
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_str
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_title_step
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_dis
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_time
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_vol1
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_result_status
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_calibration_gui
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_pass
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_cal_ui_ele
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bbd
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_bbd_shortcut
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_manual
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_state_dis
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_more
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_pass
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_time_manage
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_check_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test_result
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_wait_usb_connect_gui
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_no_connect_usb_gui
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis_one_res
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_res
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_title
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_res_clear
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_comm_fail
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_password_manage
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_pw
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_menu_sys
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_3
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_2
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_1
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_interface_info
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_soft_version
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scan_modules_gui
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_drow_test_syn
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_agreement
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_communication_plc
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_test_menu_title
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csallwin_mian_ui
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_being_in_comm
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_sw_on_warning
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcgr_commuincation_err
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_mismatch
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ratio_broken
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_port
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_select_cal_dc_gr_gui
</UL>

<P><STRONG><a name="[24d]"></a>GUI_SetTextMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_settextmode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_exception
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_del_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_title_step
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_res_clear
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_select_cal_dc_gr_gui
</UL>

<P><STRONG><a name="[134]"></a>GUIPROP_DispChar</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, guicharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = GUIPROP_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_FindChar
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Address Reference Count : 12]<UL><LI> ms_sans_serif_24.o(.constdata)
<LI> simsun_15.o(.constdata)
<LI> simsun_16.o(.constdata)
<LI> simsun_12.o(.constdata)
<LI> garamond_16.o(.constdata)
<LI> simsun_13.o(.constdata)
<LI> fangzhengxingkai_24.o(.constdata)
<LI> simsunf_15.o(.constdata)
<LI> f10_1.o(.constdata)
<LI> f13_1.o(.constdata)
<LI> f10_ascii.o(.constdata)
<LI> f13_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, guicharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUIPROP_GetCharDistX
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_FindChar
</UL>
<BR>[Address Reference Count : 12]<UL><LI> ms_sans_serif_24.o(.constdata)
<LI> simsun_15.o(.constdata)
<LI> simsun_16.o(.constdata)
<LI> simsun_12.o(.constdata)
<LI> garamond_16.o(.constdata)
<LI> simsun_13.o(.constdata)
<LI> fangzhengxingkai_24.o(.constdata)
<LI> simsunf_15.o(.constdata)
<LI> f10_1.o(.constdata)
<LI> f13_1.o(.constdata)
<LI> f10_ascii.o(.constdata)
<LI> f13_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guicharp.o(.text))
<BR>[Address Reference Count : 12]<UL><LI> ms_sans_serif_24.o(.constdata)
<LI> simsun_15.o(.constdata)
<LI> simsun_16.o(.constdata)
<LI> simsun_12.o(.constdata)
<LI> garamond_16.o(.constdata)
<LI> simsun_13.o(.constdata)
<LI> fangzhengxingkai_24.o(.constdata)
<LI> simsunf_15.o(.constdata)
<LI> f10_1.o(.constdata)
<LI> f13_1.o(.constdata)
<LI> f10_ascii.o(.constdata)
<LI> f13_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, guicharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUIPROP_IsInFont
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_FindChar
</UL>
<BR>[Address Reference Count : 12]<UL><LI> ms_sans_serif_24.o(.constdata)
<LI> simsun_15.o(.constdata)
<LI> simsun_16.o(.constdata)
<LI> simsun_12.o(.constdata)
<LI> garamond_16.o(.constdata)
<LI> simsun_13.o(.constdata)
<LI> fangzhengxingkai_24.o(.constdata)
<LI> simsunf_15.o(.constdata)
<LI> f10_1.o(.constdata)
<LI> f13_1.o(.constdata)
<LI> f10_ascii.o(.constdata)
<LI> f13_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>GUI_ClearRect</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slelect_cal_dc_gr_module
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd_cur_gear
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_gr_out_cur
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_measure
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_cur_gear
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_cur_gear
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_measure_uA
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_out_v
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_exception
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_out_v
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_contens_gr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_pw
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_subtask
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_program_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctness
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_type
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_recover_type
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_page_type
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_par_inval
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_g_mode_inval
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_more_options_gui
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_gr_hz_sel_gui
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_par
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_offset_one_page
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_sel_mode
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_manual
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_page_files
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_del_all
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_new_del
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_del_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_ch_work_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_warning
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_of_advance
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_interface
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_leading_out
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_set
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_str
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_dis
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_time
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_vol1
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_result_status
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_pass
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_cal_ui_ele
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bbd_one_page
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_manual
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_options_par
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_more
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_cur
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_check_data
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_wait_usb_connect_gui
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_no_connect_usb_gui
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_draw_one_page
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_title
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_res_clear
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_comm_fail
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_pw
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_3
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_2
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_help_1
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_interface_info
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_soft_version
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scan_modules_gui
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_dc_gr_module_being_in_comm
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_options_sel_gui
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_dis_float_at
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_mismatch
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ratio_broken
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu_n
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos_n
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_port
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressBar
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules_for_cal
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_select_cal_dc_gr_gui
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[785]"></a>GUI_Clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>

<P><STRONG><a name="[517]"></a>GUI_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GUI_Init &rArr; LCD_Init &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[78a]"></a>GUI_DispDecShift</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, guival.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DispDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[78c]"></a>GUI_DispSDecShift</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, guival.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddSign
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDec
</UL>

<P><STRONG><a name="[78e]"></a>GUI_DispDecMin</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, guival.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
</UL>

<P><STRONG><a name="[790]"></a>GUI_DispDecSpace</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, guival.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddSign
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
</UL>

<P><STRONG><a name="[792]"></a>GUI_DispSDec</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, guival.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
</UL>

<P><STRONG><a name="[6f2]"></a>GUI_DispDec</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, guival.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_DispDec &rArr; GUI_DispDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
</UL>

<P><STRONG><a name="[26a]"></a>GUI_DispDecAt</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, guival.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_offset_step
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_file_info
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_of_advance
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_title_step
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_bbd_step
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis_one_res
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_title
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_test_menu_title
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_module
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_page_modules_for_cal
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_module_for_cal
</UL>

<P><STRONG><a name="[26c]"></a>GUI_DispFloatFix</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, guivalf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_DispFloatFix &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_correct_ir_vol
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_cur
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gr_vol
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gear_up_limit
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_dis_float_at
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFixAt
</UL>

<P><STRONG><a name="[796]"></a>GUI_DispFloatMin</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, guivalf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>

<P><STRONG><a name="[797]"></a>GUI_DispFloat</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, guivalf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>

<P><STRONG><a name="[798]"></a>GUI_DispSFloatFix</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, guivalf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[799]"></a>GUI_DispSFloatMin</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, guivalf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>

<P><STRONG><a name="[78f]"></a>GUI_AddDecMin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_adddecmin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecMin
</UL>

<P><STRONG><a name="[791]"></a>GUI_Long2Len</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_adddecshift.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSFloatMin
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatMin
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
</UL>

<P><STRONG><a name="[78d]"></a>GUI_AddSign</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_adddecshift.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_AddSign
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
</UL>

<P><STRONG><a name="[78b]"></a>GUI_AddDecShift</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, gui_adddecshift.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_AddDecShift &rArr; _Check_NegLong
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check_NegLong
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
</UL>

<P><STRONG><a name="[75d]"></a>GL_FillPolygon</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, gui_fillpolygon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPrevPointDiffy
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddPoint
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Flush
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Add
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckYInterSect
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillPolygon
</UL>

<P><STRONG><a name="[7a7]"></a>GUI_FillPolygon</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gui_fillpolygon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[7a8]"></a>GUI_GetBkColorIndex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_getcolor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
</UL>

<P><STRONG><a name="[77f]"></a>GUI_GetBkColor</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gui_getcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_GetBkColor &rArr; LCD_Index2Color &rArr; LCD_L0_Index2Color &rArr; LCD_Index2Color_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[7ab]"></a>GUI_GetColorIndex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_getcolor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
</UL>

<P><STRONG><a name="[77e]"></a>GUI_GetColor</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gui_getcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_GetColor &rArr; LCD_Index2Color &rArr; LCD_L0_Index2Color &rArr; LCD_Index2Color_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[7ac]"></a>GUI_SetBkColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_setcolor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>

<P><STRONG><a name="[780]"></a>GUI_SetColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_setcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SetColor &rArr; LCD_SetColor &rArr; LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[7ad]"></a>GUI_SetBkColorIndex</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_setcolorindex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
</UL>

<P><STRONG><a name="[79e]"></a>GUI_SetColorIndex</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_setcolorindex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_SetColorIndex &rArr; LCD_SetColorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_565
</UL>

<P><STRONG><a name="[774]"></a>GUI_SetDrawMode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gui_setdrawmode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_SetDrawMode &rArr; LCD_SetDrawMode
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
</UL>

<P><STRONG><a name="[925]"></a>GUI_UC_GetCharSize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gui_uc.o(.text), UNUSED)

<P><STRONG><a name="[926]"></a>GUI_UC_GetCharCode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gui_uc.o(.text), UNUSED)

<P><STRONG><a name="[927]"></a>GUI_UC_Encode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_uc.o(.text), UNUSED)

<P><STRONG><a name="[928]"></a>GUI_UC__CalcSizeOfChar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_uc.o(.text), UNUSED)

<P><STRONG><a name="[7b3]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_uc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[772]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gui_uc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumChars2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[929]"></a>GUI_UC__NumBytes2NumChars</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gui_uc.o(.text), UNUSED)

<P><STRONG><a name="[92a]"></a>GUI_UC_SetEncodeNone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc_encodenone.o(.text), UNUSED)

<P><STRONG><a name="[76d]"></a>GUI_GetFontDistY</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, guichar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
</UL>

<P><STRONG><a name="[7b0]"></a>GUI_DispNextLine</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, guichar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_DispNextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DispChar
</UL>

<P><STRONG><a name="[76c]"></a>GL_DispChar</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, guichar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GL_DispChar &rArr; GUI_DispNextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine_SJIS
</UL>

<P><STRONG><a name="[76e]"></a>GUI_GetYAdjust</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, guichar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[789]"></a>GUI_GetCharDistX</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, guichar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLineDistX_SJIS
</UL>

<P><STRONG><a name="[76f]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, guicharline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[770]"></a>GUI__GetLineDistX</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, guicharline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__GetLineDistX &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[771]"></a>GUI__DispLine</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, guicharline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[7b5]"></a>GL_DrawCircle</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, guicirc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw8Point
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
</UL>

<P><STRONG><a name="[7b6]"></a>GUI_DrawCircle</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, guicirc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircle
</UL>

<P><STRONG><a name="[756]"></a>GL_FillCircle</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, guicirc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
</UL>

<P><STRONG><a name="[7b7]"></a>GUI_FillCircle</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, guicirc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
</UL>

<P><STRONG><a name="[7b8]"></a>GL_FillEllipse</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, guicirc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillEllipse
</UL>

<P><STRONG><a name="[7b9]"></a>GUI_FillEllipse</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, guicirc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipse
</UL>

<P><STRONG><a name="[7ba]"></a>GL_DrawEllipse</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, guicirc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawEllipse
</UL>

<P><STRONG><a name="[7bb]"></a>GUI_DrawEllipse</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, guicirc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawEllipse
</UL>

<P><STRONG><a name="[7af]"></a>LCD_SetColorIndex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetColorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColorIndex
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>

<P><STRONG><a name="[7ae]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetBkColorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColorIndex
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>

<P><STRONG><a name="[77d]"></a>LCD_SetDrawMode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[755]"></a>LCD_DrawPixel</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_DrawPixel &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_XorPixel
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw8Point
</UL>

<P><STRONG><a name="[769]"></a>LCD_DrawHLine</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRect
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipse
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddPoint
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Flush
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>

<P><STRONG><a name="[777]"></a>LCD_FillRect</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_565
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[776]"></a>LCD_DrawBitmap</STRONG> (Thumb, 556 bytes, Stack size 96 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_565
</UL>

<P><STRONG><a name="[7c1]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetClipRectMax
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetRect
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[787]"></a>LCD_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LCD_Init &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_On
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Init
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[7c5]"></a>LCD_Color2Index</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>

<P><STRONG><a name="[7aa]"></a>LCD_Index2Color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Index2Color &rArr; LCD_L0_Index2Color &rArr; LCD_Index2Color_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[783]"></a>LCD_SetBkColor</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_SetBkColor &rArr; LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[784]"></a>LCD_SetColor</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_SetColor &rArr; LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_565
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[76a]"></a>LCD_DrawVLine</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcd_drawvline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LCD_DrawVLine &rArr; LCD_L0_DrawVLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRect
</UL>

<P><STRONG><a name="[7a9]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getcolorindex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColorIndex
</UL>

<P><STRONG><a name="[79a]"></a>LCD_GetColorIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getcolorindex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColorIndex
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_565
</UL>

<P><STRONG><a name="[92b]"></a>LCD_GetXSizeEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[92c]"></a>LCD_GetYSizeEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[92d]"></a>LCD_GetVXSizeEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[92e]"></a>LCD_GetVYSizeEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[92f]"></a>LCD_GetBitsPerPixelEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[930]"></a>LCD_GetBitsPerPixel_L0Ex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[931]"></a>LCD_GetNumColorsEx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[932]"></a>LCD_GetYMagEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[933]"></a>LCD_GetXMagEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[79b]"></a>LCD_GetFixedPaletteEx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_getex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_565
</UL>

<P><STRONG><a name="[934]"></a>LCD_GetMirrorXEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[935]"></a>LCD_GetMirrorYEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[936]"></a>LCD_GetSwapXYEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[79c]"></a>LCD_GetSwapRBEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_565
</UL>

<P><STRONG><a name="[937]"></a>LCD_GetDeltaModeEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text), UNUSED)

<P><STRONG><a name="[7c6]"></a>LCD_L0_Color2Index</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcd_l0_generic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_L0_Color2Index &rArr; LCD_Color2Index_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index_M565
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>

<P><STRONG><a name="[7c7]"></a>LCD_L0_Index2Color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd_l0_generic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_L0_Index2Color &rArr; LCD_Index2Color_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color_M565
</UL>
<BR>[Called By]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>

<P><STRONG><a name="[7cb]"></a>LCD_L0_GetIndexMask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lcd_l0_generic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetIndexMask_M565
</UL>

<P><STRONG><a name="[782]"></a>LCD_L0_GetRect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_l0_generic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[7cd]"></a>LCD_GetpPalConvTableUncached</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcdcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_GetpPalConvTableUncached &rArr; LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
</UL>

<P><STRONG><a name="[775]"></a>LCD_GetpPalConvTable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcdcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached &rArr; LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
</UL>

<P><STRONG><a name="[7c3]"></a>LCD_InitLUT</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcdcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_InitLUT &rArr; LCD_Index2Color &rArr; LCD_L0_Index2Color &rArr; LCD_Index2Color_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetLUTEntry
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[13c]"></a>LCD_Index2Color_565</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lcdp565_index2color.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Index2Color_565
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_drawbitmap_565.o(.constdata)
</UL>
<P><STRONG><a name="[79d]"></a>LCD_L0_SetPixelIndex</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawVLine
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_XorPixel
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawHLine
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_565
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
</UL>

<P><STRONG><a name="[7cf]"></a>LCD_L0_GetPixelIndex</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_L0_GetPixelIndex &rArr; LCD24064_GetPixelIndex &rArr; LCD_ReadPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_XorPixel
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
</UL>

<P><STRONG><a name="[7bd]"></a>LCD_L0_XorPixel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawVLine
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawHLine
</UL>

<P><STRONG><a name="[7be]"></a>LCD_L0_DrawHLine</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_XorPixel
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_FillRect
</UL>

<P><STRONG><a name="[7c8]"></a>LCD_L0_DrawVLine</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_L0_DrawVLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_XorPixel
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
</UL>

<P><STRONG><a name="[7bf]"></a>LCD_L0_FillRect</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>

<P><STRONG><a name="[7c0]"></a>LCD_L0_DrawBitmap</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>

<P><STRONG><a name="[938]"></a>LCD_L0_SetOrg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcddummy.o(.text), UNUSED)

<P><STRONG><a name="[7c4]"></a>LCD_L0_On</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddummy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[939]"></a>LCD_L0_Off</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddummy.o(.text), UNUSED)

<P><STRONG><a name="[7c2]"></a>LCD_L0_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_L0_Init &rArr; LCD24064_Init &rArr; Lcd24064_Init &rArr; Lcd24064_Clr &rArr; ReFresh_LCD24064 &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[7ce]"></a>LCD_L0_SetLUTEntry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcddummy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[93a]"></a>GUI_X_GetTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[93b]"></a>GUI_X_Delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[786]"></a>GUI_X_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[93c]"></a>GUI_X_ExecIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[93d]"></a>GUI_X_Log</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[93e]"></a>GUI_X_Warn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[93f]"></a>GUI_X_ErrorOut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[7c9]"></a>LCD_Color2Index_M565</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcdpm565.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Color2Index_M565
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Color2Index
</UL>

<P><STRONG><a name="[7cc]"></a>LCD_GetIndexMask_M565</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdpm565.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetIndexMask
</UL>

<P><STRONG><a name="[7b2]"></a>GUI_RectsIntersect</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gui_rectsintersect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[141]"></a>GUIMONO_DispChar</STRONG> (Thumb, 388 bytes, Stack size 80 bytes, guicharm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = GUIMONO_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, guicharm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guicharm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, guicharm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUIMONO_IsInFont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[7ca]"></a>LCD_Index2Color_M565</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lcdpm565_index2color.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Index2Color_M565
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Index2Color
</UL>

<P><STRONG><a name="[2af]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slither_f
</UL>

<P><STRONG><a name="[940]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_paramenter
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str_for_mem
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_table_flag
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_acw_par
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dcw_par
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ir_par
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bbd_par
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cc_par
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_list
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_step_data
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_flash
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_to_eep
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list_eep
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode_eep
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_to_eep
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list_to_eep
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_as_cur_group_eep
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file_to_eep
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_to_eep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ratio_from_eep
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_eep_pos
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_auto_cal_points
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_auto_cal_status
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_point_range
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_ir_gear_up_limit_to_string
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_ir_rang
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_string
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_data_to_str
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_range_result_to_string_comm
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_range_result_to_string
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_soft_version
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csallwin_mian_ui
</UL>

<P><STRONG><a name="[7d6]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[7d7]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[7d5]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[14a]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[7d9]"></a>__printf</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[394]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roll_txt
</UL>

<P><STRONG><a name="[372]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_table_flag
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_page_and_check_ok
</UL>

<P><STRONG><a name="[219]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_date
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_subtask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTitle
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roll_txt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new1
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_par
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_default_file
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sys_par
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_flash
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_time
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_vol1
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cal_point_base_info
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_gr_vol
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_time_manage
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_string
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_data_to_str
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrcat
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_cur
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_title
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_test_menu_title
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pass_word_dispose
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_range_for_comm
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_mode_for_comm
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_appoint_file_msg_for_comm
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_file_msg_for_comm
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_result_fetch_for_comm
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dut_name_for_comm
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dut_name_for_comm
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idn_msg_for_comm
</UL>

<P><STRONG><a name="[1dc]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_gr_out_cur
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr_out_cur
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_md5
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor_l
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_charkey
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTitle
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roll_txt
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sys_par
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_str
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_str_pre_zero
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_data
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_time
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_vol1
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_result_status
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_status
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_cur
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_title
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_pwkey
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_str
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_test_menu_title
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_step_msg_for_comm
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dut_name_for_comm
</UL>

<P><STRONG><a name="[1bd]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_page_type
</UL>

<P><STRONG><a name="[1d8]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sprintf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTitle
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roll_txt
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrcat
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysprintf
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_title
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_test_menu_title
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_get_tester_type_usb_dispose
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_step_msg_for_comm
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_fetch_for_comm
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idn_msg_for_comm
</UL>

<P><STRONG><a name="[46e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_step
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_info_dispose
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dc_module_cal_data_dispose
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_get_interface_info_dispose
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_par_len_usb_dispose
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_group_base_usb_dispose
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_group_table_base_dispose
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_step_used_flag_base_dispose
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_file_list_usb_dispose
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_flag_usb_dispose
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sys_par_usb_dispose
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_group_table_for_comm
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_used_flag_for_comm
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBSetSlaveID
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
</UL>

<P><STRONG><a name="[7dc]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[941]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_subtask
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_custom_par
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_custom_par
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str_for_mem
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_and_updata_old_file
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_updata_new_file
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new1
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_step
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_step
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_step
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_step
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bbd_step
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_step
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_flash
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_node
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos_eep
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cur_frequency
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvToCalendar
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_string
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_data_to_str
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sine_hz
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetCalendarTime
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_output_freq
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_time_for_comm
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_save_file_for_comm
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_module_inf
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[942]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[943]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[944]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_step_table_flash
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_group_table
</UL>

<P><STRONG><a name="[317]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_par
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_group_step_used_flag_flash
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_step_used_flag
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_appoint_file_msg_for_comm
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_module
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[7de]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[7dd]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_test_flag
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_modules
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_table
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_99xx_list
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_mode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_test_method
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_gear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_output_cur
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcw_cur_gear
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_par
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frequency
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_time
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_ports
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ac_cur_gear
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_reset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_and_updata_old_file
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_updata_new_file
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new5
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_step
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_step
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_step
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_step
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bbd_step
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_step
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sys_par
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_slither_data
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ui_ele
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_options_par
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_par
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_test_falg
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_ir_gear_up_limit_to_string
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_sys_par
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_plc_option_sys_par
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option_sys_par
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_either_or_sys_par
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_sys_par
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_one_file
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrcat
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_soft_version
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csallwin_mian_ui
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_step_msg_for_comm
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_fetch_for_comm
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_all_res_for_comm
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hz_for_comm
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gear_for_comm
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_for_comm
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_group
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_scan_module
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scan_module
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>

<P><STRONG><a name="[945]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[946]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7df]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1d9]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_exception_log
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_custom_type_info
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTitle
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis_step
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_file_info
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roll_txt
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_dis_step
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_title
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_test_menu_title
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csallwin_mian_ui
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_edit_file_for_comm
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_save_file_for_comm
</UL>

<P><STRONG><a name="[268]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_options_way
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_cur
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pass_word_dispose
</UL>

<P><STRONG><a name="[532]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvToCalendar
</UL>

<P><STRONG><a name="[527]"></a>mktime</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvCalendar
</UL>

<P><STRONG><a name="[947]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[948]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[949]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7e2]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[7e4]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[7d8]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7d4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[132]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[7e5]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[7e6]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[14c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[7e0]"></a>_localtime_r</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[94a]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[7e3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[94b]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[94c]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[94d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7e7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[94e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[153]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[157]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[7f1]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4b1]"></a>__ARM_isinff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serve_test.o(i.__ARM_isinff))
<BR><BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ratio
</UL>

<P><STRONG><a name="[4b0]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serve_test.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ratio
</UL>

<P><STRONG><a name="[7ea]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 832 bytes, Stack size 136 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[7ee]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[7ef]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[7f0]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[7f2]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[7da]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[57a]"></a>cos</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_count_angle
</UL>

<P><STRONG><a name="[261]"></a>dis_cur</STRONG> (Thumb, 1958 bytes, Stack size 32 bytes, calibration.o(i.dis_cur))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dis_cur &rArr; GUI_DispFloatFix &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
</UL>

<P><STRONG><a name="[794]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[247]"></a>pow</STRONG> (Thumb, 2510 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_10kv_short_vref
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_5kv_short_vref
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sine_hz
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
</UL>

<P><STRONG><a name="[579]"></a>sin</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_count_angle
</UL>

<P><STRONG><a name="[7f3]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_1000hz
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_200hz
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_10kv_short_vref
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_5kv_short_vref
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_short_data
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[7f5]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[34c]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_bbd
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[7f8]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[7fb]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[801]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[28c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_count_angle
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_1000hz
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_200hz
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cur_frequency
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_ir_gear_up_limit_to_string
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_10kv_short_vref
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_5kv_short_vref
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sine_hz
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_short_data
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[7fd]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[248]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[7fe]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[386]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_bbd
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cap_limit
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cur_frequency
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_ir_gear_up_limit_to_string
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sine_hz
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
</UL>

<P><STRONG><a name="[7ff]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[246]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_dcw_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol_real_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_vol
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[94f]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[28a]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_count_angle
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cur_frequency
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_ir_gear_up_limit_to_string
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_10kv_short_vref
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_5kv_short_vref
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sine_hz
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[950]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[2bb]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_gr_cur_string
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_10kv_short_vref
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_5kv_short_vref
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
</UL>

<P><STRONG><a name="[800]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[804]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[28b]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_count_angle
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cap_limit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_10kv_short_vref
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_5kv_short_vref
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sine_hz
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[802]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[7f7]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[7fa]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2be]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[803]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[7ec]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[805]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[7f4]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[7eb]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[807]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2ba]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_bbd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cap_limit
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_1000hz
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_200hz
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_gr_cur_string
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_10kv_short_vref
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_5kv_short_vref
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_short_data
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[808]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[23e]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_correct_ir_vol
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_ir
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_gr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_dcw
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_bbd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_acw
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_data
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gr_ratio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ratio
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_cal_point_info
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_output_da
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_1000hz
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_200hz
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_res_f
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_cur
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_cc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hv
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_short_data
</UL>

<P><STRONG><a name="[80a]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[80e]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[23d]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_correct_ir_vol
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_ir
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_gr
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gr_ratio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ratio
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_cur_ratio
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_fall_vol_step_value
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_rise_vol_step_value
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_absorptance_res_value
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_step_value
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_gr_vol
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gr_vol
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_ir_rang
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
</UL>

<P><STRONG><a name="[80c]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geat_ir_res_cal_points_num
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_auto_find_gear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gr_ratio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ratio
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_execute_dis_charge
</UL>

<P><STRONG><a name="[80d]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[795]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSFloatMin
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatMin
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[80f]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[23b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_vol_cal_point_range
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dcw_vol_cal_point_range
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acw_vol_cal_point_range
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_correct_ir_vol
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_step
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_ir
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_gr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_dcw
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_bbd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_acw
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_res_order
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gr_measure
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_output_da
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_1000hz
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_200hz
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_gr_cur_string
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gear_vol
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_big_cap_details
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_res_f
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_server_for_comm
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_gr_vol
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_cur
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_ir_rang
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_mode_next_step
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bbd_par_list
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_par_list
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_cc
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_other_option
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hv
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_step_msg_for_comm
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_fetch_for_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_charge_cur_for_comm
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_real_cur_for_comm
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_for_comm
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_value_for_comm
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_for_comm
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_for_comm
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
</UL>

<P><STRONG><a name="[810]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[240]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_vol_exception
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_step_value
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_par_info
</UL>

<P><STRONG><a name="[951]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[4e5]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_cal_measure
</UL>

<P><STRONG><a name="[952]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[953]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[954]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[23c]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_correct_ir_vol
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir_out_v1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_lower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_vol_upper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_lower
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gr_res_upper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_gr_range_str
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par_for_syn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_float_par
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voltage
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new3
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ir_par
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gr_par
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_ir
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gr_ratio
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ratio
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_cur_ratio
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_cal_point_info
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_judge_err
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_output_da
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_1000hz
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_200hz
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_fall_vol_step_value
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gear_vol
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_rise_vol_step_value
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_step_value
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_server_for_comm
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hv
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_affect_par_info
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_short_data
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[955]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[227]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_res_meal
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_set_ir_gear
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_ir
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_vol_exception
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_vol_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_loop_string
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_auto_find_gear
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_auto_select_gear
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_judge_err
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cap_limit
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_1000hz
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_200hz
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_gr_cur_string
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_remain_vol
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_vol
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_cur
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gr_vol
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_ir_rang
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gear_up_limit
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bbd_par_list
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_execute_dis_charge
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_dis_float_at
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSFloatMin
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatMin
</UL>

<P><STRONG><a name="[811]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[814]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[23f]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_sine
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cur
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_bbd_cur
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_correct_ir_vol
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_c
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw_arc_g
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_cur
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_c
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw_arc_g
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_ir
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_gr
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_bbd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_res_order
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gr_ratio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ratio
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_cal_point_info
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cap_limit
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dc_gr_module_output_da
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_1000hz
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_200hz
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_gr_cur_string
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_gr_vol
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_gr_cur
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_ir_rang
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bbd_par_list
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_real_result_to_string_comm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string_comm
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_result_to_string
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_other_option
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[812]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[809]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_f
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[7f6]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[2b2]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ir_par
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_ir
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_bbd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_err
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_vol_exception
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_auto_find_gear
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_auto_select_gear
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_cur_ratio
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_judge_err
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_1000hz
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change_200hz
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gear_vol
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_absorptance_res_value
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_res_f
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_ir_res_loop
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_ir_rang
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_other_option
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSFloatMin
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatMin
</UL>

<P><STRONG><a name="[813]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[242]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_dis_value
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gr_ratio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ratio
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
</UL>

<P><STRONG><a name="[815]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_vol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_acw_vol
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gr_ratio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_ratio
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_fall_vol_step_value
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_rise_vol_step_value
</UL>

<P><STRONG><a name="[817]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[502]"></a>__aeabi_f2ulz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixull.o(x$fpl$llufromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
</UL>

<P><STRONG><a name="[818]"></a>_ll_ufrom_f</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ffixull.o(x$fpl$llufromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[7fc]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[7ed]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[819]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[159]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[158]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[180]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[17e]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[17c]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[17a]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1a2]"></a>init_speciality</STRONG> (Thumb, 346 bytes, Stack size 4 bytes, cs99xx_type.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_speciality
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_arc_h
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_default_type
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914AM_H
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9924
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9924_200
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9917CX_C
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9917CX_20
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929A_4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9906A
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9906B_K
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9917B
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9919A_8
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_TSK7630
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_VTC9929
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929AX_8
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929A_8
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9906B
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914CX
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922H_50
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933ET_3
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933ET_2
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933ET_1
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933ET
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933EG
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9923A
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9923_5
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9923G_3
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9923G_2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9923G_1
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9923CG
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9923
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9920B
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9930A_T
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9920A
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9917BX
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9919D
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9917A_8
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9917AX
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9916BX
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9916AX
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9915AX
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922M
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929B
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929A
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9919B
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9919A
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914G
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9950CG_1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9950CG
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933G
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9927LB
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS2676CH_1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS2676CH
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922G_2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922G_1
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922G
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9919G
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929EX_CC
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929EX
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922CX_1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914Y
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9912Y
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9921BX
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922FX
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929CX
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914DX
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914CX_C
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914BX
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914AX_1
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914D
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914AX
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922EXJ
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922EX
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922DX
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933G_
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9950ED
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9950DX
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9950CX
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9950X
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9913BX
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9913AX
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9912BX_T
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9912BX_L
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9912BX
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9912AX
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933X_100
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_RH8400AS
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933X
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922CX
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922BX_DZ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922BX_1
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922BXJ
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922LB
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9922BX
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929BX
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929AX_T
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929AX_F
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929AX_CC
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929AX
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9917DX
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9917CX
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914BM
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9914AM
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933EG_2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933EG_1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9939X
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9923ECG_1
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9923ECG
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9923G
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9933G_4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9929B_4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9919B_4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9919BX
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_CS9919AX
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_debug_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_all_init
</UL>

<P><STRONG><a name="[1d3]"></a>check_custom_sys_par</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, cs99xx_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_custom_par
</UL>

<P><STRONG><a name="[1ef]"></a>soft_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = soft_init &rArr; mdbus_init &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ratio_all
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file_table
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_99xx_list
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdbus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[24e]"></a>dis_contens_acw</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dis_contens_acw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_acw
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_arc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_mA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_cur
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_acw_more_more_cur
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_cur_uA
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_acw_out_v
</UL>

<P><STRONG><a name="[251]"></a>c_judge_err</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = c_judge_err &rArr; correct_exception &rArr; stop_cal &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_gr_cur
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_ir_res
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_correct_dcw_vol
</UL>

<P><STRONG><a name="[255]"></a>dis_contens_dcw</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dis_contens_dcw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dcw
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_arc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_mA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_cur_more
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_cur_uA
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_dcw_out_v
</UL>

<P><STRONG><a name="[259]"></a>dis_contens_ir</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dis_contens_ir &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ir
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_res
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_ir_out_v
</UL>

<P><STRONG><a name="[25b]"></a>dis_contens_bbd</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dis_contens_bbd &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_bbd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_uA
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_bbd_cur_mA
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_cur
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_bbd_more_more_cur
</UL>

<P><STRONG><a name="[25c]"></a>dis_contens_gr</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dis_contens_gr &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_gr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_correct_gr_out_cur
</UL>

<P><STRONG><a name="[2d4]"></a>count_eep_pos</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cs99xx_eep_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = count_eep_pos &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_excep_info
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_init_group_to_eep
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_one_step_to_eep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_one_step_to_eep
</UL>

<P><STRONG><a name="[2f6]"></a>dis_exception_str</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, cs99xx_exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dis_exception_str &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
</UL>

<P><STRONG><a name="[2f7]"></a>fail_mode_stop_dispose</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, cs99xx_exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_con_dispose
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_halt_dispose
</UL>

<P><STRONG><a name="[2fa]"></a>fail_mode_halt_dispose</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs99xx_exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = fail_mode_halt_dispose &rArr; fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_stop_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
</UL>

<P><STRONG><a name="[2fb]"></a>fail_mode_con_dispose</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, cs99xx_exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = fail_mode_con_dispose &rArr; fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_test
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_test_timer
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_sw
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_stop_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_fpdfc_dispose
</UL>

<P><STRONG><a name="[2ff]"></a>fail_mode_restart_dispose</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, cs99xx_exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = fail_mode_restart_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
</UL>

<P><STRONG><a name="[300]"></a>fail_mode_next_dispose</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, cs99xx_exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = fail_mode_next_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_list_dis
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_test
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
</UL>

<P><STRONG><a name="[301]"></a>fail_mode_fpdfc_dispose</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cs99xx_exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = fail_mode_fpdfc_dispose &rArr; fail_mode_con_dispose &rArr; fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_mode_con_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
</UL>

<P><STRONG><a name="[14]"></a>PLC_set</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, cs99xx_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = PLC_set &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_interface.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>Communication</STRONG> (Thumb, 1872 bytes, Stack size 144 bytes, cs99xx_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = Communication &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_interface.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USB_leading_out</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, cs99xx_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = USB_leading_out &rArr; wait_usb_connect &rArr; draw_wait_usb_connect_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_usb_connect
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_list
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_of_advance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_interface.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USB_leading_in</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, cs99xx_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = USB_leading_in &rArr; wait_usb_connect &rArr; draw_wait_usb_connect_gui &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_usb_connect
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_of_advance
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_interface.o(.data)
</UL>
<P><STRONG><a name="[382]"></a>server_save</STRONG> (Thumb, 896 bytes, Stack size 176 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = server_save &rArr; serve_charkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor_l
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_charkey
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str_for_mem
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetTime
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new1
</UL>

<P><STRONG><a name="[8a]"></a>server_new1</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = server_new1 &rArr; server_save &rArr; serve_charkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_memory.o(.text)
</UL>
<P><STRONG><a name="[385]"></a>prompt_for_ch_work_mode</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = prompt_for_ch_work_mode &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_new2
</UL>

<P><STRONG><a name="[8e]"></a>server_new2</STRONG> (Thumb, 522 bytes, Stack size 48 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = server_new2 &rArr; prompt_for_ch_work_mode &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_ch_work_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_memory.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>server_new3</STRONG> (Thumb, 1312 bytes, Stack size 176 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = server_new3 &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_memory.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>server_new4</STRONG> (Thumb, 1158 bytes, Stack size 176 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = server_new4 &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_memory.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>server_new5</STRONG> (Thumb, 730 bytes, Stack size 88 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = server_new5 &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs99xx_memory.o(.text)
</UL>
<P><STRONG><a name="[387]"></a>save_and_updata_new_file</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = save_and_updata_new_file &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_step_used_flag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_group_table
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
</UL>

<P><STRONG><a name="[388]"></a>edit_and_updata_old_file</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = edit_and_updata_old_file &rArr; load_steps_to_list &rArr; load_steps_to_list_flash &rArr; check_test_step_data &rArr; check_gr_par &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_group_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_file
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_step_used_flag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_group_table
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
</UL>

<P><STRONG><a name="[38a]"></a>init_new_and_edit_path</STRONG> (Thumb, 254 bytes, Stack size 12 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_new_and_edit_path
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_nonexist
</UL>

<P><STRONG><a name="[389]"></a>server_mem_shortcut_nonexist</STRONG> (Thumb, 574 bytes, Stack size 56 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = server_mem_shortcut_nonexist &rArr; server_save &rArr; serve_charkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_new_and_edit_path
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_updata_new_file
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
</UL>

<P><STRONG><a name="[38b]"></a>is_cover_or_read_or_del</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = is_cover_or_read_or_del &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
</UL>

<P><STRONG><a name="[38c]"></a>set_del_mode</STRONG> (Thumb, 674 bytes, Stack size 32 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = set_del_mode &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
</UL>

<P><STRONG><a name="[38d]"></a>prompt_for_new_del</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = prompt_for_new_del &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
</UL>

<P><STRONG><a name="[38e]"></a>prompt_for_del_all</STRONG> (Thumb, 780 bytes, Stack size 32 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = prompt_for_del_all &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
</UL>

<P><STRONG><a name="[38f]"></a>server_more_file</STRONG> (Thumb, 542 bytes, Stack size 56 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = server_more_file &rArr; authenticate_pw &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_all_file
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_del_all
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt_for_new_del
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_del_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_new_and_edit_path
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_and_updata_old_file
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_list
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_mem_shortcut_exist
</UL>

<P><STRONG><a name="[392]"></a>server_mem_shortcut_exist</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = server_mem_shortcut_exist &rArr; server_more_file &rArr; authenticate_pw &rArr; serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_more_file
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cover_or_read_or_del
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_save
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_cur_file_to_new_pos
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_step_used_flag
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_list
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_group_table
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
</UL>

<P><STRONG><a name="[393]"></a>roll_txt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = roll_txt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
</UL>

<P><STRONG><a name="[395]"></a>draw_one_file_info</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = draw_one_file_info &rArr; transform_time_to_str_for_mem &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str_for_mem
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_page_files
</UL>

<P><STRONG><a name="[397]"></a>draw_one_page_files</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cs99xx_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = draw_one_page_files &rArr; draw_one_file_info &rArr; transform_time_to_str_for_mem &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_one_file_info
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memory
</UL>

<P><STRONG><a name="[39a]"></a>offset_manual</STRONG> (Thumb, 1834 bytes, Stack size 16 bytes, cs99xx_offset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = offset_manual &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_offset_shortcut
</UL>

<P><STRONG><a name="[39b]"></a>offset_sel_mode</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, cs99xx_offset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = offset_sel_mode &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_offset_shortcut
</UL>

<P><STRONG><a name="[39c]"></a>serve_offset_shortcut</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, cs99xx_offset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = serve_offset_shortcut &rArr; offset_sel_mode &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_sel_mode
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_manual
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
</UL>

<P><STRONG><a name="[39e]"></a>offset_dis_step</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, cs99xx_offset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = offset_dis_step &rArr; test_unit_dis &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_offset_test_ports
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_dis
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_time
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_vol1
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
</UL>

<P><STRONG><a name="[39f]"></a>dis_one_offset_step</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, cs99xx_offset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dis_one_offset_step &rArr; offset_dis &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_dis
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_offset_one_page
</UL>

<P><STRONG><a name="[3a0]"></a>draw_offset_one_page</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cs99xx_offset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = draw_offset_one_page &rArr; dis_one_offset_step &rArr; offset_dis &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_offset_step
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
</UL>

<P><STRONG><a name="[3b6]"></a>serve_swap</STRONG> (Thumb, 502 bytes, Stack size 136 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = serve_swap &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
</UL>

<P><STRONG><a name="[3b7]"></a>serve_more</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = serve_more &rArr; serve_swap &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_step
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_step
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_swap
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_shortcut
</UL>

<P><STRONG><a name="[3b9]"></a>serve_shortcut</STRONG> (Thumb, 882 bytes, Stack size 64 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = serve_shortcut &rArr; serve_more &rArr; serve_swap &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_modes
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_step
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_step
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_more
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_this_page_info
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_step
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_step_mode
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_list
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_step
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
</UL>

<P><STRONG><a name="[3be]"></a>enter_mode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cs99xx_par_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = enter_mode &rArr; init_mode &rArr; init_dcw_step &rArr; define_cur_kinds
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
</UL>

<P><STRONG><a name="[3e7]"></a>serve_pwkey</STRONG> (Thumb, 398 bytes, Stack size 16 bytes, cs99xx_pw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = serve_pwkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authenticate_pw
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
</UL>

<P><STRONG><a name="[3e9]"></a>prompt_for_pw</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, cs99xx_pw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = prompt_for_pw &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_password
</UL>

<P><STRONG><a name="[3ef]"></a>amp_relay_ctrl_on_8833</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = amp_relay_ctrl_on_8833 &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on
</UL>

<P><STRONG><a name="[3f0]"></a>amp_relay_ctrl_on_old</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = amp_relay_ctrl_on_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_on
</UL>

<P><STRONG><a name="[3f8]"></a>serve_port_16_4094</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serve_port_16_4094 &rArr; MC14094_CMD_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD_Port
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_port_4094
</UL>

<P><STRONG><a name="[3fa]"></a>serve_port_8_4094</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serve_port_8_4094 &rArr; MC14094_CMD_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD_Port
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_port_4094
</UL>

<P><STRONG><a name="[3fb]"></a>serve_port_4094</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serve_port_4094 &rArr; serve_port_16_4094 &rArr; MC14094_CMD_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_port_8_4094
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_port_16_4094
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_port
</UL>

<P><STRONG><a name="[3fc]"></a>serve_port_cpld</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serve_port_cpld &rArr; cmd_cpld_hv_port
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cpld_hv_port
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_port
</UL>

<P><STRONG><a name="[406]"></a>amp_relay_ctrl_off_8833</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = amp_relay_ctrl_off_8833 &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off
</UL>

<P><STRONG><a name="[407]"></a>amp_relay_ctrl_off_old</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, cs99xx_relay_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_relay_ctrl_off
</UL>

<P><STRONG><a name="[436]"></a>is_res_clear</STRONG> (Thumb, 662 bytes, Stack size 32 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = is_res_clear &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
</UL>

<P><STRONG><a name="[437]"></a>res_census</STRONG> (Thumb, 1500 bytes, Stack size 80 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = res_census &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_total
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
</UL>

<P><STRONG><a name="[438]"></a>serve_result_more</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = serve_result_more &rArr; res_census &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_par
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_flag
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_census
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_res_clear
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
</UL>

<P><STRONG><a name="[439]"></a>result_jump</STRONG> (Thumb, 886 bytes, Stack size 152 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = result_jump &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_numkey
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_short_cut
</UL>

<P><STRONG><a name="[43c]"></a>result_short_cut</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = result_short_cut &rArr; result_jump &rArr; serve_numkey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_usb_connect
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_of_advance
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_jump
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_result_more
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
</UL>

<P><STRONG><a name="[43d]"></a>dis_title</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dis_title &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
</UL>

<P><STRONG><a name="[43e]"></a>dis_one_res</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, cs99xx_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_time_to_str
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_cur
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_dis_vol
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
</UL>

<P><STRONG><a name="[441]"></a>init_more_options_list</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_options_way
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_options_way
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_filtering_deep_options_way
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_cur_gear_options_way
</UL>

<P><STRONG><a name="[442]"></a>tail_add_more_opt</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_options_way
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_signal_options_way
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_filtering_deep_options_way
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_cur_gear_options_way
</UL>

<P><STRONG><a name="[445]"></a>more_option_list_init</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = more_option_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_plc_signal_options_list
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_cur_gear_options_list
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_filtering_deep_options_list
</UL>

<P><STRONG><a name="[440]"></a>cc_cur_gear_options_way</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cc_cur_gear_options_way
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_add_more_opt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_more_options_list
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_cur_gear_options_list
</UL>

<P><STRONG><a name="[443]"></a>ir_filtering_deep_options_way</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ir_filtering_deep_options_way
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_add_more_opt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_more_options_list
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_filtering_deep_options_list
</UL>

<P><STRONG><a name="[447]"></a>plc_signal_options_way</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = plc_signal_options_way
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_add_more_opt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_more_options_list
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_plc_signal_options_list
</UL>

<P><STRONG><a name="[44c]"></a>init_par_list</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_par_way_1
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_test_way_vol_drop2
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_cs9929ax_f
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_2
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_for_single_gr
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_1
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_set_par_way_2
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_set_par_way_1
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_set_par_way_1
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_set_par_way_2
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_set_par_way_1
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_set_par_way_1
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_set_par_way_1
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_gr_test_way_1
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_test_way_1
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_test_way_vol_drop1
</UL>

<P><STRONG><a name="[44d]"></a>tail_insert_option</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tail_insert_option
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_par_way_1
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_test_way_vol_drop2
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_cs9929ax_f
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_2
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_for_single_gr
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_par_way_1
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_set_par_way_2
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_set_par_way_1
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_set_par_way_1
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_set_par_way_2
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_set_par_way_1
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_set_par_way_1
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_set_par_way_1
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_gr_test_way_1
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_test_way_1
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_test_way_vol_drop1
</UL>

<P><STRONG><a name="[44b]"></a>gr_test_way_vol_drop1</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gr_test_way_vol_drop1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_par_list
</UL>

<P><STRONG><a name="[44f]"></a>gr_test_way_1</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gr_test_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_par_list
</UL>

<P><STRONG><a name="[450]"></a>dc_gr_test_way_1</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dc_gr_test_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_par_list
</UL>

<P><STRONG><a name="[452]"></a>init_gr_par_info</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_par_list
</UL>

<P><STRONG><a name="[451]"></a>init_gr_par_list</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_gr_par_list &rArr; gr_test_way_vol_drop2 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_gr_cur_no_dis_bits
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_gr_vol_gear_affect_par_info
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_test_way_vol_drop2
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_par_info
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_gr_test_way_1
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_test_way_1
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr_test_way_vol_drop1
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
</UL>

<P><STRONG><a name="[453]"></a>acw_set_par_way_1</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = acw_set_par_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_par_list
</UL>

<P><STRONG><a name="[46b]"></a>init_acw_par_info</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
</UL>

<P><STRONG><a name="[454]"></a>init_acw_par_list</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_acw_par_list &rArr; acw_set_par_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_ac_cur_gear_affect_par_info
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_set_par_way_1
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
</UL>

<P><STRONG><a name="[455]"></a>cc_set_par_way_1</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cc_set_par_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_par_list
</UL>

<P><STRONG><a name="[456]"></a>init_cc_par_list</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = init_cc_par_list &rArr; init_cc_cur_gear_options_list &rArr; more_option_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_ac_cur_gear_affect_par_info
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cc_cur_gear_options_list
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_set_par_way_1
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
</UL>

<P><STRONG><a name="[457]"></a>dcw_set_par_way_1</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcw_set_par_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_par_list
</UL>

<P><STRONG><a name="[458]"></a>dcw_set_par_way_2</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcw_set_par_way_2 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_par_list
</UL>

<P><STRONG><a name="[45a]"></a>init_dcw_par_info</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_par_list
</UL>

<P><STRONG><a name="[459]"></a>init_dcw_par_list</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_dcw_par_list &rArr; dcw_set_par_way_2 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_dc_cur_gear_affect_par_info
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_par_info
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_set_par_way_2
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_set_par_way_1
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
</UL>

<P><STRONG><a name="[45b]"></a>ir_set_par_way_1</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ir_set_par_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_par_list
</UL>

<P><STRONG><a name="[45d]"></a>init_ir_par_info</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_par_list
</UL>

<P><STRONG><a name="[45c]"></a>init_ir_par_list</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_ir_par_list &rArr; ir_set_par_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_par_info
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_set_par_way_1
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
</UL>

<P><STRONG><a name="[45e]"></a>bbd_set_par_way_1</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbd_set_par_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bbd_par_list
</UL>

<P><STRONG><a name="[45f]"></a>bbd_set_par_way_2</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>

<P><STRONG><a name="[460]"></a>init_bbd_par_list</STRONG> (Thumb, 882 bytes, Stack size 48 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_bbd_par_list &rArr; bbd_set_par_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_set_par_way_1
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
</UL>

<P><STRONG><a name="[461]"></a>sys_set_par_way_1</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_set_par_way_1 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_par_list
</UL>

<P><STRONG><a name="[462]"></a>sys_set_par_way_for_single_gr</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_set_par_way_for_single_gr &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_par_list
</UL>

<P><STRONG><a name="[463]"></a>sys_set_par_way_2</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_set_par_way_2 &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_par_list
</UL>

<P><STRONG><a name="[464]"></a>sys_set_par_way_cs9929ax_f</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_set_par_way_cs9929ax_f &rArr; tail_insert_option
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_insert_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_list
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys_par_list
</UL>

<P><STRONG><a name="[46c]"></a>init_com_par</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, cs99xx_set_par_path.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_par_info_list
</UL>

<P><STRONG><a name="[471]"></a>serve_timekey</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, cs99xx_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = serve_timekey &rArr; update_data &rArr; shift_cursor &rArr; cursor_pos &rArr; cursor_pos_n &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_FillPolygon &rArr; _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_data
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_data
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settime
</UL>

<P><STRONG><a name="[47c]"></a>set_arc_vref</STRONG> (Thumb, 390 bytes, Stack size 0 bytes, cs99xx_vref.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
</UL>

<P><STRONG><a name="[48f]"></a>g_mode_next_step</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = g_mode_next_step &rArr; test_vref &rArr; dcw_10kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_test_timer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_steps_to_list
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_test_timer
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_sw
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_ui
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_vol_step_value
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_result
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_gear
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[492]"></a>into_output_delay</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, general_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = into_output_delay &rArr; dis_test_time &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_test_time_string
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_time
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_control
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testing_process_controlx
</UL>

<P><STRONG><a name="[49f]"></a>offset_res_f</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = offset_res_f &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_g_irq
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sever_offset_test_over
</UL>

<P><STRONG><a name="[4a9]"></a>set_offset_mode</STRONG> (Thumb, 686 bytes, Stack size 32 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = set_offset_mode &rArr; draw_short_cut_bm &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_short_cut_bm
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_pos
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_more
</UL>

<P><STRONG><a name="[4aa]"></a>serve_test_more</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = serve_test_more &rArr; sys_offset &rArr; offset_test &rArr; offset_details_g &rArr; exception_handling &rArr; fail_mode_fpdfc_dispose &rArr; fail_mode_con_dispose &rArr; fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_offset
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_mode
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_result
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_test_shortcut
</UL>

<P><STRONG><a name="[4ba]"></a>test_details</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = test_details &rArr; test_ready &rArr; test_vref &rArr; dcw_10kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_stop_relay_motion
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cur_result
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_fall_vol_step_value
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs99xx_test
</UL>

<P><STRONG><a name="[4bc]"></a>test_big_cap_details</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = test_big_cap_details &rArr; test_ready &rArr; test_vref &rArr; dcw_10kv_short_vref &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_sample_task
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sample_task
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_test_relay_motion
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dis
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_rise_vol_step_value
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_vref
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_execute_dis_charge
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcw_big_cap_start_charge
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs99xx_big_cap_test
</UL>

<P><STRONG><a name="[4c2]"></a>offset_details</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = offset_details &rArr; exception_handling &rArr; fail_mode_fpdfc_dispose &rArr; fail_mode_con_dispose &rArr; fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_schedule_task
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_test_timer
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_fall_vol_step_value
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_rise_vol_step_value
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_test
</UL>

<P><STRONG><a name="[4c3]"></a>offset_details_g</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = offset_details_g &rArr; exception_handling &rArr; fail_mode_fpdfc_dispose &rArr; fail_mode_con_dispose &rArr; fail_mode_stop_dispose &rArr; res_list_dis &rArr; res_draw_one_page &rArr; test_dis_one_res &rArr; res_dis_cur &rArr; ch_loop_result_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_schedule_task
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_test_timer
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_handling
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_change
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_fall_vol_step_value
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_rise_vol_step_value
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_test
</UL>

<P><STRONG><a name="[4c5]"></a>clear_par</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, serve_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clear_par &rArr; clear_test_flag &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_test_flag
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
</UL>

<P><STRONG><a name="[4d1]"></a>bbd_dis_step</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, cs99xx_bbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = bbd_dis_step &rArr; test_unit_dis &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_offset_test_ports
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_dis
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_time
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_test_vol1
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
</UL>

<P><STRONG><a name="[4d2]"></a>bbd_manual</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, cs99xx_bbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = bbd_manual &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serve_bbd_shortcut
</UL>

<P><STRONG><a name="[4d3]"></a>serve_bbd_shortcut</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, cs99xx_bbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = serve_bbd_shortcut &rArr; bbd_manual &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_menu
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbd_manual
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
</UL>

<P><STRONG><a name="[4d4]"></a>dis_one_bbd_step</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, cs99xx_bbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dis_one_bbd_step &rArr; offset_dis &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_dis
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bbd_one_page
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
</UL>

<P><STRONG><a name="[4d5]"></a>draw_bbd_one_page</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cs99xx_bbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = draw_bbd_one_page &rArr; dis_one_bbd_step &rArr; offset_dis &rArr; transform_test_loop_string &rArr; transform_test_ir_res_loop &rArr; tr_ir_gear_up_limit_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_one_bbd_step
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bbd
</UL>

<P><STRONG><a name="[4da]"></a>shift_acw_cur_gear</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, acw_relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shift_acw_cur_gear &rArr; mc14094_set_gear &rArr; MC14094_Updata &rArr; MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc14094_set_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_exit_test_relay_motion
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acw_into_test_relay_ready
</UL>

<P><STRONG><a name="[4e1]"></a>acw_judge_err</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, acw_count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = acw_judge_err &rArr; judge_vol_exception &rArr; irq_stop_relay_motion &rArr; amp_relay_ctrl_off &rArr; amp_relay_ctrl_off_old &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_acw
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_exception_scene
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_vol_exception
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_err
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_acw_dis_value
</UL>

<P><STRONG><a name="[4f6]"></a>test_led_flash</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, auto_calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
</UL>

<P><STRONG><a name="[94]"></a>auto_cal_save_ratio</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = auto_cal_save_ratio &rArr; save_ratio &rArr; save_ratio_from_flash &rArr; writebuffer_spi_flash &rArr; at45_buffer_write &rArr; write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_calibration.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>count_cur_ratio</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = count_cur_ratio &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_calibration.o(.text)
</UL>
<P><STRONG><a name="[4f5]"></a>init_cur_cal_info</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init_cur_cal_info &rArr; get_cur_cal_point_info &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_cal_point_info
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_cur_fun
</UL>

<P><STRONG><a name="[95]"></a>auto_cal_cur_fun</STRONG> (Thumb, 592 bytes, Stack size 136 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = auto_cal_cur_fun &rArr; startup_cal &rArr; open_sine &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm_vol_segment_s
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cur_cal_info
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_led_flash
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cal_ele
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_cur_to_string
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_da_ad_to_string
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_num_to_string
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ui_ele
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_cal_ui_ele
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ratio
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_calibration.o(.text)
</UL>
<P><STRONG><a name="[505]"></a>init_cal_cur_order</STRONG> (Thumb, 1462 bytes, Stack size 20 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_cal_cur_order
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_order_table
</UL>

<P><STRONG><a name="[96]"></a>count_vol_ratio</STRONG> (Thumb, 568 bytes, Stack size 72 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = count_vol_ratio &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_calibration.o(.text)
</UL>
<P><STRONG><a name="[4f9]"></a>init_ir_vol_cal_info</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = init_ir_vol_cal_info &rArr; get_vol_cal_point_info &rArr; select_gr_cal_menu &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_cal_point_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
</UL>

<P><STRONG><a name="[4fa]"></a>init_dcw_vol_cal_info</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = init_dcw_vol_cal_info &rArr; get_vol_cal_point_info &rArr; select_gr_cal_menu &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_cal_point_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
</UL>

<P><STRONG><a name="[4fb]"></a>init_acw_vol_cal_info</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = init_acw_vol_cal_info &rArr; get_vol_cal_point_info &rArr; select_gr_cal_menu &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_cal_point_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_vol_fun
</UL>

<P><STRONG><a name="[9a]"></a>auto_cal_vol_fun</STRONG> (Thumb, 656 bytes, Stack size 48 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = auto_cal_vol_fun &rArr; startup_cal &rArr; open_sine &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_ir_meal
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_dcw_vol_meal
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cal_acw_vol_meal
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acw_vol_cal_info
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcw_vol_cal_info
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_vol_cal_info
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_led_flash
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_vol_to_string
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_da_ad_to_string
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_num_to_string
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ui_ele
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_cal_ui_ele
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_calibration.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>count_gr_ratio</STRONG> (Thumb, 1020 bytes, Stack size 72 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = count_gr_ratio &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_calibration.o(.text)
</UL>
<P><STRONG><a name="[4fc]"></a>init_gr_cal_info</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = init_gr_cal_info &rArr; get_vol_cal_point_info &rArr; select_gr_cal_menu &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_cal_point_info
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gr_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
</UL>

<P><STRONG><a name="[98]"></a>auto_cal_save_dc_gr_ratio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = auto_cal_save_dc_gr_ratio &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_calibration.o(.text)
</UL>
<P><STRONG><a name="[4fd]"></a>init_dc_gr_cal_info</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = init_dc_gr_cal_info &rArr; get_vol_cal_point_info &rArr; select_gr_cal_menu &rArr; send_dc_module_cmd &rArr; set_vol_gear_dc_module_bridge &rArr; mb_set_slave_info &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_cal_dc_module_addr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dc_gr_map_ratio_n
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_cal_point_info
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_gr_fun
</UL>

<P><STRONG><a name="[99]"></a>auto_cal_gr_fun</STRONG> (Thumb, 618 bytes, Stack size 40 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = auto_cal_gr_fun &rArr; startup_cal &rArr; open_sine &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dc_module_cmd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_open_err
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_ad
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_cal_dc_module_addr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cur_cal_dc_module_addr
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dc_gr_module_id
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dc_gr_cal_info
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gr_cal_info
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_led_flash
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_gr_measure
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_cal_ele
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_da_ad_to_string
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_num_to_string
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ui_ele
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gr_gear
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_calibration.o(.text)
</UL>
<P><STRONG><a name="[500]"></a>init_cal_vol_order</STRONG> (Thumb, 414 bytes, Stack size 64 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = init_cal_vol_order &rArr; get_ir_vol_cal_point_range &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_vol_cal_point_range
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dcw_vol_cal_point_range
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acw_vol_cal_point_range
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gr_total_cal_points
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_order_table
</UL>

<P><STRONG><a name="[501]"></a>init_ir_res_cal_info</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_ir_res_cal_info &rArr; get_res_cal_point_info &rArr; get_ir_res_meal &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_cal_point_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_cal_ir_fun
</UL>

<P><STRONG><a name="[9b]"></a>auto_cal_ir_fun</STRONG> (Thumb, 954 bytes, Stack size 80 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = auto_cal_ir_fun &rArr; startup_cal &rArr; open_sine &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ratio
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_CMD
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_cal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cal
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_res_cal_info
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_led_flash
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_res_to_string
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_vol_to_string
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_da_ad_to_string
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_auto_cal_num_to_string
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ui_ele
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_auto_cal_ui_ele
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_calibration.o(.text)
</UL>
<P><STRONG><a name="[503]"></a>init_cal_res_order</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_cal_res_order &rArr; geat_ir_res_cal_points_num &rArr; get_ir_res_meal &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geat_ir_res_cal_points_num
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_res_meal
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_order_table
</UL>

<P><STRONG><a name="[504]"></a>init_cal_order_table</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = init_cal_order_table &rArr; init_cal_vol_order &rArr; get_ir_vol_cal_point_range &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_res_order
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_vol_order
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_cur_order
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_order
</UL>

<P><STRONG><a name="[506]"></a>init_cal_order</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, auto_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_cal_order &rArr; init_cal_order_table &rArr; init_cal_vol_order &rArr; get_ir_vol_cal_point_range &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_cur_range_pool
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cal_order_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_calibration
</UL>

<P><STRONG><a name="[528]"></a>RTC_NVIC_Conf</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_NVIC_Conf &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[9d]"></a>IsKeyDown_key_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, keyboard.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>IsKeyDown_key_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, keyboard.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>IsKeyDown_key_F1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_F1 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>IsKeyDown_key_F2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_F2 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>IsKeyDown_key_F3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_F3 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>IsKeyDown_key_F4</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_F4 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>IsKeyDown_key_exit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_exit &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>IsKeyDown_key_enter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_enter &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>IsKeyDown_key_0</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_0 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>IsKeyDown_key_1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_1 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>IsKeyDown_key_2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_2 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>IsKeyDown_key_3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_3 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>IsKeyDown_key_4</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_4 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>IsKeyDown_key_5</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_5 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>IsKeyDown_key_6</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_6 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>IsKeyDown_key_7</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_7 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>IsKeyDown_key_8</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_8 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>IsKeyDown_key_9</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_9 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>IsKeyDown_key_01</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_01 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>IsKeyDown_key_02</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_02 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>IsKeyDown_key_03</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_03 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>IsKeyDown_key_04</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_04 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>IsKeyDown_key_05</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_05 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>IsKeyDown_key_06</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_06 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>IsKeyDown_key_EN0</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_EN0 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>IsKeyDown_key_EN1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_EN1 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>IsKeyDown_key_F4_8</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_F4_8 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>IsKeyDown_key_F4_9</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_F4_9 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>IsKeyDown_key_F4_5</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDown_key_F4_5 &rArr; scan_keyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text)
</UL>
<P><STRONG><a name="[53e]"></a>DetectKey</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = DetectKey &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_key_value
</UL>

<P><STRONG><a name="[540]"></a>Det_combination</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Det_combination &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_keyboard
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_key_value
</UL>

<P><STRONG><a name="[543]"></a>I2C_GPIO_SDA_IN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_GPIO_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Idle
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cread_byte_from24C512
</UL>

<P><STRONG><a name="[544]"></a>I2C_GPIO_SDA_OUT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Idle
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cread_byte_from24C512
</UL>

<P><STRONG><a name="[547]"></a>I2C_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_ee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Idle
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cread_byte_from24C512
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cwrite_byte_to24C512
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_NOACK
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_ACK
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_ACK
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[546]"></a>I2C_Start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetAddr
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Idle
</UL>

<P><STRONG><a name="[548]"></a>I2C_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ByteWrite
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Idle
</UL>

<P><STRONG><a name="[549]"></a>I2C_Receive_ACK</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Receive_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ByteWrite
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetAddr
</UL>

<P><STRONG><a name="[54a]"></a>I2C_Send_ACK</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Send_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>

<P><STRONG><a name="[54b]"></a>I2C_Send_NOACK</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Send_NOACK
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>

<P><STRONG><a name="[54c]"></a>I2Cwrite_byte_to24C512</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2Cwrite_byte_to24C512
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ByteWrite
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetAddr
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Idle
</UL>

<P><STRONG><a name="[54d]"></a>I2Cread_byte_from24C512</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2Cread_byte_from24C512 &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_SDA_OUT
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>

<P><STRONG><a name="[54f]"></a>I2C_Wait_Idle</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Wait_Idle &rArr; I2C_GPIO_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cwrite_byte_to24C512
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_SDA_OUT
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[550]"></a>I2C_SetAddr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_SetAddr &rArr; I2Cwrite_byte_to24C512
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cwrite_byte_to24C512
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_ACK
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ByteWrite
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[551]"></a>I2C_GPIO_Config</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, i2c_ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
</UL>

<P><STRONG><a name="[555]"></a>MC14094_GPIO_Config</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MC14094_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Init
</UL>

<P><STRONG><a name="[557]"></a>MC14094_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc14094.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write_RA
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte_RA
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte_Port
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte
</UL>

<P><STRONG><a name="[556]"></a>MC14094_WriteByte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write
</UL>

<P><STRONG><a name="[558]"></a>MC14094_Write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MC14094_Write &rArr; MC14094_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Init
</UL>

<P><STRONG><a name="[559]"></a>MC14094_WriteByte_Port</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MC14094_WriteByte_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write_Port
</UL>

<P><STRONG><a name="[55a]"></a>MC14094_Write_Port</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mc14094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MC14094_Write_Port &rArr; MC14094_WriteByte_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte_Port
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata_Port
</UL>

<P><STRONG><a name="[55b]"></a>MC14094_WriteByte_RA</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mc14094.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Write_RA
</UL>

<P><STRONG><a name="[55c]"></a>MC14094_Write_RA</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mc14094.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_WriteByte_RA
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC14094_Updata_RA
</UL>

<P><STRONG><a name="[55d]"></a>TIM3_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dac_vref.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM3_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_vref_init
</UL>

<P><STRONG><a name="[55e]"></a>CD4051_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dac_vref.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CD4051_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_vref_init
</UL>

<P><STRONG><a name="[55f]"></a>Dac1_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dac_vref.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Dac1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_vref_init
</UL>

<P><STRONG><a name="[57c]"></a>flash_cs_en_at45db161</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_cs_en_at45db161
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip_spi_flash
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageErase
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadSector
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteSector
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Read_Sector_Protection_Reg
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Sector_Protection_Reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase_Sector_Protection_Reg
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PROTE_DISABLE
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PROTE_ENABLE
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
</UL>

<P><STRONG><a name="[57d]"></a>flash_cs_dis_at45db161</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_cs_dis_at45db161
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip_spi_flash
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageErase
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadSector
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteSector
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Read_Sector_Protection_Reg
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Sector_Protection_Reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase_Sector_Protection_Reg
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PROTE_DISABLE
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PROTE_ENABLE
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_gpio_init
</UL>

<P><STRONG><a name="[57e]"></a>at45_flash_lock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at45_flash_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip_spi_flash
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageErase
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteSector
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Sector_Protection_Reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase_Sector_Protection_Reg
</UL>

<P><STRONG><a name="[57f]"></a>at45_flash_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at45_flash_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip_spi_flash
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageErase
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteSector
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Sector_Protection_Reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase_Sector_Protection_Reg
</UL>

<P><STRONG><a name="[580]"></a>at45_gpio_init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at45_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
</UL>

<P><STRONG><a name="[581]"></a>at45_send_byte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at45_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip_spi_flash
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageErase
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadSector
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteSector
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Read_Sector_Protection_Reg
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Sector_Protection_Reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase_Sector_Protection_Reg
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PROTE_DISABLE
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PROTE_ENABLE
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
</UL>

<P><STRONG><a name="[582]"></a>at45_read_byte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadSector
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Read_Sector_Protection_Reg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
</UL>

<P><STRONG><a name="[583]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_read_byte
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip_spi_flash
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageErase
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadSector
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteSector
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Read_Sector_Protection_Reg
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Sector_Protection_Reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase_Sector_Protection_Reg
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PROTE_DISABLE
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PROTE_ENABLE
</UL>

<P><STRONG><a name="[584]"></a>SPI_FLASH_PROTE_ENABLE</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxx
</UL>

<P><STRONG><a name="[585]"></a>SPI_FLASH_PROTE_DISABLE</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxx
</UL>

<P><STRONG><a name="[587]"></a>SPI_FLASH_Erase_Sector_Protection_Reg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_Erase_Sector_Protection_Reg &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_unlock
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_lock
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_flash
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxx
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
</UL>

<P><STRONG><a name="[588]"></a>SPI_FLASH_Write_Sector_Protection_Reg</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_unlock
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_lock
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_flash
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxx
</UL>

<P><STRONG><a name="[589]"></a>SPI_FLASH_Read_Sector_Protection_Reg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_Read_Sector_Protection_Reg &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_read_byte
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_flash
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxx
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
</UL>

<P><STRONG><a name="[58b]"></a>SPI_FLASH_WriteSector</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_FLASH_WriteSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_unlock
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_flash_lock
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_page_and_check_ok
</UL>

<P><STRONG><a name="[58c]"></a>SPI_FLASH_ReadSector</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_read_byte
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_buffer_write
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_buffer_read
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_page_and_check_ok
</UL>

<P><STRONG><a name="[58d]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_ReadID &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_read_byte
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_send_byte
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_dis_at45db161
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cs_en_at45db161
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
</UL>

<P><STRONG><a name="[58e]"></a>write_page_and_check_ok</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_page_and_check_ok &rArr; SPI_FLASH_ReadSector &rArr; SPI_FLASH_WaitForWriteEnd &rArr; at45_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadSector
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteSector
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_buffer_write
</UL>

<P><STRONG><a name="[598]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[5a1]"></a>OS_InitTaskStat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5a5]"></a>OS_InitTaskIdle</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5a6]"></a>OS_InitEventList</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5a8]"></a>OS_InitTCBList</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5ab]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5aa]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5c4]"></a>OSMutex_RdyAtPrio</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSMutex_RdyAtPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[5db]"></a>OSTmr_Unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTmr_Unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[5de]"></a>OSTmr_Alloc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[5dc]"></a>OSTmr_Lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[5e1]"></a>OSTmr_Free</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[5e0]"></a>OSTmr_Unlink</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[5e6]"></a>OSTmr_Link</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[ba]"></a>OSTmr_Task</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSTmr_Unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[5e9]"></a>OSTmr_InitTask</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[6fd]"></a>ProgressBar</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = ProgressBar &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Refresh_Rect
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_self_check
</UL>

<P><STRONG><a name="[700]"></a>draw_port</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, gui_draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = draw_port &rArr; GUI_ClearRect &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_port
</UL>

<P><STRONG><a name="[715]"></a>getFileModeType</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_appoint_file_msg_for_comm
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_file_msg_for_comm
</UL>

<P><STRONG><a name="[716]"></a>getFileArcType</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_appoint_file_msg_for_comm
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_file_msg_for_comm
</UL>

<P><STRONG><a name="[708]"></a>getFileModeType_f</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_edit_file_for_comm
</UL>

<P><STRONG><a name="[709]"></a>getFileArcType_f</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_file_for_comm
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_edit_file_for_comm
</UL>

<P><STRONG><a name="[70a]"></a>getTestMode_f</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cs99xx_for_comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_for_comm
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_for_comm
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_port_for_comm
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port_for_comm
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_for_comm
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_steps_cont_for_comm
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steps_cont_for_comm
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_signal_for_comm
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pass_signal_for_comm
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hz_for_comm
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hz_for_comm
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_arc_for_comm
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_arc_for_comm
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_charge_cur_for_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_charge_cur_for_comm
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_offset_value_for_comm
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_for_comm
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_offset_value_for_comm
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_for_comm
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_for_comm
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_for_comm
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gear_for_comm
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gear_for_comm
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vol_for_comm
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vol_for_comm
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_for_comm
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bbd_short_check_for_comm
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bbd_short_check_for_comm
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bbd_open_check_for_comm
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bbd_open_check_for_comm
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inster_one_step_for_comm
</UL>

<P><STRONG><a name="[6d3]"></a>prvvUARTTxReadyISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTTxReadyISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6d2]"></a>prvvUARTRxISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTRxISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6d6]"></a>prvvTIMERExpiredISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, porttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvTIMERExpiredISR
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[728]"></a>prvvUARTTxReadyISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTTxReadyISR
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxx
</UL>

<P><STRONG><a name="[727]"></a>prvvUARTRxISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTRxISR
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxx
</UL>

<P><STRONG><a name="[72a]"></a>prvvTIMERExpiredISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, porttimer_m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvTIMERExpiredISR
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[743]"></a>writecode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writecode
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_st01
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Refresh_Rect
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd24064_Init
</UL>

<P><STRONG><a name="[746]"></a>writeon</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lcd24064.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Refresh_Rect
</UL>

<P><STRONG><a name="[745]"></a>writedata</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd24064.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_st01
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LCD24064
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD24064_Refresh_Rect
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd24064_Init
</UL>

<P><STRONG><a name="[744]"></a>judge_st01</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd24064.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecode
</UL>

<P><STRONG><a name="[75a]"></a>_SwapInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui2dlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1
</UL>

<P><STRONG><a name="[759]"></a>Abs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui2dlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1
</UL>

<P><STRONG><a name="[752]"></a>_atan0_45</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _atan0_45
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atan2
</UL>

<P><STRONG><a name="[751]"></a>_atan2</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _atan2 &rArr; _atan0_45
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atan0_45
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcOrto
</UL>

<P><STRONG><a name="[75b]"></a>_SetLineColor</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, gui2dlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1
</UL>

<P><STRONG><a name="[753]"></a>_CalcOrto</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _CalcOrto &rArr; _atan2 &rArr; _atan0_45
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_cos
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_sin
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>

<P><STRONG><a name="[757]"></a>_DrawLineEnd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _DrawLineEnd &rArr; GL_DrawPoint &rArr; GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>

<P><STRONG><a name="[762]"></a>GL_DrawLineRelNM</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
</UL>

<P><STRONG><a name="[765]"></a>GL_DrawLineToNM</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui2dlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
</UL>

<P><STRONG><a name="[768]"></a>_DrawRect</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gui2dlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _DrawRect &rArr; LCD_DrawVLine &rArr; LCD_L0_DrawVLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>

<P><STRONG><a name="[779]"></a>_GotoY</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_goto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoY
</UL>

<P><STRONG><a name="[77b]"></a>_GotoX</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_goto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoX
</UL>

<P><STRONG><a name="[77c]"></a>GUIPROP_FindChar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, guicharp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_IsInFont
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_GetCharDistX
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[781]"></a>_InitContext</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _InitContext &rArr; LCD_SetColor &rArr; LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetRect
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[788]"></a>DB2SJIS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guiencjs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine_SJIS
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLineDistX_SJIS
</UL>

<P><STRONG><a name="[138]"></a>_GetLineDistX_SJIS</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, guiencjs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GetLineDistX_SJIS &rArr; GUI_GetCharDistX
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB2SJIS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiencjs.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>_GetLineLen_SJIS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, guiencjs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetLineLen_SJIS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiencjs.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>_DispLine_SJIS</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, guiencjs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _DispLine_SJIS &rArr; GL_DispChar &rArr; GUI_DispNextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DispChar
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB2SJIS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiencjs.o(.constdata)
</UL>
<P><STRONG><a name="[793]"></a>_DispFloatFix</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, guivalf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSFloatMin
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSFloatFix
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatMin
</UL>

<P><STRONG><a name="[13b]"></a>_DrawBitmap_565</STRONG> (Thumb, 538 bytes, Stack size 88 bytes, lcd_drawbitmap_565.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _DrawBitmap_565 &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color_565
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapRBEx
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFixedPaletteEx
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColorIndex
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_drawbitmap_565.o(.constdata)
</UL>
<P><STRONG><a name="[79f]"></a>_Check_NegLong</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_adddecshift.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Check_NegLong
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>

<P><STRONG><a name="[7a0]"></a>_DrawHLine</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_fillpolygon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _DrawHLine &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[7a6]"></a>_CheckYInterSect</STRONG> (Thumb, 150 bytes, Stack size 28 bytes, gui_fillpolygon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _CheckYInterSect
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[7a3]"></a>_Add</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, gui_fillpolygon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddPoint
</UL>

<P><STRONG><a name="[7a4]"></a>_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_fillpolygon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[7a1]"></a>_Flush</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, gui_fillpolygon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _Flush &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[7a2]"></a>_AddPoint</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, gui_fillpolygon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine &rArr; LCD_L0_XorPixel &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[7a5]"></a>_GetPrevPointDiffy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_fillpolygon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPrevPointDiffy
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[13d]"></a>_GetCharCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_uc_encodenone.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>_GetCharSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc_encodenone.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>_CalcSizeOfChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc_encodenone.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>_Encode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc_encodenone.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[7b1]"></a>_DispLine</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, guicharline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[7b4]"></a>Draw8Point</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, guicirc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircle
</UL>

<P><STRONG><a name="[7bc]"></a>_GetColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
</UL>

<P><STRONG><a name="[7d0]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _DrawBitLine1BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[7d1]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _DrawBitLine2BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[7d2]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _DrawBitLine4BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[7d3]"></a>_DrawBitLine8BPP</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lcddummy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _DrawBitLine8BPP &rArr; LCD_L0_SetPixelIndex &rArr; LCD24064_SetPixelIndex &rArr; DrawPot
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[7e1]"></a>_tm_carry</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[806]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[7f9]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[816]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[80b]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[133]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
